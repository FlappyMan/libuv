// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.canceltradebatch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ukex_2ecanceltradebatch_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ukex_2ecanceltradebatch_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ukex_2ecanceltradebatch_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ukex_2ecanceltradebatch_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2ecanceltradebatch_2eproto;
namespace ukex {
class canceltradebatch;
class canceltradebatchDefaultTypeInternal;
extern canceltradebatchDefaultTypeInternal _canceltradebatch_default_instance_;
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> ::ukex::canceltradebatch* Arena::CreateMaybeMessage<::ukex::canceltradebatch>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ukex {

enum canceltradebatch_CONST : int {
  canceltradebatch_CONST_CMD = 103
};
bool canceltradebatch_CONST_IsValid(int value);
constexpr canceltradebatch_CONST canceltradebatch_CONST_CONST_MIN = canceltradebatch_CONST_CMD;
constexpr canceltradebatch_CONST canceltradebatch_CONST_CONST_MAX = canceltradebatch_CONST_CMD;
constexpr int canceltradebatch_CONST_CONST_ARRAYSIZE = canceltradebatch_CONST_CONST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* canceltradebatch_CONST_descriptor();
template<typename T>
inline const std::string& canceltradebatch_CONST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, canceltradebatch_CONST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function canceltradebatch_CONST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    canceltradebatch_CONST_descriptor(), enum_t_value);
}
inline bool canceltradebatch_CONST_Parse(
    const std::string& name, canceltradebatch_CONST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<canceltradebatch_CONST>(
    canceltradebatch_CONST_descriptor(), name, value);
}
// ===================================================================

class canceltradebatch :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ukex.canceltradebatch) */ {
 public:
  canceltradebatch();
  virtual ~canceltradebatch();

  canceltradebatch(const canceltradebatch& from);
  canceltradebatch(canceltradebatch&& from) noexcept
    : canceltradebatch() {
    *this = ::std::move(from);
  }

  inline canceltradebatch& operator=(const canceltradebatch& from) {
    CopyFrom(from);
    return *this;
  }
  inline canceltradebatch& operator=(canceltradebatch&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const canceltradebatch& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const canceltradebatch* internal_default_instance() {
    return reinterpret_cast<const canceltradebatch*>(
               &_canceltradebatch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(canceltradebatch& a, canceltradebatch& b) {
    a.Swap(&b);
  }
  inline void Swap(canceltradebatch* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline canceltradebatch* New() const final {
    return CreateMaybeMessage<canceltradebatch>(nullptr);
  }

  canceltradebatch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<canceltradebatch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const canceltradebatch& from);
  void MergeFrom(const canceltradebatch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(canceltradebatch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ukex.canceltradebatch";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ukex_2ecanceltradebatch_2eproto);
    return ::descriptor_table_ukex_2ecanceltradebatch_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef canceltradebatch_CONST CONST;
  static constexpr CONST CMD =
    canceltradebatch_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return canceltradebatch_CONST_IsValid(value);
  }
  static constexpr CONST CONST_MIN =
    canceltradebatch_CONST_CONST_MIN;
  static constexpr CONST CONST_MAX =
    canceltradebatch_CONST_CONST_MAX;
  static constexpr int CONST_ARRAYSIZE =
    canceltradebatch_CONST_CONST_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CONST_descriptor() {
    return canceltradebatch_CONST_descriptor();
  }
  template<typename T>
  static inline const std::string& CONST_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CONST>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CONST_Name.");
    return canceltradebatch_CONST_Name(enum_t_value);
  }
  static inline bool CONST_Parse(const std::string& name,
      CONST* value) {
    return canceltradebatch_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
  };
  // repeated uint64 ids = 1;
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_ids() const;
  void _internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 ids(int index) const;
  void set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_ids();

  // @@protoc_insertion_point(class_scope:ukex.canceltradebatch)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > ids_;
  friend struct ::TableStruct_ukex_2ecanceltradebatch_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// canceltradebatch

// repeated uint64 ids = 1;
inline int canceltradebatch::_internal_ids_size() const {
  return ids_.size();
}
inline int canceltradebatch::ids_size() const {
  return _internal_ids_size();
}
inline void canceltradebatch::clear_ids() {
  ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 canceltradebatch::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 canceltradebatch::ids(int index) const {
  // @@protoc_insertion_point(field_get:ukex.canceltradebatch.ids)
  return _internal_ids(index);
}
inline void canceltradebatch::set_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:ukex.canceltradebatch.ids)
}
inline void canceltradebatch::_internal_add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  ids_.Add(value);
}
inline void canceltradebatch::add_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_ids(value);
  // @@protoc_insertion_point(field_add:ukex.canceltradebatch.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
canceltradebatch::_internal_ids() const {
  return ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
canceltradebatch::ids() const {
  // @@protoc_insertion_point(field_list:ukex.canceltradebatch.ids)
  return _internal_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
canceltradebatch::_internal_mutable_ids() {
  return &ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
canceltradebatch::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:ukex.canceltradebatch.ids)
  return _internal_mutable_ids();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ukex::canceltradebatch_CONST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::canceltradebatch_CONST>() {
  return ::ukex::canceltradebatch_CONST_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ukex_2ecanceltradebatch_2eproto
