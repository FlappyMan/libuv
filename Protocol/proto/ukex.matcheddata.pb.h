// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.matcheddata.proto

#ifndef PROTOBUF_ukex_2ematcheddata_2eproto__INCLUDED
#define PROTOBUF_ukex_2ematcheddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ukex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ukex_2ematcheddata_2eproto();
void protobuf_AssignDesc_ukex_2ematcheddata_2eproto();
void protobuf_ShutdownFile_ukex_2ematcheddata_2eproto();

class matcheddata;
class matcheddata_BuyUser;
class matcheddata_SellUser;

enum matcheddata_CONST {
  matcheddata_CONST_CMD = 108
};
bool matcheddata_CONST_IsValid(int value);
const matcheddata_CONST matcheddata_CONST_CONST_MIN = matcheddata_CONST_CMD;
const matcheddata_CONST matcheddata_CONST_CONST_MAX = matcheddata_CONST_CMD;
const int matcheddata_CONST_CONST_ARRAYSIZE = matcheddata_CONST_CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* matcheddata_CONST_descriptor();
inline const ::std::string& matcheddata_CONST_Name(matcheddata_CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    matcheddata_CONST_descriptor(), value);
}
inline bool matcheddata_CONST_Parse(
    const ::std::string& name, matcheddata_CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<matcheddata_CONST>(
    matcheddata_CONST_descriptor(), name, value);
}
// ===================================================================

class matcheddata_BuyUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.matcheddata.BuyUser) */ {
 public:
  matcheddata_BuyUser();
  virtual ~matcheddata_BuyUser();

  matcheddata_BuyUser(const matcheddata_BuyUser& from);

  inline matcheddata_BuyUser& operator=(const matcheddata_BuyUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const matcheddata_BuyUser& default_instance();

  void Swap(matcheddata_BuyUser* other);

  // implements Message ----------------------------------------------

  inline matcheddata_BuyUser* New() const { return New(NULL); }

  matcheddata_BuyUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const matcheddata_BuyUser& from);
  void MergeFrom(const matcheddata_BuyUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(matcheddata_BuyUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  const ::std::string& num() const;
  void set_num(const ::std::string& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  ::std::string* mutable_num();
  ::std::string* release_num();
  void set_allocated_num(::std::string* num);

  // required string deal = 3;
  bool has_deal() const;
  void clear_deal();
  static const int kDealFieldNumber = 3;
  const ::std::string& deal() const;
  void set_deal(const ::std::string& value);
  void set_deal(const char* value);
  void set_deal(const char* value, size_t size);
  ::std::string* mutable_deal();
  ::std::string* release_deal();
  void set_allocated_deal(::std::string* deal);

  // required uint64 cny = 4;
  bool has_cny() const;
  void clear_cny();
  static const int kCnyFieldNumber = 4;
  ::google::protobuf::uint64 cny() const;
  void set_cny(::google::protobuf::uint64 value);

  // required uint64 cnyd = 5;
  bool has_cnyd() const;
  void clear_cnyd();
  static const int kCnydFieldNumber = 5;
  ::google::protobuf::uint64 cnyd() const;
  void set_cnyd(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ukex.matcheddata.BuyUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_deal();
  inline void clear_has_deal();
  inline void set_has_cny();
  inline void clear_has_cny();
  inline void set_has_cnyd();
  inline void clear_has_cnyd();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr num_;
  ::google::protobuf::internal::ArenaStringPtr deal_;
  ::google::protobuf::uint64 cny_;
  ::google::protobuf::uint64 cnyd_;
  friend void  protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  friend void protobuf_AssignDesc_ukex_2ematcheddata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2ematcheddata_2eproto();

  void InitAsDefaultInstance();
  static matcheddata_BuyUser* default_instance_;
};
// -------------------------------------------------------------------

class matcheddata_SellUser : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.matcheddata.SellUser) */ {
 public:
  matcheddata_SellUser();
  virtual ~matcheddata_SellUser();

  matcheddata_SellUser(const matcheddata_SellUser& from);

  inline matcheddata_SellUser& operator=(const matcheddata_SellUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const matcheddata_SellUser& default_instance();

  void Swap(matcheddata_SellUser* other);

  // implements Message ----------------------------------------------

  inline matcheddata_SellUser* New() const { return New(NULL); }

  matcheddata_SellUser* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const matcheddata_SellUser& from);
  void MergeFrom(const matcheddata_SellUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(matcheddata_SellUser* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string userid = 1;
  bool has_userid() const;
  void clear_userid();
  static const int kUseridFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // required string num = 2;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 2;
  const ::std::string& num() const;
  void set_num(const ::std::string& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  ::std::string* mutable_num();
  ::std::string* release_num();
  void set_allocated_num(::std::string* num);

  // required string deal = 3;
  bool has_deal() const;
  void clear_deal();
  static const int kDealFieldNumber = 3;
  const ::std::string& deal() const;
  void set_deal(const ::std::string& value);
  void set_deal(const char* value);
  void set_deal(const char* value, size_t size);
  ::std::string* mutable_deal();
  ::std::string* release_deal();
  void set_allocated_deal(::std::string* deal);

  // required uint64 xnb = 4;
  bool has_xnb() const;
  void clear_xnb();
  static const int kXnbFieldNumber = 4;
  ::google::protobuf::uint64 xnb() const;
  void set_xnb(::google::protobuf::uint64 value);

  // required uint64 xnbd = 5;
  bool has_xnbd() const;
  void clear_xnbd();
  static const int kXnbdFieldNumber = 5;
  ::google::protobuf::uint64 xnbd() const;
  void set_xnbd(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:ukex.matcheddata.SellUser)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_deal();
  inline void clear_has_deal();
  inline void set_has_xnb();
  inline void clear_has_xnb();
  inline void set_has_xnbd();
  inline void clear_has_xnbd();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr num_;
  ::google::protobuf::internal::ArenaStringPtr deal_;
  ::google::protobuf::uint64 xnb_;
  ::google::protobuf::uint64 xnbd_;
  friend void  protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  friend void protobuf_AssignDesc_ukex_2ematcheddata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2ematcheddata_2eproto();

  void InitAsDefaultInstance();
  static matcheddata_SellUser* default_instance_;
};
// -------------------------------------------------------------------

class matcheddata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.matcheddata) */ {
 public:
  matcheddata();
  virtual ~matcheddata();

  matcheddata(const matcheddata& from);

  inline matcheddata& operator=(const matcheddata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const matcheddata& default_instance();

  void Swap(matcheddata* other);

  // implements Message ----------------------------------------------

  inline matcheddata* New() const { return New(NULL); }

  matcheddata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const matcheddata& from);
  void MergeFrom(const matcheddata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(matcheddata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef matcheddata_BuyUser BuyUser;
  typedef matcheddata_SellUser SellUser;

  typedef matcheddata_CONST CONST;
  static const CONST CMD =
    matcheddata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return matcheddata_CONST_IsValid(value);
  }
  static const CONST CONST_MIN =
    matcheddata_CONST_CONST_MIN;
  static const CONST CONST_MAX =
    matcheddata_CONST_CONST_MAX;
  static const int CONST_ARRAYSIZE =
    matcheddata_CONST_CONST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CONST_descriptor() {
    return matcheddata_CONST_descriptor();
  }
  static inline const ::std::string& CONST_Name(CONST value) {
    return matcheddata_CONST_Name(value);
  }
  static inline bool CONST_Parse(const ::std::string& name,
      CONST* value) {
    return matcheddata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string addtime = 1;
  bool has_addtime() const;
  void clear_addtime();
  static const int kAddtimeFieldNumber = 1;
  const ::std::string& addtime() const;
  void set_addtime(const ::std::string& value);
  void set_addtime(const char* value);
  void set_addtime(const char* value, size_t size);
  ::std::string* mutable_addtime();
  ::std::string* release_addtime();
  void set_allocated_addtime(::std::string* addtime);

  // required uint64 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // required string price = 3;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 3;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // required .ukex.matcheddata.BuyUser buyuser = 4;
  bool has_buyuser() const;
  void clear_buyuser();
  static const int kBuyuserFieldNumber = 4;
  const ::ukex::matcheddata_BuyUser& buyuser() const;
  ::ukex::matcheddata_BuyUser* mutable_buyuser();
  ::ukex::matcheddata_BuyUser* release_buyuser();
  void set_allocated_buyuser(::ukex::matcheddata_BuyUser* buyuser);

  // required .ukex.matcheddata.SellUser selluser = 5;
  bool has_selluser() const;
  void clear_selluser();
  static const int kSelluserFieldNumber = 5;
  const ::ukex::matcheddata_SellUser& selluser() const;
  ::ukex::matcheddata_SellUser* mutable_selluser();
  ::ukex::matcheddata_SellUser* release_selluser();
  void set_allocated_selluser(::ukex::matcheddata_SellUser* selluser);

  // optional string token = 6;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 6;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ukex.matcheddata)
 private:
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_buyuser();
  inline void clear_has_buyuser();
  inline void set_has_selluser();
  inline void clear_has_selluser();
  inline void set_has_token();
  inline void clear_has_token();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr addtime_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::ukex::matcheddata_BuyUser* buyuser_;
  ::ukex::matcheddata_SellUser* selluser_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  friend void protobuf_AssignDesc_ukex_2ematcheddata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2ematcheddata_2eproto();

  void InitAsDefaultInstance();
  static matcheddata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// matcheddata_BuyUser

// required string userid = 1;
inline bool matcheddata_BuyUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void matcheddata_BuyUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void matcheddata_BuyUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void matcheddata_BuyUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& matcheddata_BuyUser::userid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.userid)
}
inline void matcheddata_BuyUser::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.userid)
}
inline void matcheddata_BuyUser::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.userid)
}
inline ::std::string* matcheddata_BuyUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata_BuyUser::release_userid() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.userid)
}

// required string num = 2;
inline bool matcheddata_BuyUser::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void matcheddata_BuyUser::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void matcheddata_BuyUser::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void matcheddata_BuyUser::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
inline const ::std::string& matcheddata_BuyUser::num() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.num)
  return num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.num)
}
inline void matcheddata_BuyUser::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.num)
}
inline void matcheddata_BuyUser::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.num)
}
inline ::std::string* matcheddata_BuyUser::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata_BuyUser::release_num() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.num)
}

// required string deal = 3;
inline bool matcheddata_BuyUser::has_deal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void matcheddata_BuyUser::set_has_deal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void matcheddata_BuyUser::clear_has_deal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void matcheddata_BuyUser::clear_deal() {
  deal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deal();
}
inline const ::std::string& matcheddata_BuyUser::deal() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.deal)
  return deal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_deal(const ::std::string& value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.deal)
}
inline void matcheddata_BuyUser::set_deal(const char* value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.deal)
}
inline void matcheddata_BuyUser::set_deal(const char* value, size_t size) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.deal)
}
inline ::std::string* matcheddata_BuyUser::mutable_deal() {
  set_has_deal();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.deal)
  return deal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata_BuyUser::release_deal() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.deal)
  clear_has_deal();
  return deal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_BuyUser::set_allocated_deal(::std::string* deal) {
  if (deal != NULL) {
    set_has_deal();
  } else {
    clear_has_deal();
  }
  deal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deal);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.deal)
}

// required uint64 cny = 4;
inline bool matcheddata_BuyUser::has_cny() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void matcheddata_BuyUser::set_has_cny() {
  _has_bits_[0] |= 0x00000008u;
}
inline void matcheddata_BuyUser::clear_has_cny() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void matcheddata_BuyUser::clear_cny() {
  cny_ = GOOGLE_ULONGLONG(0);
  clear_has_cny();
}
inline ::google::protobuf::uint64 matcheddata_BuyUser::cny() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.cny)
  return cny_;
}
inline void matcheddata_BuyUser::set_cny(::google::protobuf::uint64 value) {
  set_has_cny();
  cny_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.cny)
}

// required uint64 cnyd = 5;
inline bool matcheddata_BuyUser::has_cnyd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void matcheddata_BuyUser::set_has_cnyd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void matcheddata_BuyUser::clear_has_cnyd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void matcheddata_BuyUser::clear_cnyd() {
  cnyd_ = GOOGLE_ULONGLONG(0);
  clear_has_cnyd();
}
inline ::google::protobuf::uint64 matcheddata_BuyUser::cnyd() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.cnyd)
  return cnyd_;
}
inline void matcheddata_BuyUser::set_cnyd(::google::protobuf::uint64 value) {
  set_has_cnyd();
  cnyd_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.cnyd)
}

// -------------------------------------------------------------------

// matcheddata_SellUser

// required string userid = 1;
inline bool matcheddata_SellUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void matcheddata_SellUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void matcheddata_SellUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void matcheddata_SellUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
inline const ::std::string& matcheddata_SellUser::userid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.userid)
}
inline void matcheddata_SellUser::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.userid)
}
inline void matcheddata_SellUser::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.userid)
}
inline ::std::string* matcheddata_SellUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata_SellUser::release_userid() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.userid)
}

// required string num = 2;
inline bool matcheddata_SellUser::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void matcheddata_SellUser::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void matcheddata_SellUser::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void matcheddata_SellUser::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
inline const ::std::string& matcheddata_SellUser::num() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.num)
  return num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.num)
}
inline void matcheddata_SellUser::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.num)
}
inline void matcheddata_SellUser::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.num)
}
inline ::std::string* matcheddata_SellUser::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata_SellUser::release_num() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.num)
}

// required string deal = 3;
inline bool matcheddata_SellUser::has_deal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void matcheddata_SellUser::set_has_deal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void matcheddata_SellUser::clear_has_deal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void matcheddata_SellUser::clear_deal() {
  deal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deal();
}
inline const ::std::string& matcheddata_SellUser::deal() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.deal)
  return deal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_deal(const ::std::string& value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.deal)
}
inline void matcheddata_SellUser::set_deal(const char* value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.deal)
}
inline void matcheddata_SellUser::set_deal(const char* value, size_t size) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.deal)
}
inline ::std::string* matcheddata_SellUser::mutable_deal() {
  set_has_deal();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.deal)
  return deal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata_SellUser::release_deal() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.deal)
  clear_has_deal();
  return deal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata_SellUser::set_allocated_deal(::std::string* deal) {
  if (deal != NULL) {
    set_has_deal();
  } else {
    clear_has_deal();
  }
  deal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deal);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.deal)
}

// required uint64 xnb = 4;
inline bool matcheddata_SellUser::has_xnb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void matcheddata_SellUser::set_has_xnb() {
  _has_bits_[0] |= 0x00000008u;
}
inline void matcheddata_SellUser::clear_has_xnb() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void matcheddata_SellUser::clear_xnb() {
  xnb_ = GOOGLE_ULONGLONG(0);
  clear_has_xnb();
}
inline ::google::protobuf::uint64 matcheddata_SellUser::xnb() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.xnb)
  return xnb_;
}
inline void matcheddata_SellUser::set_xnb(::google::protobuf::uint64 value) {
  set_has_xnb();
  xnb_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.xnb)
}

// required uint64 xnbd = 5;
inline bool matcheddata_SellUser::has_xnbd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void matcheddata_SellUser::set_has_xnbd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void matcheddata_SellUser::clear_has_xnbd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void matcheddata_SellUser::clear_xnbd() {
  xnbd_ = GOOGLE_ULONGLONG(0);
  clear_has_xnbd();
}
inline ::google::protobuf::uint64 matcheddata_SellUser::xnbd() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.xnbd)
  return xnbd_;
}
inline void matcheddata_SellUser::set_xnbd(::google::protobuf::uint64 value) {
  set_has_xnbd();
  xnbd_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.xnbd)
}

// -------------------------------------------------------------------

// matcheddata

// required string addtime = 1;
inline bool matcheddata::has_addtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void matcheddata::set_has_addtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void matcheddata::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void matcheddata::clear_addtime() {
  addtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addtime();
}
inline const ::std::string& matcheddata::addtime() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.addtime)
  return addtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_addtime(const ::std::string& value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.addtime)
}
inline void matcheddata::set_addtime(const char* value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.addtime)
}
inline void matcheddata::set_addtime(const char* value, size_t size) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.addtime)
}
inline ::std::string* matcheddata::mutable_addtime() {
  set_has_addtime();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.addtime)
  return addtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata::release_addtime() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.addtime)
  clear_has_addtime();
  return addtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_allocated_addtime(::std::string* addtime) {
  if (addtime != NULL) {
    set_has_addtime();
  } else {
    clear_has_addtime();
  }
  addtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtime);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.addtime)
}

// required uint64 id = 2;
inline bool matcheddata::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void matcheddata::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void matcheddata::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void matcheddata::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 matcheddata::id() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.id)
  return id_;
}
inline void matcheddata::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.id)
}

// required string price = 3;
inline bool matcheddata::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void matcheddata::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void matcheddata::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void matcheddata::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
inline const ::std::string& matcheddata::price() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.price)
  return price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.price)
}
inline void matcheddata::set_price(const char* value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.price)
}
inline void matcheddata::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.price)
}
inline ::std::string* matcheddata::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata::release_price() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.price)
}

// required .ukex.matcheddata.BuyUser buyuser = 4;
inline bool matcheddata::has_buyuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void matcheddata::set_has_buyuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void matcheddata::clear_has_buyuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void matcheddata::clear_buyuser() {
  if (buyuser_ != NULL) buyuser_->::ukex::matcheddata_BuyUser::Clear();
  clear_has_buyuser();
}
inline const ::ukex::matcheddata_BuyUser& matcheddata::buyuser() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.buyuser)
  return buyuser_ != NULL ? *buyuser_ : *default_instance_->buyuser_;
}
inline ::ukex::matcheddata_BuyUser* matcheddata::mutable_buyuser() {
  set_has_buyuser();
  if (buyuser_ == NULL) {
    buyuser_ = new ::ukex::matcheddata_BuyUser;
  }
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.buyuser)
  return buyuser_;
}
inline ::ukex::matcheddata_BuyUser* matcheddata::release_buyuser() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.buyuser)
  clear_has_buyuser();
  ::ukex::matcheddata_BuyUser* temp = buyuser_;
  buyuser_ = NULL;
  return temp;
}
inline void matcheddata::set_allocated_buyuser(::ukex::matcheddata_BuyUser* buyuser) {
  delete buyuser_;
  buyuser_ = buyuser;
  if (buyuser) {
    set_has_buyuser();
  } else {
    clear_has_buyuser();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.buyuser)
}

// required .ukex.matcheddata.SellUser selluser = 5;
inline bool matcheddata::has_selluser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void matcheddata::set_has_selluser() {
  _has_bits_[0] |= 0x00000010u;
}
inline void matcheddata::clear_has_selluser() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void matcheddata::clear_selluser() {
  if (selluser_ != NULL) selluser_->::ukex::matcheddata_SellUser::Clear();
  clear_has_selluser();
}
inline const ::ukex::matcheddata_SellUser& matcheddata::selluser() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.selluser)
  return selluser_ != NULL ? *selluser_ : *default_instance_->selluser_;
}
inline ::ukex::matcheddata_SellUser* matcheddata::mutable_selluser() {
  set_has_selluser();
  if (selluser_ == NULL) {
    selluser_ = new ::ukex::matcheddata_SellUser;
  }
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.selluser)
  return selluser_;
}
inline ::ukex::matcheddata_SellUser* matcheddata::release_selluser() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.selluser)
  clear_has_selluser();
  ::ukex::matcheddata_SellUser* temp = selluser_;
  selluser_ = NULL;
  return temp;
}
inline void matcheddata::set_allocated_selluser(::ukex::matcheddata_SellUser* selluser) {
  delete selluser_;
  selluser_ = selluser;
  if (selluser) {
    set_has_selluser();
  } else {
    clear_has_selluser();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.selluser)
}

// optional string token = 6;
inline bool matcheddata::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void matcheddata::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
inline void matcheddata::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void matcheddata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& matcheddata::token() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.token)
}
inline void matcheddata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.token)
}
inline void matcheddata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.token)
}
inline ::std::string* matcheddata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* matcheddata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void matcheddata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukex::matcheddata_CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::matcheddata_CONST>() {
  return ::ukex::matcheddata_CONST_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ukex_2ematcheddata_2eproto__INCLUDED
