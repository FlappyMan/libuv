// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.filerequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.filerequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* filerequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  filerequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* filerequest_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2efilerequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2efilerequest_2eproto() {
  protobuf_AddDesc_ukex_2efilerequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.filerequest.proto");
  GOOGLE_CHECK(file != NULL);
  filerequest_descriptor_ = file->message_type(0);
  static const int filerequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, modifytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, token_),
  };
  filerequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      filerequest_descriptor_,
      filerequest::default_instance_,
      filerequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(filerequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(filerequest, _internal_metadata_),
      -1);
  filerequest_CONST_descriptor_ = filerequest_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2efilerequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      filerequest_descriptor_, &filerequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2efilerequest_2eproto() {
  delete filerequest::default_instance_;
  delete filerequest_reflection_;
}

void protobuf_AddDesc_ukex_2efilerequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2efilerequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ukex.filerequest.proto\022\004ukex\"\214\001\n\013filer"
    "equest\022\014\n\004name\030\001 \002(\t\022\014\n\004path\030\002 \002(\t\022\014\n\004si"
    "ze\030\003 \002(\004\022\022\n\nmodifytime\030\004 \002(\004\022\016\n\006offset\030\005"
    " \002(\004\022\016\n\006length\030\006 \002(\r\022\r\n\005token\030\007 \001(\t\"\020\n\005C"
    "ONST\022\007\n\003CMD\020p", 173);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.filerequest.proto", &protobuf_RegisterTypes);
  filerequest::default_instance_ = new filerequest();
  filerequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2efilerequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2efilerequest_2eproto {
  StaticDescriptorInitializer_ukex_2efilerequest_2eproto() {
    protobuf_AddDesc_ukex_2efilerequest_2eproto();
  }
} static_descriptor_initializer_ukex_2efilerequest_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* filerequest_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filerequest_CONST_descriptor_;
}
bool filerequest_CONST_IsValid(int value) {
  switch(value) {
    case 112:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const filerequest_CONST filerequest::CMD;
const filerequest_CONST filerequest::CONST_MIN;
const filerequest_CONST filerequest::CONST_MAX;
const int filerequest::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int filerequest::kNameFieldNumber;
const int filerequest::kPathFieldNumber;
const int filerequest::kSizeFieldNumber;
const int filerequest::kModifytimeFieldNumber;
const int filerequest::kOffsetFieldNumber;
const int filerequest::kLengthFieldNumber;
const int filerequest::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

filerequest::filerequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.filerequest)
}

void filerequest::InitAsDefaultInstance() {
}

filerequest::filerequest(const filerequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.filerequest)
}

void filerequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  size_ = GOOGLE_ULONGLONG(0);
  modifytime_ = GOOGLE_ULONGLONG(0);
  offset_ = GOOGLE_ULONGLONG(0);
  length_ = 0u;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

filerequest::~filerequest() {
  // @@protoc_insertion_point(destructor:ukex.filerequest)
  SharedDtor();
}

void filerequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void filerequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* filerequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return filerequest_descriptor_;
}

const filerequest& filerequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2efilerequest_2eproto();
  return *default_instance_;
}

filerequest* filerequest::default_instance_ = NULL;

filerequest* filerequest::New(::google::protobuf::Arena* arena) const {
  filerequest* n = new filerequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void filerequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.filerequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(filerequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<filerequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(size_, offset_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_path()) {
      path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    length_ = 0u;
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool filerequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.filerequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.filerequest.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required string path = 2;
      case 2: {
        if (tag == 18) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.filerequest.path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (tag == 24) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modifytime;
        break;
      }

      // required uint64 modifytime = 4;
      case 4: {
        if (tag == 32) {
         parse_modifytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &modifytime_)));
          set_has_modifytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_offset;
        break;
      }

      // required uint64 offset = 5;
      case 5: {
        if (tag == 40) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_length;
        break;
      }

      // required uint32 length = 6;
      case 6: {
        if (tag == 48) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_token;
        break;
      }

      // optional string token = 7;
      case 7: {
        if (tag == 58) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.filerequest.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.filerequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.filerequest)
  return false;
#undef DO_
}

void filerequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.filerequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.filerequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.filerequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // required uint64 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 modifytime = 4;
  if (has_modifytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->modifytime(), output);
  }

  // required uint64 offset = 5;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->offset(), output);
  }

  // required uint32 length = 6;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->length(), output);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.filerequest.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.filerequest)
}

::google::protobuf::uint8* filerequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.filerequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.filerequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.filerequest.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // required uint64 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 modifytime = 4;
  if (has_modifytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->modifytime(), target);
  }

  // required uint64 offset = 5;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->offset(), target);
  }

  // required uint32 length = 6;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->length(), target);
  }

  // optional string token = 7;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.filerequest.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.filerequest)
  return target;
}

int filerequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.filerequest)
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_path()) {
    // required string path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_modifytime()) {
    // required uint64 modifytime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modifytime());
  }

  if (has_offset()) {
    // required uint64 offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  if (has_length()) {
    // required uint32 length = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());
  }

  return total_size;
}
int filerequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.filerequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string path = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());

    // required uint64 size = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 modifytime = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->modifytime());

    // required uint64 offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->offset());

    // required uint32 length = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string token = 7;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void filerequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.filerequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const filerequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const filerequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.filerequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.filerequest)
    MergeFrom(*source);
  }
}

void filerequest::MergeFrom(const filerequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.filerequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_path()) {
      set_has_path();
      path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_modifytime()) {
      set_modifytime(from.modifytime());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void filerequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.filerequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void filerequest::CopyFrom(const filerequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.filerequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool filerequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void filerequest::Swap(filerequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void filerequest::InternalSwap(filerequest* other) {
  name_.Swap(&other->name_);
  path_.Swap(&other->path_);
  std::swap(size_, other->size_);
  std::swap(modifytime_, other->modifytime_);
  std::swap(offset_, other->offset_);
  std::swap(length_, other->length_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata filerequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = filerequest_descriptor_;
  metadata.reflection = filerequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// filerequest

// required string name = 1;
bool filerequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void filerequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void filerequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void filerequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& filerequest::name() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void filerequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.filerequest.name)
}
 void filerequest::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filerequest.name)
}
 void filerequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filerequest.name)
}
 ::std::string* filerequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:ukex.filerequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* filerequest::release_name() {
  // @@protoc_insertion_point(field_release:ukex.filerequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void filerequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ukex.filerequest.name)
}

// required string path = 2;
bool filerequest::has_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void filerequest::set_has_path() {
  _has_bits_[0] |= 0x00000002u;
}
void filerequest::clear_has_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void filerequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
 const ::std::string& filerequest::path() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.path)
  return path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void filerequest::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.filerequest.path)
}
 void filerequest::set_path(const char* value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filerequest.path)
}
 void filerequest::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filerequest.path)
}
 ::std::string* filerequest::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:ukex.filerequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* filerequest::release_path() {
  // @@protoc_insertion_point(field_release:ukex.filerequest.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void filerequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:ukex.filerequest.path)
}

// required uint64 size = 3;
bool filerequest::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void filerequest::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void filerequest::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void filerequest::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
 ::google::protobuf::uint64 filerequest::size() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.size)
  return size_;
}
 void filerequest::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:ukex.filerequest.size)
}

// required uint64 modifytime = 4;
bool filerequest::has_modifytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void filerequest::set_has_modifytime() {
  _has_bits_[0] |= 0x00000008u;
}
void filerequest::clear_has_modifytime() {
  _has_bits_[0] &= ~0x00000008u;
}
void filerequest::clear_modifytime() {
  modifytime_ = GOOGLE_ULONGLONG(0);
  clear_has_modifytime();
}
 ::google::protobuf::uint64 filerequest::modifytime() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.modifytime)
  return modifytime_;
}
 void filerequest::set_modifytime(::google::protobuf::uint64 value) {
  set_has_modifytime();
  modifytime_ = value;
  // @@protoc_insertion_point(field_set:ukex.filerequest.modifytime)
}

// required uint64 offset = 5;
bool filerequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void filerequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void filerequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void filerequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
 ::google::protobuf::uint64 filerequest::offset() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.offset)
  return offset_;
}
 void filerequest::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ukex.filerequest.offset)
}

// required uint32 length = 6;
bool filerequest::has_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void filerequest::set_has_length() {
  _has_bits_[0] |= 0x00000020u;
}
void filerequest::clear_has_length() {
  _has_bits_[0] &= ~0x00000020u;
}
void filerequest::clear_length() {
  length_ = 0u;
  clear_has_length();
}
 ::google::protobuf::uint32 filerequest::length() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.length)
  return length_;
}
 void filerequest::set_length(::google::protobuf::uint32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:ukex.filerequest.length)
}

// optional string token = 7;
bool filerequest::has_token() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void filerequest::set_has_token() {
  _has_bits_[0] |= 0x00000040u;
}
void filerequest::clear_has_token() {
  _has_bits_[0] &= ~0x00000040u;
}
void filerequest::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& filerequest::token() const {
  // @@protoc_insertion_point(field_get:ukex.filerequest.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void filerequest::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.filerequest.token)
}
 void filerequest::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.filerequest.token)
}
 void filerequest::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.filerequest.token)
}
 ::std::string* filerequest::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.filerequest.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* filerequest::release_token() {
  // @@protoc_insertion_point(field_release:ukex.filerequest.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void filerequest::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.filerequest.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
