// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.uptradebatch.proto

#ifndef PROTOBUF_ukex_2euptradebatch_2eproto__INCLUDED
#define PROTOBUF_ukex_2euptradebatch_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ukex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ukex_2euptradebatch_2eproto();
void protobuf_AssignDesc_ukex_2euptradebatch_2eproto();
void protobuf_ShutdownFile_ukex_2euptradebatch_2eproto();

class uptradebatch;
class uptradebatch_Trades;

enum uptradebatch_CONST {
  uptradebatch_CONST_CMD = 101
};
bool uptradebatch_CONST_IsValid(int value);
const uptradebatch_CONST uptradebatch_CONST_CONST_MIN = uptradebatch_CONST_CMD;
const uptradebatch_CONST uptradebatch_CONST_CONST_MAX = uptradebatch_CONST_CMD;
const int uptradebatch_CONST_CONST_ARRAYSIZE = uptradebatch_CONST_CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* uptradebatch_CONST_descriptor();
inline const ::std::string& uptradebatch_CONST_Name(uptradebatch_CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    uptradebatch_CONST_descriptor(), value);
}
inline bool uptradebatch_CONST_Parse(
    const ::std::string& name, uptradebatch_CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<uptradebatch_CONST>(
    uptradebatch_CONST_descriptor(), name, value);
}
// ===================================================================

class uptradebatch_Trades : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.uptradebatch.Trades) */ {
 public:
  uptradebatch_Trades();
  virtual ~uptradebatch_Trades();

  uptradebatch_Trades(const uptradebatch_Trades& from);

  inline uptradebatch_Trades& operator=(const uptradebatch_Trades& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const uptradebatch_Trades& default_instance();

  void Swap(uptradebatch_Trades* other);

  // implements Message ----------------------------------------------

  inline uptradebatch_Trades* New() const { return New(NULL); }

  uptradebatch_Trades* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uptradebatch_Trades& from);
  void MergeFrom(const uptradebatch_Trades& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(uptradebatch_Trades* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 marketid = 1;
  bool has_marketid() const;
  void clear_marketid();
  static const int kMarketidFieldNumber = 1;
  ::google::protobuf::uint64 marketid() const;
  void set_marketid(::google::protobuf::uint64 value);

  // required uint64 price = 2;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  ::google::protobuf::uint64 price() const;
  void set_price(::google::protobuf::uint64 value);

  // required uint64 num = 3;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 3;
  ::google::protobuf::uint64 num() const;
  void set_num(::google::protobuf::uint64 value);

  // required uint32 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ukex.uptradebatch.Trades)
 private:
  inline void set_has_marketid();
  inline void clear_has_marketid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_type();
  inline void clear_has_type();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 marketid_;
  ::google::protobuf::uint64 price_;
  ::google::protobuf::uint64 num_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_ukex_2euptradebatch_2eproto();
  friend void protobuf_AssignDesc_ukex_2euptradebatch_2eproto();
  friend void protobuf_ShutdownFile_ukex_2euptradebatch_2eproto();

  void InitAsDefaultInstance();
  static uptradebatch_Trades* default_instance_;
};
// -------------------------------------------------------------------

class uptradebatch : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.uptradebatch) */ {
 public:
  uptradebatch();
  virtual ~uptradebatch();

  uptradebatch(const uptradebatch& from);

  inline uptradebatch& operator=(const uptradebatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const uptradebatch& default_instance();

  void Swap(uptradebatch* other);

  // implements Message ----------------------------------------------

  inline uptradebatch* New() const { return New(NULL); }

  uptradebatch* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const uptradebatch& from);
  void MergeFrom(const uptradebatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(uptradebatch* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef uptradebatch_Trades Trades;

  typedef uptradebatch_CONST CONST;
  static const CONST CMD =
    uptradebatch_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return uptradebatch_CONST_IsValid(value);
  }
  static const CONST CONST_MIN =
    uptradebatch_CONST_CONST_MIN;
  static const CONST CONST_MAX =
    uptradebatch_CONST_CONST_MAX;
  static const int CONST_ARRAYSIZE =
    uptradebatch_CONST_CONST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CONST_descriptor() {
    return uptradebatch_CONST_descriptor();
  }
  static inline const ::std::string& CONST_Name(CONST value) {
    return uptradebatch_CONST_Name(value);
  }
  static inline bool CONST_Parse(const ::std::string& name,
      CONST* value) {
    return uptradebatch_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string token = 1;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 1;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // required string paypassword = 2;
  bool has_paypassword() const;
  void clear_paypassword();
  static const int kPaypasswordFieldNumber = 2;
  const ::std::string& paypassword() const;
  void set_paypassword(const ::std::string& value);
  void set_paypassword(const char* value);
  void set_paypassword(const char* value, size_t size);
  ::std::string* mutable_paypassword();
  ::std::string* release_paypassword();
  void set_allocated_paypassword(::std::string* paypassword);

  // repeated .ukex.uptradebatch.Trades trades = 3;
  int trades_size() const;
  void clear_trades();
  static const int kTradesFieldNumber = 3;
  const ::ukex::uptradebatch_Trades& trades(int index) const;
  ::ukex::uptradebatch_Trades* mutable_trades(int index);
  ::ukex::uptradebatch_Trades* add_trades();
  ::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades >*
      mutable_trades();
  const ::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades >&
      trades() const;

  // @@protoc_insertion_point(class_scope:ukex.uptradebatch)
 private:
  inline void set_has_token();
  inline void clear_has_token();
  inline void set_has_paypassword();
  inline void clear_has_paypassword();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::internal::ArenaStringPtr paypassword_;
  ::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades > trades_;
  friend void  protobuf_AddDesc_ukex_2euptradebatch_2eproto();
  friend void protobuf_AssignDesc_ukex_2euptradebatch_2eproto();
  friend void protobuf_ShutdownFile_ukex_2euptradebatch_2eproto();

  void InitAsDefaultInstance();
  static uptradebatch* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// uptradebatch_Trades

// required uint64 marketid = 1;
inline bool uptradebatch_Trades::has_marketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uptradebatch_Trades::set_has_marketid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uptradebatch_Trades::clear_has_marketid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uptradebatch_Trades::clear_marketid() {
  marketid_ = GOOGLE_ULONGLONG(0);
  clear_has_marketid();
}
inline ::google::protobuf::uint64 uptradebatch_Trades::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.marketid)
  return marketid_;
}
inline void uptradebatch_Trades::set_marketid(::google::protobuf::uint64 value) {
  set_has_marketid();
  marketid_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.marketid)
}

// required uint64 price = 2;
inline bool uptradebatch_Trades::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uptradebatch_Trades::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uptradebatch_Trades::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uptradebatch_Trades::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
  clear_has_price();
}
inline ::google::protobuf::uint64 uptradebatch_Trades::price() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.price)
  return price_;
}
inline void uptradebatch_Trades::set_price(::google::protobuf::uint64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.price)
}

// required uint64 num = 3;
inline bool uptradebatch_Trades::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void uptradebatch_Trades::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void uptradebatch_Trades::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void uptradebatch_Trades::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::uint64 uptradebatch_Trades::num() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.num)
  return num_;
}
inline void uptradebatch_Trades::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.num)
}

// required uint32 type = 4;
inline bool uptradebatch_Trades::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void uptradebatch_Trades::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void uptradebatch_Trades::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void uptradebatch_Trades::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 uptradebatch_Trades::type() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.type)
  return type_;
}
inline void uptradebatch_Trades::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.type)
}

// -------------------------------------------------------------------

// uptradebatch

// optional string token = 1;
inline bool uptradebatch::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void uptradebatch::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void uptradebatch::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void uptradebatch::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& uptradebatch::token() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.token)
}
inline void uptradebatch::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.token)
}
inline void uptradebatch::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.token)
}
inline ::std::string* uptradebatch::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* uptradebatch::release_token() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.token)
}

// required string paypassword = 2;
inline bool uptradebatch::has_paypassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void uptradebatch::set_has_paypassword() {
  _has_bits_[0] |= 0x00000002u;
}
inline void uptradebatch::clear_has_paypassword() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void uptradebatch::clear_paypassword() {
  paypassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paypassword();
}
inline const ::std::string& uptradebatch::paypassword() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.paypassword)
  return paypassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch::set_paypassword(const ::std::string& value) {
  set_has_paypassword();
  paypassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.paypassword)
}
inline void uptradebatch::set_paypassword(const char* value) {
  set_has_paypassword();
  paypassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.paypassword)
}
inline void uptradebatch::set_paypassword(const char* value, size_t size) {
  set_has_paypassword();
  paypassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.paypassword)
}
inline ::std::string* uptradebatch::mutable_paypassword() {
  set_has_paypassword();
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.paypassword)
  return paypassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* uptradebatch::release_paypassword() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.paypassword)
  clear_has_paypassword();
  return paypassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void uptradebatch::set_allocated_paypassword(::std::string* paypassword) {
  if (paypassword != NULL) {
    set_has_paypassword();
  } else {
    clear_has_paypassword();
  }
  paypassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paypassword);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.paypassword)
}

// repeated .ukex.uptradebatch.Trades trades = 3;
inline int uptradebatch::trades_size() const {
  return trades_.size();
}
inline void uptradebatch::clear_trades() {
  trades_.Clear();
}
inline const ::ukex::uptradebatch_Trades& uptradebatch::trades(int index) const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.trades)
  return trades_.Get(index);
}
inline ::ukex::uptradebatch_Trades* uptradebatch::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.trades)
  return trades_.Mutable(index);
}
inline ::ukex::uptradebatch_Trades* uptradebatch::add_trades() {
  // @@protoc_insertion_point(field_add:ukex.uptradebatch.trades)
  return trades_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades >*
uptradebatch::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:ukex.uptradebatch.trades)
  return &trades_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades >&
uptradebatch::trades() const {
  // @@protoc_insertion_point(field_list:ukex.uptradebatch.trades)
  return trades_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukex::uptradebatch_CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::uptradebatch_CONST>() {
  return ::ukex::uptradebatch_CONST_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ukex_2euptradebatch_2eproto__INCLUDED
