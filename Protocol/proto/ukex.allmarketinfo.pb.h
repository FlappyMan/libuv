// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.allmarketinfo.proto

#ifndef PROTOBUF_ukex_2eallmarketinfo_2eproto__INCLUDED
#define PROTOBUF_ukex_2eallmarketinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ukex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
void protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto();
void protobuf_ShutdownFile_ukex_2eallmarketinfo_2eproto();

class allmarketinfo;
class allmarketinfo_Data;
class allmarketinfo_Exchange;

enum allmarketinfo_CONST {
  allmarketinfo_CONST_CMD = 104
};
bool allmarketinfo_CONST_IsValid(int value);
const allmarketinfo_CONST allmarketinfo_CONST_CONST_MIN = allmarketinfo_CONST_CMD;
const allmarketinfo_CONST allmarketinfo_CONST_CONST_MAX = allmarketinfo_CONST_CMD;
const int allmarketinfo_CONST_CONST_ARRAYSIZE = allmarketinfo_CONST_CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* allmarketinfo_CONST_descriptor();
inline const ::std::string& allmarketinfo_CONST_Name(allmarketinfo_CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    allmarketinfo_CONST_descriptor(), value);
}
inline bool allmarketinfo_CONST_Parse(
    const ::std::string& name, allmarketinfo_CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<allmarketinfo_CONST>(
    allmarketinfo_CONST_descriptor(), name, value);
}
// ===================================================================

class allmarketinfo_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.allmarketinfo.Data) */ {
 public:
  allmarketinfo_Data();
  virtual ~allmarketinfo_Data();

  allmarketinfo_Data(const allmarketinfo_Data& from);

  inline allmarketinfo_Data& operator=(const allmarketinfo_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const allmarketinfo_Data& default_instance();

  void Swap(allmarketinfo_Data* other);

  // implements Message ----------------------------------------------

  inline allmarketinfo_Data* New() const { return New(NULL); }

  allmarketinfo_Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const allmarketinfo_Data& from);
  void MergeFrom(const allmarketinfo_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(allmarketinfo_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string m0 = 1;
  bool has_m0() const;
  void clear_m0();
  static const int kM0FieldNumber = 1;
  const ::std::string& m0() const;
  void set_m0(const ::std::string& value);
  void set_m0(const char* value);
  void set_m0(const char* value, size_t size);
  ::std::string* mutable_m0();
  ::std::string* release_m0();
  void set_allocated_m0(::std::string* m0);

  // required string m1 = 2;
  bool has_m1() const;
  void clear_m1();
  static const int kM1FieldNumber = 2;
  const ::std::string& m1() const;
  void set_m1(const ::std::string& value);
  void set_m1(const char* value);
  void set_m1(const char* value, size_t size);
  ::std::string* mutable_m1();
  ::std::string* release_m1();
  void set_allocated_m1(::std::string* m1);

  // required string m2 = 3;
  bool has_m2() const;
  void clear_m2();
  static const int kM2FieldNumber = 3;
  const ::std::string& m2() const;
  void set_m2(const ::std::string& value);
  void set_m2(const char* value);
  void set_m2(const char* value, size_t size);
  ::std::string* mutable_m2();
  ::std::string* release_m2();
  void set_allocated_m2(::std::string* m2);

  // required string m3 = 4;
  bool has_m3() const;
  void clear_m3();
  static const int kM3FieldNumber = 4;
  const ::std::string& m3() const;
  void set_m3(const ::std::string& value);
  void set_m3(const char* value);
  void set_m3(const char* value, size_t size);
  ::std::string* mutable_m3();
  ::std::string* release_m3();
  void set_allocated_m3(::std::string* m3);

  // required string m4 = 5;
  bool has_m4() const;
  void clear_m4();
  static const int kM4FieldNumber = 5;
  const ::std::string& m4() const;
  void set_m4(const ::std::string& value);
  void set_m4(const char* value);
  void set_m4(const char* value, size_t size);
  ::std::string* mutable_m4();
  ::std::string* release_m4();
  void set_allocated_m4(::std::string* m4);

  // required string m5 = 6;
  bool has_m5() const;
  void clear_m5();
  static const int kM5FieldNumber = 6;
  const ::std::string& m5() const;
  void set_m5(const ::std::string& value);
  void set_m5(const char* value);
  void set_m5(const char* value, size_t size);
  ::std::string* mutable_m5();
  ::std::string* release_m5();
  void set_allocated_m5(::std::string* m5);

  // required string m6 = 7;
  bool has_m6() const;
  void clear_m6();
  static const int kM6FieldNumber = 7;
  const ::std::string& m6() const;
  void set_m6(const ::std::string& value);
  void set_m6(const char* value);
  void set_m6(const char* value, size_t size);
  ::std::string* mutable_m6();
  ::std::string* release_m6();
  void set_allocated_m6(::std::string* m6);

  // required string m7 = 8;
  bool has_m7() const;
  void clear_m7();
  static const int kM7FieldNumber = 8;
  const ::std::string& m7() const;
  void set_m7(const ::std::string& value);
  void set_m7(const char* value);
  void set_m7(const char* value, size_t size);
  ::std::string* mutable_m7();
  ::std::string* release_m7();
  void set_allocated_m7(::std::string* m7);

  // required string m8 = 9;
  bool has_m8() const;
  void clear_m8();
  static const int kM8FieldNumber = 9;
  const ::std::string& m8() const;
  void set_m8(const ::std::string& value);
  void set_m8(const char* value);
  void set_m8(const char* value, size_t size);
  ::std::string* mutable_m8();
  ::std::string* release_m8();
  void set_allocated_m8(::std::string* m8);

  // required string m9 = 10;
  bool has_m9() const;
  void clear_m9();
  static const int kM9FieldNumber = 10;
  const ::std::string& m9() const;
  void set_m9(const ::std::string& value);
  void set_m9(const char* value);
  void set_m9(const char* value, size_t size);
  ::std::string* mutable_m9();
  ::std::string* release_m9();
  void set_allocated_m9(::std::string* m9);

  // required string m10 = 11;
  bool has_m10() const;
  void clear_m10();
  static const int kM10FieldNumber = 11;
  const ::std::string& m10() const;
  void set_m10(const ::std::string& value);
  void set_m10(const char* value);
  void set_m10(const char* value, size_t size);
  ::std::string* mutable_m10();
  ::std::string* release_m10();
  void set_allocated_m10(::std::string* m10);

  // required string m11 = 12;
  bool has_m11() const;
  void clear_m11();
  static const int kM11FieldNumber = 12;
  const ::std::string& m11() const;
  void set_m11(const ::std::string& value);
  void set_m11(const char* value);
  void set_m11(const char* value, size_t size);
  ::std::string* mutable_m11();
  ::std::string* release_m11();
  void set_allocated_m11(::std::string* m11);

  // required string m12 = 13;
  bool has_m12() const;
  void clear_m12();
  static const int kM12FieldNumber = 13;
  const ::std::string& m12() const;
  void set_m12(const ::std::string& value);
  void set_m12(const char* value);
  void set_m12(const char* value, size_t size);
  ::std::string* mutable_m12();
  ::std::string* release_m12();
  void set_allocated_m12(::std::string* m12);

  // required string m13 = 14;
  bool has_m13() const;
  void clear_m13();
  static const int kM13FieldNumber = 14;
  const ::std::string& m13() const;
  void set_m13(const ::std::string& value);
  void set_m13(const char* value);
  void set_m13(const char* value, size_t size);
  ::std::string* mutable_m13();
  ::std::string* release_m13();
  void set_allocated_m13(::std::string* m13);

  // @@protoc_insertion_point(class_scope:ukex.allmarketinfo.Data)
 private:
  inline void set_has_m0();
  inline void clear_has_m0();
  inline void set_has_m1();
  inline void clear_has_m1();
  inline void set_has_m2();
  inline void clear_has_m2();
  inline void set_has_m3();
  inline void clear_has_m3();
  inline void set_has_m4();
  inline void clear_has_m4();
  inline void set_has_m5();
  inline void clear_has_m5();
  inline void set_has_m6();
  inline void clear_has_m6();
  inline void set_has_m7();
  inline void clear_has_m7();
  inline void set_has_m8();
  inline void clear_has_m8();
  inline void set_has_m9();
  inline void clear_has_m9();
  inline void set_has_m10();
  inline void clear_has_m10();
  inline void set_has_m11();
  inline void clear_has_m11();
  inline void set_has_m12();
  inline void clear_has_m12();
  inline void set_has_m13();
  inline void clear_has_m13();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr m0_;
  ::google::protobuf::internal::ArenaStringPtr m1_;
  ::google::protobuf::internal::ArenaStringPtr m2_;
  ::google::protobuf::internal::ArenaStringPtr m3_;
  ::google::protobuf::internal::ArenaStringPtr m4_;
  ::google::protobuf::internal::ArenaStringPtr m5_;
  ::google::protobuf::internal::ArenaStringPtr m6_;
  ::google::protobuf::internal::ArenaStringPtr m7_;
  ::google::protobuf::internal::ArenaStringPtr m8_;
  ::google::protobuf::internal::ArenaStringPtr m9_;
  ::google::protobuf::internal::ArenaStringPtr m10_;
  ::google::protobuf::internal::ArenaStringPtr m11_;
  ::google::protobuf::internal::ArenaStringPtr m12_;
  ::google::protobuf::internal::ArenaStringPtr m13_;
  friend void  protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  friend void protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto();
  friend void protobuf_ShutdownFile_ukex_2eallmarketinfo_2eproto();

  void InitAsDefaultInstance();
  static allmarketinfo_Data* default_instance_;
};
// -------------------------------------------------------------------

class allmarketinfo_Exchange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.allmarketinfo.Exchange) */ {
 public:
  allmarketinfo_Exchange();
  virtual ~allmarketinfo_Exchange();

  allmarketinfo_Exchange(const allmarketinfo_Exchange& from);

  inline allmarketinfo_Exchange& operator=(const allmarketinfo_Exchange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const allmarketinfo_Exchange& default_instance();

  void Swap(allmarketinfo_Exchange* other);

  // implements Message ----------------------------------------------

  inline allmarketinfo_Exchange* New() const { return New(NULL); }

  allmarketinfo_Exchange* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const allmarketinfo_Exchange& from);
  void MergeFrom(const allmarketinfo_Exchange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(allmarketinfo_Exchange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string btc = 1;
  bool has_btc() const;
  void clear_btc();
  static const int kBtcFieldNumber = 1;
  const ::std::string& btc() const;
  void set_btc(const ::std::string& value);
  void set_btc(const char* value);
  void set_btc(const char* value, size_t size);
  ::std::string* mutable_btc();
  ::std::string* release_btc();
  void set_allocated_btc(::std::string* btc);

  // required string eth = 2;
  bool has_eth() const;
  void clear_eth();
  static const int kEthFieldNumber = 2;
  const ::std::string& eth() const;
  void set_eth(const ::std::string& value);
  void set_eth(const char* value);
  void set_eth(const char* value, size_t size);
  ::std::string* mutable_eth();
  ::std::string* release_eth();
  void set_allocated_eth(::std::string* eth);

  // @@protoc_insertion_point(class_scope:ukex.allmarketinfo.Exchange)
 private:
  inline void set_has_btc();
  inline void clear_has_btc();
  inline void set_has_eth();
  inline void clear_has_eth();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr btc_;
  ::google::protobuf::internal::ArenaStringPtr eth_;
  friend void  protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  friend void protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto();
  friend void protobuf_ShutdownFile_ukex_2eallmarketinfo_2eproto();

  void InitAsDefaultInstance();
  static allmarketinfo_Exchange* default_instance_;
};
// -------------------------------------------------------------------

class allmarketinfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.allmarketinfo) */ {
 public:
  allmarketinfo();
  virtual ~allmarketinfo();

  allmarketinfo(const allmarketinfo& from);

  inline allmarketinfo& operator=(const allmarketinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const allmarketinfo& default_instance();

  void Swap(allmarketinfo* other);

  // implements Message ----------------------------------------------

  inline allmarketinfo* New() const { return New(NULL); }

  allmarketinfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const allmarketinfo& from);
  void MergeFrom(const allmarketinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(allmarketinfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef allmarketinfo_Data Data;
  typedef allmarketinfo_Exchange Exchange;

  typedef allmarketinfo_CONST CONST;
  static const CONST CMD =
    allmarketinfo_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return allmarketinfo_CONST_IsValid(value);
  }
  static const CONST CONST_MIN =
    allmarketinfo_CONST_CONST_MIN;
  static const CONST CONST_MAX =
    allmarketinfo_CONST_CONST_MAX;
  static const int CONST_ARRAYSIZE =
    allmarketinfo_CONST_CONST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CONST_descriptor() {
    return allmarketinfo_CONST_descriptor();
  }
  static inline const ::std::string& CONST_Name(CONST value) {
    return allmarketinfo_CONST_Name(value);
  }
  static inline bool CONST_Parse(const ::std::string& name,
      CONST* value) {
    return allmarketinfo_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // repeated .ukex.allmarketinfo.Data data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::ukex::allmarketinfo_Data& data(int index) const;
  ::ukex::allmarketinfo_Data* mutable_data(int index);
  ::ukex::allmarketinfo_Data* add_data();
  ::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data >&
      data() const;

  // required uint64 marketid = 3;
  bool has_marketid() const;
  void clear_marketid();
  static const int kMarketidFieldNumber = 3;
  ::google::protobuf::uint64 marketid() const;
  void set_marketid(::google::protobuf::uint64 value);

  // required .ukex.allmarketinfo.Exchange exchange = 4;
  bool has_exchange() const;
  void clear_exchange();
  static const int kExchangeFieldNumber = 4;
  const ::ukex::allmarketinfo_Exchange& exchange() const;
  ::ukex::allmarketinfo_Exchange* mutable_exchange();
  ::ukex::allmarketinfo_Exchange* release_exchange();
  void set_allocated_exchange(::ukex::allmarketinfo_Exchange* exchange);

  // optional string token = 5;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 5;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ukex.allmarketinfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_marketid();
  inline void clear_has_marketid();
  inline void set_has_exchange();
  inline void clear_has_exchange();
  inline void set_has_token();
  inline void clear_has_token();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data > data_;
  ::google::protobuf::uint64 marketid_;
  ::ukex::allmarketinfo_Exchange* exchange_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  friend void protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto();
  friend void protobuf_ShutdownFile_ukex_2eallmarketinfo_2eproto();

  void InitAsDefaultInstance();
  static allmarketinfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// allmarketinfo_Data

// required string m0 = 1;
inline bool allmarketinfo_Data::has_m0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void allmarketinfo_Data::set_has_m0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void allmarketinfo_Data::clear_has_m0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void allmarketinfo_Data::clear_m0() {
  m0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m0();
}
inline const ::std::string& allmarketinfo_Data::m0() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m0)
  return m0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m0(const ::std::string& value) {
  set_has_m0();
  m0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m0)
}
inline void allmarketinfo_Data::set_m0(const char* value) {
  set_has_m0();
  m0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m0)
}
inline void allmarketinfo_Data::set_m0(const char* value, size_t size) {
  set_has_m0();
  m0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m0)
}
inline ::std::string* allmarketinfo_Data::mutable_m0() {
  set_has_m0();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m0)
  return m0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m0() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m0)
  clear_has_m0();
  return m0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m0(::std::string* m0) {
  if (m0 != NULL) {
    set_has_m0();
  } else {
    clear_has_m0();
  }
  m0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m0);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m0)
}

// required string m1 = 2;
inline bool allmarketinfo_Data::has_m1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void allmarketinfo_Data::set_has_m1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void allmarketinfo_Data::clear_has_m1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void allmarketinfo_Data::clear_m1() {
  m1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m1();
}
inline const ::std::string& allmarketinfo_Data::m1() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m1)
  return m1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m1(const ::std::string& value) {
  set_has_m1();
  m1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m1)
}
inline void allmarketinfo_Data::set_m1(const char* value) {
  set_has_m1();
  m1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m1)
}
inline void allmarketinfo_Data::set_m1(const char* value, size_t size) {
  set_has_m1();
  m1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m1)
}
inline ::std::string* allmarketinfo_Data::mutable_m1() {
  set_has_m1();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m1)
  return m1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m1() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m1)
  clear_has_m1();
  return m1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m1(::std::string* m1) {
  if (m1 != NULL) {
    set_has_m1();
  } else {
    clear_has_m1();
  }
  m1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m1);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m1)
}

// required string m2 = 3;
inline bool allmarketinfo_Data::has_m2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void allmarketinfo_Data::set_has_m2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void allmarketinfo_Data::clear_has_m2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void allmarketinfo_Data::clear_m2() {
  m2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m2();
}
inline const ::std::string& allmarketinfo_Data::m2() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m2)
  return m2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m2(const ::std::string& value) {
  set_has_m2();
  m2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m2)
}
inline void allmarketinfo_Data::set_m2(const char* value) {
  set_has_m2();
  m2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m2)
}
inline void allmarketinfo_Data::set_m2(const char* value, size_t size) {
  set_has_m2();
  m2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m2)
}
inline ::std::string* allmarketinfo_Data::mutable_m2() {
  set_has_m2();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m2)
  return m2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m2() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m2)
  clear_has_m2();
  return m2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m2(::std::string* m2) {
  if (m2 != NULL) {
    set_has_m2();
  } else {
    clear_has_m2();
  }
  m2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m2);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m2)
}

// required string m3 = 4;
inline bool allmarketinfo_Data::has_m3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void allmarketinfo_Data::set_has_m3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void allmarketinfo_Data::clear_has_m3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void allmarketinfo_Data::clear_m3() {
  m3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m3();
}
inline const ::std::string& allmarketinfo_Data::m3() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m3)
  return m3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m3(const ::std::string& value) {
  set_has_m3();
  m3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m3)
}
inline void allmarketinfo_Data::set_m3(const char* value) {
  set_has_m3();
  m3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m3)
}
inline void allmarketinfo_Data::set_m3(const char* value, size_t size) {
  set_has_m3();
  m3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m3)
}
inline ::std::string* allmarketinfo_Data::mutable_m3() {
  set_has_m3();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m3)
  return m3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m3() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m3)
  clear_has_m3();
  return m3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m3(::std::string* m3) {
  if (m3 != NULL) {
    set_has_m3();
  } else {
    clear_has_m3();
  }
  m3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m3);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m3)
}

// required string m4 = 5;
inline bool allmarketinfo_Data::has_m4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void allmarketinfo_Data::set_has_m4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void allmarketinfo_Data::clear_has_m4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void allmarketinfo_Data::clear_m4() {
  m4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m4();
}
inline const ::std::string& allmarketinfo_Data::m4() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m4)
  return m4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m4(const ::std::string& value) {
  set_has_m4();
  m4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m4)
}
inline void allmarketinfo_Data::set_m4(const char* value) {
  set_has_m4();
  m4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m4)
}
inline void allmarketinfo_Data::set_m4(const char* value, size_t size) {
  set_has_m4();
  m4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m4)
}
inline ::std::string* allmarketinfo_Data::mutable_m4() {
  set_has_m4();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m4)
  return m4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m4() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m4)
  clear_has_m4();
  return m4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m4(::std::string* m4) {
  if (m4 != NULL) {
    set_has_m4();
  } else {
    clear_has_m4();
  }
  m4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m4);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m4)
}

// required string m5 = 6;
inline bool allmarketinfo_Data::has_m5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void allmarketinfo_Data::set_has_m5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void allmarketinfo_Data::clear_has_m5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void allmarketinfo_Data::clear_m5() {
  m5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m5();
}
inline const ::std::string& allmarketinfo_Data::m5() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m5)
  return m5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m5(const ::std::string& value) {
  set_has_m5();
  m5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m5)
}
inline void allmarketinfo_Data::set_m5(const char* value) {
  set_has_m5();
  m5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m5)
}
inline void allmarketinfo_Data::set_m5(const char* value, size_t size) {
  set_has_m5();
  m5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m5)
}
inline ::std::string* allmarketinfo_Data::mutable_m5() {
  set_has_m5();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m5)
  return m5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m5() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m5)
  clear_has_m5();
  return m5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m5(::std::string* m5) {
  if (m5 != NULL) {
    set_has_m5();
  } else {
    clear_has_m5();
  }
  m5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m5);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m5)
}

// required string m6 = 7;
inline bool allmarketinfo_Data::has_m6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void allmarketinfo_Data::set_has_m6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void allmarketinfo_Data::clear_has_m6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void allmarketinfo_Data::clear_m6() {
  m6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m6();
}
inline const ::std::string& allmarketinfo_Data::m6() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m6)
  return m6_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m6(const ::std::string& value) {
  set_has_m6();
  m6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m6)
}
inline void allmarketinfo_Data::set_m6(const char* value) {
  set_has_m6();
  m6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m6)
}
inline void allmarketinfo_Data::set_m6(const char* value, size_t size) {
  set_has_m6();
  m6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m6)
}
inline ::std::string* allmarketinfo_Data::mutable_m6() {
  set_has_m6();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m6)
  return m6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m6() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m6)
  clear_has_m6();
  return m6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m6(::std::string* m6) {
  if (m6 != NULL) {
    set_has_m6();
  } else {
    clear_has_m6();
  }
  m6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m6);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m6)
}

// required string m7 = 8;
inline bool allmarketinfo_Data::has_m7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void allmarketinfo_Data::set_has_m7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void allmarketinfo_Data::clear_has_m7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void allmarketinfo_Data::clear_m7() {
  m7_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m7();
}
inline const ::std::string& allmarketinfo_Data::m7() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m7)
  return m7_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m7(const ::std::string& value) {
  set_has_m7();
  m7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m7)
}
inline void allmarketinfo_Data::set_m7(const char* value) {
  set_has_m7();
  m7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m7)
}
inline void allmarketinfo_Data::set_m7(const char* value, size_t size) {
  set_has_m7();
  m7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m7)
}
inline ::std::string* allmarketinfo_Data::mutable_m7() {
  set_has_m7();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m7)
  return m7_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m7() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m7)
  clear_has_m7();
  return m7_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m7(::std::string* m7) {
  if (m7 != NULL) {
    set_has_m7();
  } else {
    clear_has_m7();
  }
  m7_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m7);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m7)
}

// required string m8 = 9;
inline bool allmarketinfo_Data::has_m8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void allmarketinfo_Data::set_has_m8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void allmarketinfo_Data::clear_has_m8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void allmarketinfo_Data::clear_m8() {
  m8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m8();
}
inline const ::std::string& allmarketinfo_Data::m8() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m8)
  return m8_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m8(const ::std::string& value) {
  set_has_m8();
  m8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m8)
}
inline void allmarketinfo_Data::set_m8(const char* value) {
  set_has_m8();
  m8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m8)
}
inline void allmarketinfo_Data::set_m8(const char* value, size_t size) {
  set_has_m8();
  m8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m8)
}
inline ::std::string* allmarketinfo_Data::mutable_m8() {
  set_has_m8();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m8)
  return m8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m8() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m8)
  clear_has_m8();
  return m8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m8(::std::string* m8) {
  if (m8 != NULL) {
    set_has_m8();
  } else {
    clear_has_m8();
  }
  m8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m8);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m8)
}

// required string m9 = 10;
inline bool allmarketinfo_Data::has_m9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void allmarketinfo_Data::set_has_m9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void allmarketinfo_Data::clear_has_m9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void allmarketinfo_Data::clear_m9() {
  m9_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m9();
}
inline const ::std::string& allmarketinfo_Data::m9() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m9)
  return m9_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m9(const ::std::string& value) {
  set_has_m9();
  m9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m9)
}
inline void allmarketinfo_Data::set_m9(const char* value) {
  set_has_m9();
  m9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m9)
}
inline void allmarketinfo_Data::set_m9(const char* value, size_t size) {
  set_has_m9();
  m9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m9)
}
inline ::std::string* allmarketinfo_Data::mutable_m9() {
  set_has_m9();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m9)
  return m9_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m9() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m9)
  clear_has_m9();
  return m9_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m9(::std::string* m9) {
  if (m9 != NULL) {
    set_has_m9();
  } else {
    clear_has_m9();
  }
  m9_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m9);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m9)
}

// required string m10 = 11;
inline bool allmarketinfo_Data::has_m10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void allmarketinfo_Data::set_has_m10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void allmarketinfo_Data::clear_has_m10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void allmarketinfo_Data::clear_m10() {
  m10_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m10();
}
inline const ::std::string& allmarketinfo_Data::m10() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m10)
  return m10_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m10(const ::std::string& value) {
  set_has_m10();
  m10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m10)
}
inline void allmarketinfo_Data::set_m10(const char* value) {
  set_has_m10();
  m10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m10)
}
inline void allmarketinfo_Data::set_m10(const char* value, size_t size) {
  set_has_m10();
  m10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m10)
}
inline ::std::string* allmarketinfo_Data::mutable_m10() {
  set_has_m10();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m10)
  return m10_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m10() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m10)
  clear_has_m10();
  return m10_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m10(::std::string* m10) {
  if (m10 != NULL) {
    set_has_m10();
  } else {
    clear_has_m10();
  }
  m10_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m10);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m10)
}

// required string m11 = 12;
inline bool allmarketinfo_Data::has_m11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void allmarketinfo_Data::set_has_m11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void allmarketinfo_Data::clear_has_m11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void allmarketinfo_Data::clear_m11() {
  m11_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m11();
}
inline const ::std::string& allmarketinfo_Data::m11() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m11)
  return m11_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m11(const ::std::string& value) {
  set_has_m11();
  m11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m11)
}
inline void allmarketinfo_Data::set_m11(const char* value) {
  set_has_m11();
  m11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m11)
}
inline void allmarketinfo_Data::set_m11(const char* value, size_t size) {
  set_has_m11();
  m11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m11)
}
inline ::std::string* allmarketinfo_Data::mutable_m11() {
  set_has_m11();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m11)
  return m11_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m11() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m11)
  clear_has_m11();
  return m11_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m11(::std::string* m11) {
  if (m11 != NULL) {
    set_has_m11();
  } else {
    clear_has_m11();
  }
  m11_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m11);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m11)
}

// required string m12 = 13;
inline bool allmarketinfo_Data::has_m12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void allmarketinfo_Data::set_has_m12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void allmarketinfo_Data::clear_has_m12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void allmarketinfo_Data::clear_m12() {
  m12_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m12();
}
inline const ::std::string& allmarketinfo_Data::m12() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m12)
  return m12_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m12(const ::std::string& value) {
  set_has_m12();
  m12_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m12)
}
inline void allmarketinfo_Data::set_m12(const char* value) {
  set_has_m12();
  m12_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m12)
}
inline void allmarketinfo_Data::set_m12(const char* value, size_t size) {
  set_has_m12();
  m12_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m12)
}
inline ::std::string* allmarketinfo_Data::mutable_m12() {
  set_has_m12();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m12)
  return m12_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m12() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m12)
  clear_has_m12();
  return m12_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m12(::std::string* m12) {
  if (m12 != NULL) {
    set_has_m12();
  } else {
    clear_has_m12();
  }
  m12_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m12);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m12)
}

// required string m13 = 14;
inline bool allmarketinfo_Data::has_m13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void allmarketinfo_Data::set_has_m13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void allmarketinfo_Data::clear_has_m13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void allmarketinfo_Data::clear_m13() {
  m13_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m13();
}
inline const ::std::string& allmarketinfo_Data::m13() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m13)
  return m13_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_m13(const ::std::string& value) {
  set_has_m13();
  m13_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m13)
}
inline void allmarketinfo_Data::set_m13(const char* value) {
  set_has_m13();
  m13_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m13)
}
inline void allmarketinfo_Data::set_m13(const char* value, size_t size) {
  set_has_m13();
  m13_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m13)
}
inline ::std::string* allmarketinfo_Data::mutable_m13() {
  set_has_m13();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m13)
  return m13_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Data::release_m13() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m13)
  clear_has_m13();
  return m13_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Data::set_allocated_m13(::std::string* m13) {
  if (m13 != NULL) {
    set_has_m13();
  } else {
    clear_has_m13();
  }
  m13_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m13);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m13)
}

// -------------------------------------------------------------------

// allmarketinfo_Exchange

// required string btc = 1;
inline bool allmarketinfo_Exchange::has_btc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void allmarketinfo_Exchange::set_has_btc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void allmarketinfo_Exchange::clear_has_btc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void allmarketinfo_Exchange::clear_btc() {
  btc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_btc();
}
inline const ::std::string& allmarketinfo_Exchange::btc() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Exchange.btc)
  return btc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Exchange::set_btc(const ::std::string& value) {
  set_has_btc();
  btc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Exchange.btc)
}
inline void allmarketinfo_Exchange::set_btc(const char* value) {
  set_has_btc();
  btc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Exchange.btc)
}
inline void allmarketinfo_Exchange::set_btc(const char* value, size_t size) {
  set_has_btc();
  btc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Exchange.btc)
}
inline ::std::string* allmarketinfo_Exchange::mutable_btc() {
  set_has_btc();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Exchange.btc)
  return btc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Exchange::release_btc() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Exchange.btc)
  clear_has_btc();
  return btc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Exchange::set_allocated_btc(::std::string* btc) {
  if (btc != NULL) {
    set_has_btc();
  } else {
    clear_has_btc();
  }
  btc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), btc);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Exchange.btc)
}

// required string eth = 2;
inline bool allmarketinfo_Exchange::has_eth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void allmarketinfo_Exchange::set_has_eth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void allmarketinfo_Exchange::clear_has_eth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void allmarketinfo_Exchange::clear_eth() {
  eth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_eth();
}
inline const ::std::string& allmarketinfo_Exchange::eth() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Exchange.eth)
  return eth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Exchange::set_eth(const ::std::string& value) {
  set_has_eth();
  eth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Exchange.eth)
}
inline void allmarketinfo_Exchange::set_eth(const char* value) {
  set_has_eth();
  eth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Exchange.eth)
}
inline void allmarketinfo_Exchange::set_eth(const char* value, size_t size) {
  set_has_eth();
  eth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Exchange.eth)
}
inline ::std::string* allmarketinfo_Exchange::mutable_eth() {
  set_has_eth();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Exchange.eth)
  return eth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo_Exchange::release_eth() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Exchange.eth)
  clear_has_eth();
  return eth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo_Exchange::set_allocated_eth(::std::string* eth) {
  if (eth != NULL) {
    set_has_eth();
  } else {
    clear_has_eth();
  }
  eth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eth);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Exchange.eth)
}

// -------------------------------------------------------------------

// allmarketinfo

// required string type = 1;
inline bool allmarketinfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void allmarketinfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void allmarketinfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void allmarketinfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& allmarketinfo::type() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.type)
}
inline void allmarketinfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.type)
}
inline void allmarketinfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.type)
}
inline ::std::string* allmarketinfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo::release_type() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.type)
}

// repeated .ukex.allmarketinfo.Data data = 2;
inline int allmarketinfo::data_size() const {
  return data_.size();
}
inline void allmarketinfo::clear_data() {
  data_.Clear();
}
inline const ::ukex::allmarketinfo_Data& allmarketinfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.data)
  return data_.Get(index);
}
inline ::ukex::allmarketinfo_Data* allmarketinfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.data)
  return data_.Mutable(index);
}
inline ::ukex::allmarketinfo_Data* allmarketinfo::add_data() {
  // @@protoc_insertion_point(field_add:ukex.allmarketinfo.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data >*
allmarketinfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ukex.allmarketinfo.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data >&
allmarketinfo::data() const {
  // @@protoc_insertion_point(field_list:ukex.allmarketinfo.data)
  return data_;
}

// required uint64 marketid = 3;
inline bool allmarketinfo::has_marketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void allmarketinfo::set_has_marketid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void allmarketinfo::clear_has_marketid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void allmarketinfo::clear_marketid() {
  marketid_ = GOOGLE_ULONGLONG(0);
  clear_has_marketid();
}
inline ::google::protobuf::uint64 allmarketinfo::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.marketid)
  return marketid_;
}
inline void allmarketinfo::set_marketid(::google::protobuf::uint64 value) {
  set_has_marketid();
  marketid_ = value;
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.marketid)
}

// required .ukex.allmarketinfo.Exchange exchange = 4;
inline bool allmarketinfo::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void allmarketinfo::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void allmarketinfo::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void allmarketinfo::clear_exchange() {
  if (exchange_ != NULL) exchange_->::ukex::allmarketinfo_Exchange::Clear();
  clear_has_exchange();
}
inline const ::ukex::allmarketinfo_Exchange& allmarketinfo::exchange() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.exchange)
  return exchange_ != NULL ? *exchange_ : *default_instance_->exchange_;
}
inline ::ukex::allmarketinfo_Exchange* allmarketinfo::mutable_exchange() {
  set_has_exchange();
  if (exchange_ == NULL) {
    exchange_ = new ::ukex::allmarketinfo_Exchange;
  }
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.exchange)
  return exchange_;
}
inline ::ukex::allmarketinfo_Exchange* allmarketinfo::release_exchange() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.exchange)
  clear_has_exchange();
  ::ukex::allmarketinfo_Exchange* temp = exchange_;
  exchange_ = NULL;
  return temp;
}
inline void allmarketinfo::set_allocated_exchange(::ukex::allmarketinfo_Exchange* exchange) {
  delete exchange_;
  exchange_ = exchange;
  if (exchange) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.exchange)
}

// optional string token = 5;
inline bool allmarketinfo::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void allmarketinfo::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void allmarketinfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void allmarketinfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& allmarketinfo::token() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.token)
}
inline void allmarketinfo::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.token)
}
inline void allmarketinfo::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.token)
}
inline ::std::string* allmarketinfo::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* allmarketinfo::release_token() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void allmarketinfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukex::allmarketinfo_CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::allmarketinfo_CONST>() {
  return ::ukex::allmarketinfo_CONST_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ukex_2eallmarketinfo_2eproto__INCLUDED
