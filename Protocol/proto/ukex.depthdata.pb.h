// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.depthdata.proto

#ifndef PROTOBUF_ukex_2edepthdata_2eproto__INCLUDED
#define PROTOBUF_ukex_2edepthdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ukex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ukex_2edepthdata_2eproto();
void protobuf_AssignDesc_ukex_2edepthdata_2eproto();
void protobuf_ShutdownFile_ukex_2edepthdata_2eproto();

class depthdata;
class depthdata_Data;
class depthdata_Data_Depth;
class depthdata_Data_Depth_buyAction;
class depthdata_Data_Depth_sellAction;

enum depthdata_CONST {
  depthdata_CONST_CMD = 106
};
bool depthdata_CONST_IsValid(int value);
const depthdata_CONST depthdata_CONST_CONST_MIN = depthdata_CONST_CMD;
const depthdata_CONST depthdata_CONST_CONST_MAX = depthdata_CONST_CMD;
const int depthdata_CONST_CONST_ARRAYSIZE = depthdata_CONST_CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* depthdata_CONST_descriptor();
inline const ::std::string& depthdata_CONST_Name(depthdata_CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    depthdata_CONST_descriptor(), value);
}
inline bool depthdata_CONST_Parse(
    const ::std::string& name, depthdata_CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<depthdata_CONST>(
    depthdata_CONST_descriptor(), name, value);
}
// ===================================================================

class depthdata_Data_Depth_buyAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data.Depth.buyAction) */ {
 public:
  depthdata_Data_Depth_buyAction();
  virtual ~depthdata_Data_Depth_buyAction();

  depthdata_Data_Depth_buyAction(const depthdata_Data_Depth_buyAction& from);

  inline depthdata_Data_Depth_buyAction& operator=(const depthdata_Data_Depth_buyAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depthdata_Data_Depth_buyAction& default_instance();

  void Swap(depthdata_Data_Depth_buyAction* other);

  // implements Message ----------------------------------------------

  inline depthdata_Data_Depth_buyAction* New() const { return New(NULL); }

  depthdata_Data_Depth_buyAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depthdata_Data_Depth_buyAction& from);
  void MergeFrom(const depthdata_Data_Depth_buyAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(depthdata_Data_Depth_buyAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string b0 = 1;
  bool has_b0() const;
  void clear_b0();
  static const int kB0FieldNumber = 1;
  const ::std::string& b0() const;
  void set_b0(const ::std::string& value);
  void set_b0(const char* value);
  void set_b0(const char* value, size_t size);
  ::std::string* mutable_b0();
  ::std::string* release_b0();
  void set_allocated_b0(::std::string* b0);

  // required string b1 = 2;
  bool has_b1() const;
  void clear_b1();
  static const int kB1FieldNumber = 2;
  const ::std::string& b1() const;
  void set_b1(const ::std::string& value);
  void set_b1(const char* value);
  void set_b1(const char* value, size_t size);
  ::std::string* mutable_b1();
  ::std::string* release_b1();
  void set_allocated_b1(::std::string* b1);

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data.Depth.buyAction)
 private:
  inline void set_has_b0();
  inline void clear_has_b0();
  inline void set_has_b1();
  inline void clear_has_b1();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr b0_;
  ::google::protobuf::internal::ArenaStringPtr b1_;
  friend void  protobuf_AddDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_AssignDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2edepthdata_2eproto();

  void InitAsDefaultInstance();
  static depthdata_Data_Depth_buyAction* default_instance_;
};
// -------------------------------------------------------------------

class depthdata_Data_Depth_sellAction : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data.Depth.sellAction) */ {
 public:
  depthdata_Data_Depth_sellAction();
  virtual ~depthdata_Data_Depth_sellAction();

  depthdata_Data_Depth_sellAction(const depthdata_Data_Depth_sellAction& from);

  inline depthdata_Data_Depth_sellAction& operator=(const depthdata_Data_Depth_sellAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depthdata_Data_Depth_sellAction& default_instance();

  void Swap(depthdata_Data_Depth_sellAction* other);

  // implements Message ----------------------------------------------

  inline depthdata_Data_Depth_sellAction* New() const { return New(NULL); }

  depthdata_Data_Depth_sellAction* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depthdata_Data_Depth_sellAction& from);
  void MergeFrom(const depthdata_Data_Depth_sellAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(depthdata_Data_Depth_sellAction* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string s0 = 1;
  bool has_s0() const;
  void clear_s0();
  static const int kS0FieldNumber = 1;
  const ::std::string& s0() const;
  void set_s0(const ::std::string& value);
  void set_s0(const char* value);
  void set_s0(const char* value, size_t size);
  ::std::string* mutable_s0();
  ::std::string* release_s0();
  void set_allocated_s0(::std::string* s0);

  // required string s1 = 2;
  bool has_s1() const;
  void clear_s1();
  static const int kS1FieldNumber = 2;
  const ::std::string& s1() const;
  void set_s1(const ::std::string& value);
  void set_s1(const char* value);
  void set_s1(const char* value, size_t size);
  ::std::string* mutable_s1();
  ::std::string* release_s1();
  void set_allocated_s1(::std::string* s1);

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data.Depth.sellAction)
 private:
  inline void set_has_s0();
  inline void clear_has_s0();
  inline void set_has_s1();
  inline void clear_has_s1();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr s0_;
  ::google::protobuf::internal::ArenaStringPtr s1_;
  friend void  protobuf_AddDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_AssignDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2edepthdata_2eproto();

  void InitAsDefaultInstance();
  static depthdata_Data_Depth_sellAction* default_instance_;
};
// -------------------------------------------------------------------

class depthdata_Data_Depth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data.Depth) */ {
 public:
  depthdata_Data_Depth();
  virtual ~depthdata_Data_Depth();

  depthdata_Data_Depth(const depthdata_Data_Depth& from);

  inline depthdata_Data_Depth& operator=(const depthdata_Data_Depth& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depthdata_Data_Depth& default_instance();

  void Swap(depthdata_Data_Depth* other);

  // implements Message ----------------------------------------------

  inline depthdata_Data_Depth* New() const { return New(NULL); }

  depthdata_Data_Depth* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depthdata_Data_Depth& from);
  void MergeFrom(const depthdata_Data_Depth& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(depthdata_Data_Depth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef depthdata_Data_Depth_buyAction buyAction;
  typedef depthdata_Data_Depth_sellAction sellAction;

  // accessors -------------------------------------------------------

  // repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
  int buy_size() const;
  void clear_buy();
  static const int kBuyFieldNumber = 1;
  const ::ukex::depthdata_Data_Depth_buyAction& buy(int index) const;
  ::ukex::depthdata_Data_Depth_buyAction* mutable_buy(int index);
  ::ukex::depthdata_Data_Depth_buyAction* add_buy();
  ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >*
      mutable_buy();
  const ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >&
      buy() const;

  // repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
  int sell_size() const;
  void clear_sell();
  static const int kSellFieldNumber = 2;
  const ::ukex::depthdata_Data_Depth_sellAction& sell(int index) const;
  ::ukex::depthdata_Data_Depth_sellAction* mutable_sell(int index);
  ::ukex::depthdata_Data_Depth_sellAction* add_sell();
  ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >*
      mutable_sell();
  const ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >&
      sell() const;

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data.Depth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction > buy_;
  ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction > sell_;
  friend void  protobuf_AddDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_AssignDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2edepthdata_2eproto();

  void InitAsDefaultInstance();
  static depthdata_Data_Depth* default_instance_;
};
// -------------------------------------------------------------------

class depthdata_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata.Data) */ {
 public:
  depthdata_Data();
  virtual ~depthdata_Data();

  depthdata_Data(const depthdata_Data& from);

  inline depthdata_Data& operator=(const depthdata_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depthdata_Data& default_instance();

  void Swap(depthdata_Data* other);

  // implements Message ----------------------------------------------

  inline depthdata_Data* New() const { return New(NULL); }

  depthdata_Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depthdata_Data& from);
  void MergeFrom(const depthdata_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(depthdata_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef depthdata_Data_Depth Depth;

  // accessors -------------------------------------------------------

  // required .ukex.depthdata.Data.Depth depth = 1;
  bool has_depth() const;
  void clear_depth();
  static const int kDepthFieldNumber = 1;
  const ::ukex::depthdata_Data_Depth& depth() const;
  ::ukex::depthdata_Data_Depth* mutable_depth();
  ::ukex::depthdata_Data_Depth* release_depth();
  void set_allocated_depth(::ukex::depthdata_Data_Depth* depth);

  // @@protoc_insertion_point(class_scope:ukex.depthdata.Data)
 private:
  inline void set_has_depth();
  inline void clear_has_depth();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::ukex::depthdata_Data_Depth* depth_;
  friend void  protobuf_AddDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_AssignDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2edepthdata_2eproto();

  void InitAsDefaultInstance();
  static depthdata_Data* default_instance_;
};
// -------------------------------------------------------------------

class depthdata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.depthdata) */ {
 public:
  depthdata();
  virtual ~depthdata();

  depthdata(const depthdata& from);

  inline depthdata& operator=(const depthdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const depthdata& default_instance();

  void Swap(depthdata* other);

  // implements Message ----------------------------------------------

  inline depthdata* New() const { return New(NULL); }

  depthdata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const depthdata& from);
  void MergeFrom(const depthdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(depthdata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef depthdata_Data Data;

  typedef depthdata_CONST CONST;
  static const CONST CMD =
    depthdata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return depthdata_CONST_IsValid(value);
  }
  static const CONST CONST_MIN =
    depthdata_CONST_CONST_MIN;
  static const CONST CONST_MAX =
    depthdata_CONST_CONST_MAX;
  static const int CONST_ARRAYSIZE =
    depthdata_CONST_CONST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CONST_descriptor() {
    return depthdata_CONST_descriptor();
  }
  static inline const ::std::string& CONST_Name(CONST value) {
    return depthdata_CONST_Name(value);
  }
  static inline bool CONST_Parse(const ::std::string& name,
      CONST* value) {
    return depthdata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required .ukex.depthdata.Data data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::ukex::depthdata_Data& data() const;
  ::ukex::depthdata_Data* mutable_data();
  ::ukex::depthdata_Data* release_data();
  void set_allocated_data(::ukex::depthdata_Data* data);

  // optional string token = 3;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ukex.depthdata)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_token();
  inline void clear_has_token();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::ukex::depthdata_Data* data_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_AddDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_AssignDesc_ukex_2edepthdata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2edepthdata_2eproto();

  void InitAsDefaultInstance();
  static depthdata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// depthdata_Data_Depth_buyAction

// required string b0 = 1;
inline bool depthdata_Data_Depth_buyAction::has_b0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depthdata_Data_Depth_buyAction::set_has_b0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depthdata_Data_Depth_buyAction::clear_has_b0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depthdata_Data_Depth_buyAction::clear_b0() {
  b0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_b0();
}
inline const ::std::string& depthdata_Data_Depth_buyAction::b0() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.buyAction.b0)
  return b0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_buyAction::set_b0(const ::std::string& value) {
  set_has_b0();
  b0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline void depthdata_Data_Depth_buyAction::set_b0(const char* value) {
  set_has_b0();
  b0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline void depthdata_Data_Depth_buyAction::set_b0(const char* value, size_t size) {
  set_has_b0();
  b0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.buyAction.b0)
}
inline ::std::string* depthdata_Data_Depth_buyAction::mutable_b0() {
  set_has_b0();
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.buyAction.b0)
  return b0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthdata_Data_Depth_buyAction::release_b0() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.buyAction.b0)
  clear_has_b0();
  return b0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_buyAction::set_allocated_b0(::std::string* b0) {
  if (b0 != NULL) {
    set_has_b0();
  } else {
    clear_has_b0();
  }
  b0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b0);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.buyAction.b0)
}

// required string b1 = 2;
inline bool depthdata_Data_Depth_buyAction::has_b1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depthdata_Data_Depth_buyAction::set_has_b1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depthdata_Data_Depth_buyAction::clear_has_b1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depthdata_Data_Depth_buyAction::clear_b1() {
  b1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_b1();
}
inline const ::std::string& depthdata_Data_Depth_buyAction::b1() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.buyAction.b1)
  return b1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_buyAction::set_b1(const ::std::string& value) {
  set_has_b1();
  b1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline void depthdata_Data_Depth_buyAction::set_b1(const char* value) {
  set_has_b1();
  b1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline void depthdata_Data_Depth_buyAction::set_b1(const char* value, size_t size) {
  set_has_b1();
  b1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.buyAction.b1)
}
inline ::std::string* depthdata_Data_Depth_buyAction::mutable_b1() {
  set_has_b1();
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.buyAction.b1)
  return b1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthdata_Data_Depth_buyAction::release_b1() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.buyAction.b1)
  clear_has_b1();
  return b1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_buyAction::set_allocated_b1(::std::string* b1) {
  if (b1 != NULL) {
    set_has_b1();
  } else {
    clear_has_b1();
  }
  b1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b1);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.buyAction.b1)
}

// -------------------------------------------------------------------

// depthdata_Data_Depth_sellAction

// required string s0 = 1;
inline bool depthdata_Data_Depth_sellAction::has_s0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depthdata_Data_Depth_sellAction::set_has_s0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depthdata_Data_Depth_sellAction::clear_has_s0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depthdata_Data_Depth_sellAction::clear_s0() {
  s0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s0();
}
inline const ::std::string& depthdata_Data_Depth_sellAction::s0() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.sellAction.s0)
  return s0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_sellAction::set_s0(const ::std::string& value) {
  set_has_s0();
  s0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline void depthdata_Data_Depth_sellAction::set_s0(const char* value) {
  set_has_s0();
  s0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline void depthdata_Data_Depth_sellAction::set_s0(const char* value, size_t size) {
  set_has_s0();
  s0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.sellAction.s0)
}
inline ::std::string* depthdata_Data_Depth_sellAction::mutable_s0() {
  set_has_s0();
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.sellAction.s0)
  return s0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthdata_Data_Depth_sellAction::release_s0() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.sellAction.s0)
  clear_has_s0();
  return s0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_sellAction::set_allocated_s0(::std::string* s0) {
  if (s0 != NULL) {
    set_has_s0();
  } else {
    clear_has_s0();
  }
  s0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s0);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.sellAction.s0)
}

// required string s1 = 2;
inline bool depthdata_Data_Depth_sellAction::has_s1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depthdata_Data_Depth_sellAction::set_has_s1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depthdata_Data_Depth_sellAction::clear_has_s1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depthdata_Data_Depth_sellAction::clear_s1() {
  s1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s1();
}
inline const ::std::string& depthdata_Data_Depth_sellAction::s1() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.sellAction.s1)
  return s1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_sellAction::set_s1(const ::std::string& value) {
  set_has_s1();
  s1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline void depthdata_Data_Depth_sellAction::set_s1(const char* value) {
  set_has_s1();
  s1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline void depthdata_Data_Depth_sellAction::set_s1(const char* value, size_t size) {
  set_has_s1();
  s1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.Data.Depth.sellAction.s1)
}
inline ::std::string* depthdata_Data_Depth_sellAction::mutable_s1() {
  set_has_s1();
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.sellAction.s1)
  return s1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthdata_Data_Depth_sellAction::release_s1() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.Depth.sellAction.s1)
  clear_has_s1();
  return s1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata_Data_Depth_sellAction::set_allocated_s1(::std::string* s1) {
  if (s1 != NULL) {
    set_has_s1();
  } else {
    clear_has_s1();
  }
  s1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s1);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.Depth.sellAction.s1)
}

// -------------------------------------------------------------------

// depthdata_Data_Depth

// repeated .ukex.depthdata.Data.Depth.buyAction buy = 1;
inline int depthdata_Data_Depth::buy_size() const {
  return buy_.size();
}
inline void depthdata_Data_Depth::clear_buy() {
  buy_.Clear();
}
inline const ::ukex::depthdata_Data_Depth_buyAction& depthdata_Data_Depth::buy(int index) const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.buy)
  return buy_.Get(index);
}
inline ::ukex::depthdata_Data_Depth_buyAction* depthdata_Data_Depth::mutable_buy(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.buy)
  return buy_.Mutable(index);
}
inline ::ukex::depthdata_Data_Depth_buyAction* depthdata_Data_Depth::add_buy() {
  // @@protoc_insertion_point(field_add:ukex.depthdata.Data.Depth.buy)
  return buy_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >*
depthdata_Data_Depth::mutable_buy() {
  // @@protoc_insertion_point(field_mutable_list:ukex.depthdata.Data.Depth.buy)
  return &buy_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_buyAction >&
depthdata_Data_Depth::buy() const {
  // @@protoc_insertion_point(field_list:ukex.depthdata.Data.Depth.buy)
  return buy_;
}

// repeated .ukex.depthdata.Data.Depth.sellAction sell = 2;
inline int depthdata_Data_Depth::sell_size() const {
  return sell_.size();
}
inline void depthdata_Data_Depth::clear_sell() {
  sell_.Clear();
}
inline const ::ukex::depthdata_Data_Depth_sellAction& depthdata_Data_Depth::sell(int index) const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.Depth.sell)
  return sell_.Get(index);
}
inline ::ukex::depthdata_Data_Depth_sellAction* depthdata_Data_Depth::mutable_sell(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.Depth.sell)
  return sell_.Mutable(index);
}
inline ::ukex::depthdata_Data_Depth_sellAction* depthdata_Data_Depth::add_sell() {
  // @@protoc_insertion_point(field_add:ukex.depthdata.Data.Depth.sell)
  return sell_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >*
depthdata_Data_Depth::mutable_sell() {
  // @@protoc_insertion_point(field_mutable_list:ukex.depthdata.Data.Depth.sell)
  return &sell_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ukex::depthdata_Data_Depth_sellAction >&
depthdata_Data_Depth::sell() const {
  // @@protoc_insertion_point(field_list:ukex.depthdata.Data.Depth.sell)
  return sell_;
}

// -------------------------------------------------------------------

// depthdata_Data

// required .ukex.depthdata.Data.Depth depth = 1;
inline bool depthdata_Data::has_depth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depthdata_Data::set_has_depth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depthdata_Data::clear_has_depth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depthdata_Data::clear_depth() {
  if (depth_ != NULL) depth_->::ukex::depthdata_Data_Depth::Clear();
  clear_has_depth();
}
inline const ::ukex::depthdata_Data_Depth& depthdata_Data::depth() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.Data.depth)
  return depth_ != NULL ? *depth_ : *default_instance_->depth_;
}
inline ::ukex::depthdata_Data_Depth* depthdata_Data::mutable_depth() {
  set_has_depth();
  if (depth_ == NULL) {
    depth_ = new ::ukex::depthdata_Data_Depth;
  }
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.Data.depth)
  return depth_;
}
inline ::ukex::depthdata_Data_Depth* depthdata_Data::release_depth() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.Data.depth)
  clear_has_depth();
  ::ukex::depthdata_Data_Depth* temp = depth_;
  depth_ = NULL;
  return temp;
}
inline void depthdata_Data::set_allocated_depth(::ukex::depthdata_Data_Depth* depth) {
  delete depth_;
  depth_ = depth;
  if (depth) {
    set_has_depth();
  } else {
    clear_has_depth();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.Data.depth)
}

// -------------------------------------------------------------------

// depthdata

// required string type = 1;
inline bool depthdata::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void depthdata::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void depthdata::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void depthdata::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& depthdata::type() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.type)
}
inline void depthdata::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.type)
}
inline void depthdata::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.type)
}
inline ::std::string* depthdata::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthdata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.type)
}

// required .ukex.depthdata.Data data = 2;
inline bool depthdata::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void depthdata::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void depthdata::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void depthdata::clear_data() {
  if (data_ != NULL) data_->::ukex::depthdata_Data::Clear();
  clear_has_data();
}
inline const ::ukex::depthdata_Data& depthdata::data() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::ukex::depthdata_Data* depthdata::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::ukex::depthdata_Data;
  }
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.data)
  return data_;
}
inline ::ukex::depthdata_Data* depthdata::release_data() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.data)
  clear_has_data();
  ::ukex::depthdata_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void depthdata::set_allocated_data(::ukex::depthdata_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.data)
}

// optional string token = 3;
inline bool depthdata::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void depthdata::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void depthdata::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void depthdata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& depthdata::token() const {
  // @@protoc_insertion_point(field_get:ukex.depthdata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.depthdata.token)
}
inline void depthdata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.depthdata.token)
}
inline void depthdata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.depthdata.token)
}
inline ::std::string* depthdata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.depthdata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* depthdata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.depthdata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void depthdata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.depthdata.token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukex::depthdata_CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::depthdata_CONST>() {
  return ::ukex::depthdata_CONST_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ukex_2edepthdata_2eproto__INCLUDED
