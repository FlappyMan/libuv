// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.matcheddata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.matcheddata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* matcheddata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  matcheddata_reflection_ = NULL;
const ::google::protobuf::Descriptor* matcheddata_BuyUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  matcheddata_BuyUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* matcheddata_SellUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  matcheddata_SellUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* matcheddata_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2ematcheddata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2ematcheddata_2eproto() {
  protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.matcheddata.proto");
  GOOGLE_CHECK(file != NULL);
  matcheddata_descriptor_ = file->message_type(0);
  static const int matcheddata_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, buyuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, selluser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, token_),
  };
  matcheddata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      matcheddata_descriptor_,
      matcheddata::default_instance_,
      matcheddata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, _has_bits_[0]),
      -1,
      -1,
      sizeof(matcheddata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata, _internal_metadata_),
      -1);
  matcheddata_BuyUser_descriptor_ = matcheddata_descriptor_->nested_type(0);
  static const int matcheddata_BuyUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, cny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, cnyd_),
  };
  matcheddata_BuyUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      matcheddata_BuyUser_descriptor_,
      matcheddata_BuyUser::default_instance_,
      matcheddata_BuyUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(matcheddata_BuyUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_BuyUser, _internal_metadata_),
      -1);
  matcheddata_SellUser_descriptor_ = matcheddata_descriptor_->nested_type(1);
  static const int matcheddata_SellUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, deal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, xnb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, xnbd_),
  };
  matcheddata_SellUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      matcheddata_SellUser_descriptor_,
      matcheddata_SellUser::default_instance_,
      matcheddata_SellUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(matcheddata_SellUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(matcheddata_SellUser, _internal_metadata_),
      -1);
  matcheddata_CONST_descriptor_ = matcheddata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2ematcheddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      matcheddata_descriptor_, &matcheddata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      matcheddata_BuyUser_descriptor_, &matcheddata_BuyUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      matcheddata_SellUser_descriptor_, &matcheddata_SellUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2ematcheddata_2eproto() {
  delete matcheddata::default_instance_;
  delete matcheddata_reflection_;
  delete matcheddata_BuyUser::default_instance_;
  delete matcheddata_BuyUser_reflection_;
  delete matcheddata_SellUser::default_instance_;
  delete matcheddata_SellUser_reflection_;
}

void protobuf_AddDesc_ukex_2ematcheddata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2ematcheddata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ukex.matcheddata.proto\022\004ukex\"\327\002\n\013match"
    "eddata\022\017\n\007addtime\030\001 \002(\t\022\n\n\002id\030\002 \002(\004\022\r\n\005p"
    "rice\030\003 \002(\t\022*\n\007buyuser\030\004 \002(\0132\031.ukex.match"
    "eddata.BuyUser\022,\n\010selluser\030\005 \002(\0132\032.ukex."
    "matcheddata.SellUser\022\r\n\005token\030\006 \001(\t\032O\n\007B"
    "uyUser\022\016\n\006userid\030\001 \002(\t\022\013\n\003num\030\002 \002(\t\022\014\n\004d"
    "eal\030\003 \002(\t\022\013\n\003cny\030\004 \002(\004\022\014\n\004cnyd\030\005 \002(\004\032P\n\010"
    "SellUser\022\016\n\006userid\030\001 \002(\t\022\013\n\003num\030\002 \002(\t\022\014\n"
    "\004deal\030\003 \002(\t\022\013\n\003xnb\030\004 \002(\004\022\014\n\004xnbd\030\005 \002(\004\"\020"
    "\n\005CONST\022\007\n\003CMD\020l", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.matcheddata.proto", &protobuf_RegisterTypes);
  matcheddata::default_instance_ = new matcheddata();
  matcheddata_BuyUser::default_instance_ = new matcheddata_BuyUser();
  matcheddata_SellUser::default_instance_ = new matcheddata_SellUser();
  matcheddata::default_instance_->InitAsDefaultInstance();
  matcheddata_BuyUser::default_instance_->InitAsDefaultInstance();
  matcheddata_SellUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2ematcheddata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2ematcheddata_2eproto {
  StaticDescriptorInitializer_ukex_2ematcheddata_2eproto() {
    protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  }
} static_descriptor_initializer_ukex_2ematcheddata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* matcheddata_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matcheddata_CONST_descriptor_;
}
bool matcheddata_CONST_IsValid(int value) {
  switch(value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const matcheddata_CONST matcheddata::CMD;
const matcheddata_CONST matcheddata::CONST_MIN;
const matcheddata_CONST matcheddata::CONST_MAX;
const int matcheddata::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matcheddata_BuyUser::kUseridFieldNumber;
const int matcheddata_BuyUser::kNumFieldNumber;
const int matcheddata_BuyUser::kDealFieldNumber;
const int matcheddata_BuyUser::kCnyFieldNumber;
const int matcheddata_BuyUser::kCnydFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matcheddata_BuyUser::matcheddata_BuyUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.matcheddata.BuyUser)
}

void matcheddata_BuyUser::InitAsDefaultInstance() {
}

matcheddata_BuyUser::matcheddata_BuyUser(const matcheddata_BuyUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.matcheddata.BuyUser)
}

void matcheddata_BuyUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cny_ = GOOGLE_ULONGLONG(0);
  cnyd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

matcheddata_BuyUser::~matcheddata_BuyUser() {
  // @@protoc_insertion_point(destructor:ukex.matcheddata.BuyUser)
  SharedDtor();
}

void matcheddata_BuyUser::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void matcheddata_BuyUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* matcheddata_BuyUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matcheddata_BuyUser_descriptor_;
}

const matcheddata_BuyUser& matcheddata_BuyUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  return *default_instance_;
}

matcheddata_BuyUser* matcheddata_BuyUser::default_instance_ = NULL;

matcheddata_BuyUser* matcheddata_BuyUser::New(::google::protobuf::Arena* arena) const {
  matcheddata_BuyUser* n = new matcheddata_BuyUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void matcheddata_BuyUser::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.matcheddata.BuyUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(matcheddata_BuyUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<matcheddata_BuyUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(cny_, cnyd_);
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_num()) {
      num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deal()) {
      deal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool matcheddata_BuyUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.matcheddata.BuyUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.BuyUser.userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_num;
        break;
      }

      // required string num = 2;
      case 2: {
        if (tag == 18) {
         parse_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.BuyUser.num");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deal;
        break;
      }

      // required string deal = 3;
      case 3: {
        if (tag == 26) {
         parse_deal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deal().data(), this->deal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.BuyUser.deal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cny;
        break;
      }

      // required uint64 cny = 4;
      case 4: {
        if (tag == 32) {
         parse_cny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cny_)));
          set_has_cny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_cnyd;
        break;
      }

      // required uint64 cnyd = 5;
      case 5: {
        if (tag == 40) {
         parse_cnyd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cnyd_)));
          set_has_cnyd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.matcheddata.BuyUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.matcheddata.BuyUser)
  return false;
#undef DO_
}

void matcheddata_BuyUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.matcheddata.BuyUser)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->num(), output);
  }

  // required string deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deal().data(), this->deal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.deal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deal(), output);
  }

  // required uint64 cny = 4;
  if (has_cny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cny(), output);
  }

  // required uint64 cnyd = 5;
  if (has_cnyd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cnyd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.matcheddata.BuyUser)
}

::google::protobuf::uint8* matcheddata_BuyUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.matcheddata.BuyUser)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->num(), target);
  }

  // required string deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deal().data(), this->deal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.BuyUser.deal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deal(), target);
  }

  // required uint64 cny = 4;
  if (has_cny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cny(), target);
  }

  // required uint64 cnyd = 5;
  if (has_cnyd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cnyd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.matcheddata.BuyUser)
  return target;
}

int matcheddata_BuyUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.matcheddata.BuyUser)
  int total_size = 0;

  if (has_userid()) {
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_num()) {
    // required string num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->num());
  }

  if (has_deal()) {
    // required string deal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deal());
  }

  if (has_cny()) {
    // required uint64 cny = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cny());
  }

  if (has_cnyd()) {
    // required uint64 cnyd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cnyd());
  }

  return total_size;
}
int matcheddata_BuyUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.matcheddata.BuyUser)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->num());

    // required string deal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deal());

    // required uint64 cny = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cny());

    // required uint64 cnyd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->cnyd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void matcheddata_BuyUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.matcheddata.BuyUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const matcheddata_BuyUser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const matcheddata_BuyUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.matcheddata.BuyUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.matcheddata.BuyUser)
    MergeFrom(*source);
  }
}

void matcheddata_BuyUser::MergeFrom(const matcheddata_BuyUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.matcheddata.BuyUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_num()) {
      set_has_num();
      num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_);
    }
    if (from.has_deal()) {
      set_has_deal();
      deal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deal_);
    }
    if (from.has_cny()) {
      set_cny(from.cny());
    }
    if (from.has_cnyd()) {
      set_cnyd(from.cnyd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void matcheddata_BuyUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.matcheddata.BuyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matcheddata_BuyUser::CopyFrom(const matcheddata_BuyUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.matcheddata.BuyUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matcheddata_BuyUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void matcheddata_BuyUser::Swap(matcheddata_BuyUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matcheddata_BuyUser::InternalSwap(matcheddata_BuyUser* other) {
  userid_.Swap(&other->userid_);
  num_.Swap(&other->num_);
  deal_.Swap(&other->deal_);
  std::swap(cny_, other->cny_);
  std::swap(cnyd_, other->cnyd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata matcheddata_BuyUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = matcheddata_BuyUser_descriptor_;
  metadata.reflection = matcheddata_BuyUser_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matcheddata_SellUser::kUseridFieldNumber;
const int matcheddata_SellUser::kNumFieldNumber;
const int matcheddata_SellUser::kDealFieldNumber;
const int matcheddata_SellUser::kXnbFieldNumber;
const int matcheddata_SellUser::kXnbdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matcheddata_SellUser::matcheddata_SellUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.matcheddata.SellUser)
}

void matcheddata_SellUser::InitAsDefaultInstance() {
}

matcheddata_SellUser::matcheddata_SellUser(const matcheddata_SellUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.matcheddata.SellUser)
}

void matcheddata_SellUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deal_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xnb_ = GOOGLE_ULONGLONG(0);
  xnbd_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

matcheddata_SellUser::~matcheddata_SellUser() {
  // @@protoc_insertion_point(destructor:ukex.matcheddata.SellUser)
  SharedDtor();
}

void matcheddata_SellUser::SharedDtor() {
  userid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deal_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void matcheddata_SellUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* matcheddata_SellUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matcheddata_SellUser_descriptor_;
}

const matcheddata_SellUser& matcheddata_SellUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  return *default_instance_;
}

matcheddata_SellUser* matcheddata_SellUser::default_instance_ = NULL;

matcheddata_SellUser* matcheddata_SellUser::New(::google::protobuf::Arena* arena) const {
  matcheddata_SellUser* n = new matcheddata_SellUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void matcheddata_SellUser::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.matcheddata.SellUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(matcheddata_SellUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<matcheddata_SellUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(xnb_, xnbd_);
    if (has_userid()) {
      userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_num()) {
      num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_deal()) {
      deal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool matcheddata_SellUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.matcheddata.SellUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.SellUser.userid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_num;
        break;
      }

      // required string num = 2;
      case 2: {
        if (tag == 18) {
         parse_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.SellUser.num");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_deal;
        break;
      }

      // required string deal = 3;
      case 3: {
        if (tag == 26) {
         parse_deal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deal()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->deal().data(), this->deal().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.SellUser.deal");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_xnb;
        break;
      }

      // required uint64 xnb = 4;
      case 4: {
        if (tag == 32) {
         parse_xnb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xnb_)));
          set_has_xnb();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_xnbd;
        break;
      }

      // required uint64 xnbd = 5;
      case 5: {
        if (tag == 40) {
         parse_xnbd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &xnbd_)));
          set_has_xnbd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.matcheddata.SellUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.matcheddata.SellUser)
  return false;
#undef DO_
}

void matcheddata_SellUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.matcheddata.SellUser)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.userid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->userid(), output);
  }

  // required string num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->num(), output);
  }

  // required string deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deal().data(), this->deal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.deal");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deal(), output);
  }

  // required uint64 xnb = 4;
  if (has_xnb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->xnb(), output);
  }

  // required uint64 xnbd = 5;
  if (has_xnbd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->xnbd(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.matcheddata.SellUser)
}

::google::protobuf::uint8* matcheddata_SellUser::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.matcheddata.SellUser)
  // required string userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.userid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->num(), target);
  }

  // required string deal = 3;
  if (has_deal()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->deal().data(), this->deal().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.SellUser.deal");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deal(), target);
  }

  // required uint64 xnb = 4;
  if (has_xnb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->xnb(), target);
  }

  // required uint64 xnbd = 5;
  if (has_xnbd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->xnbd(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.matcheddata.SellUser)
  return target;
}

int matcheddata_SellUser::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.matcheddata.SellUser)
  int total_size = 0;

  if (has_userid()) {
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());
  }

  if (has_num()) {
    // required string num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->num());
  }

  if (has_deal()) {
    // required string deal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deal());
  }

  if (has_xnb()) {
    // required uint64 xnb = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->xnb());
  }

  if (has_xnbd()) {
    // required uint64 xnbd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->xnbd());
  }

  return total_size;
}
int matcheddata_SellUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.matcheddata.SellUser)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string userid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->userid());

    // required string num = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->num());

    // required string deal = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deal());

    // required uint64 xnb = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->xnb());

    // required uint64 xnbd = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->xnbd());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void matcheddata_SellUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.matcheddata.SellUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const matcheddata_SellUser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const matcheddata_SellUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.matcheddata.SellUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.matcheddata.SellUser)
    MergeFrom(*source);
  }
}

void matcheddata_SellUser::MergeFrom(const matcheddata_SellUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.matcheddata.SellUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_has_userid();
      userid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.userid_);
    }
    if (from.has_num()) {
      set_has_num();
      num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_);
    }
    if (from.has_deal()) {
      set_has_deal();
      deal_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deal_);
    }
    if (from.has_xnb()) {
      set_xnb(from.xnb());
    }
    if (from.has_xnbd()) {
      set_xnbd(from.xnbd());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void matcheddata_SellUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.matcheddata.SellUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matcheddata_SellUser::CopyFrom(const matcheddata_SellUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.matcheddata.SellUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matcheddata_SellUser::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void matcheddata_SellUser::Swap(matcheddata_SellUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matcheddata_SellUser::InternalSwap(matcheddata_SellUser* other) {
  userid_.Swap(&other->userid_);
  num_.Swap(&other->num_);
  deal_.Swap(&other->deal_);
  std::swap(xnb_, other->xnb_);
  std::swap(xnbd_, other->xnbd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata matcheddata_SellUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = matcheddata_SellUser_descriptor_;
  metadata.reflection = matcheddata_SellUser_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int matcheddata::kAddtimeFieldNumber;
const int matcheddata::kIdFieldNumber;
const int matcheddata::kPriceFieldNumber;
const int matcheddata::kBuyuserFieldNumber;
const int matcheddata::kSelluserFieldNumber;
const int matcheddata::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

matcheddata::matcheddata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.matcheddata)
}

void matcheddata::InitAsDefaultInstance() {
  buyuser_ = const_cast< ::ukex::matcheddata_BuyUser*>(&::ukex::matcheddata_BuyUser::default_instance());
  selluser_ = const_cast< ::ukex::matcheddata_SellUser*>(&::ukex::matcheddata_SellUser::default_instance());
}

matcheddata::matcheddata(const matcheddata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.matcheddata)
}

void matcheddata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  addtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  buyuser_ = NULL;
  selluser_ = NULL;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

matcheddata::~matcheddata() {
  // @@protoc_insertion_point(destructor:ukex.matcheddata)
  SharedDtor();
}

void matcheddata::SharedDtor() {
  addtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete buyuser_;
    delete selluser_;
  }
}

void matcheddata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* matcheddata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return matcheddata_descriptor_;
}

const matcheddata& matcheddata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ematcheddata_2eproto();
  return *default_instance_;
}

matcheddata* matcheddata::default_instance_ = NULL;

matcheddata* matcheddata::New(::google::protobuf::Arena* arena) const {
  matcheddata* n = new matcheddata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void matcheddata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.matcheddata)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_addtime()) {
      addtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = GOOGLE_ULONGLONG(0);
    if (has_price()) {
      price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_buyuser()) {
      if (buyuser_ != NULL) buyuser_->::ukex::matcheddata_BuyUser::Clear();
    }
    if (has_selluser()) {
      if (selluser_ != NULL) selluser_->::ukex::matcheddata_SellUser::Clear();
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool matcheddata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.matcheddata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string addtime = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addtime().data(), this->addtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.addtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_price;
        break;
      }

      // required string price = 3;
      case 3: {
        if (tag == 26) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_buyuser;
        break;
      }

      // required .ukex.matcheddata.BuyUser buyuser = 4;
      case 4: {
        if (tag == 34) {
         parse_buyuser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyuser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_selluser;
        break;
      }

      // required .ukex.matcheddata.SellUser selluser = 5;
      case 5: {
        if (tag == 42) {
         parse_selluser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selluser()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_token;
        break;
      }

      // optional string token = 6;
      case 6: {
        if (tag == 50) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.matcheddata.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.matcheddata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.matcheddata)
  return false;
#undef DO_
}

void matcheddata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.matcheddata)
  // required string addtime = 1;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.addtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->addtime(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // required string price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->price(), output);
  }

  // required .ukex.matcheddata.BuyUser buyuser = 4;
  if (has_buyuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->buyuser_, output);
  }

  // required .ukex.matcheddata.SellUser selluser = 5;
  if (has_selluser()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->selluser_, output);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.matcheddata)
}

::google::protobuf::uint8* matcheddata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.matcheddata)
  // required string addtime = 1;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.addtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->addtime(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // required string price = 3;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->price(), target);
  }

  // required .ukex.matcheddata.BuyUser buyuser = 4;
  if (has_buyuser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->buyuser_, false, target);
  }

  // required .ukex.matcheddata.SellUser selluser = 5;
  if (has_selluser()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->selluser_, false, target);
  }

  // optional string token = 6;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.matcheddata.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.matcheddata)
  return target;
}

int matcheddata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.matcheddata)
  int total_size = 0;

  if (has_addtime()) {
    // required string addtime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addtime());
  }

  if (has_id()) {
    // required uint64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }

  if (has_price()) {
    // required string price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price());
  }

  if (has_buyuser()) {
    // required .ukex.matcheddata.BuyUser buyuser = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buyuser_);
  }

  if (has_selluser()) {
    // required .ukex.matcheddata.SellUser selluser = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selluser_);
  }

  return total_size;
}
int matcheddata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.matcheddata)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string addtime = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addtime());

    // required uint64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());

    // required string price = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price());

    // required .ukex.matcheddata.BuyUser buyuser = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->buyuser_);

    // required .ukex.matcheddata.SellUser selluser = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->selluser_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string token = 6;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void matcheddata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.matcheddata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const matcheddata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const matcheddata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.matcheddata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.matcheddata)
    MergeFrom(*source);
  }
}

void matcheddata::MergeFrom(const matcheddata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.matcheddata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addtime()) {
      set_has_addtime();
      addtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addtime_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_price()) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (from.has_buyuser()) {
      mutable_buyuser()->::ukex::matcheddata_BuyUser::MergeFrom(from.buyuser());
    }
    if (from.has_selluser()) {
      mutable_selluser()->::ukex::matcheddata_SellUser::MergeFrom(from.selluser());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void matcheddata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.matcheddata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void matcheddata::CopyFrom(const matcheddata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.matcheddata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool matcheddata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_buyuser()) {
    if (!this->buyuser_->IsInitialized()) return false;
  }
  if (has_selluser()) {
    if (!this->selluser_->IsInitialized()) return false;
  }
  return true;
}

void matcheddata::Swap(matcheddata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void matcheddata::InternalSwap(matcheddata* other) {
  addtime_.Swap(&other->addtime_);
  std::swap(id_, other->id_);
  price_.Swap(&other->price_);
  std::swap(buyuser_, other->buyuser_);
  std::swap(selluser_, other->selluser_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata matcheddata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = matcheddata_descriptor_;
  metadata.reflection = matcheddata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// matcheddata_BuyUser

// required string userid = 1;
bool matcheddata_BuyUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void matcheddata_BuyUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void matcheddata_BuyUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void matcheddata_BuyUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& matcheddata_BuyUser::userid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_BuyUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.userid)
}
 void matcheddata_BuyUser::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.userid)
}
 void matcheddata_BuyUser::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.userid)
}
 ::std::string* matcheddata_BuyUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata_BuyUser::release_userid() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_BuyUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.userid)
}

// required string num = 2;
bool matcheddata_BuyUser::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void matcheddata_BuyUser::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void matcheddata_BuyUser::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void matcheddata_BuyUser::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
 const ::std::string& matcheddata_BuyUser::num() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.num)
  return num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_BuyUser::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.num)
}
 void matcheddata_BuyUser::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.num)
}
 void matcheddata_BuyUser::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.num)
}
 ::std::string* matcheddata_BuyUser::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata_BuyUser::release_num() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_BuyUser::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.num)
}

// required string deal = 3;
bool matcheddata_BuyUser::has_deal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void matcheddata_BuyUser::set_has_deal() {
  _has_bits_[0] |= 0x00000004u;
}
void matcheddata_BuyUser::clear_has_deal() {
  _has_bits_[0] &= ~0x00000004u;
}
void matcheddata_BuyUser::clear_deal() {
  deal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deal();
}
 const ::std::string& matcheddata_BuyUser::deal() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.deal)
  return deal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_BuyUser::set_deal(const ::std::string& value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.deal)
}
 void matcheddata_BuyUser::set_deal(const char* value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.BuyUser.deal)
}
 void matcheddata_BuyUser::set_deal(const char* value, size_t size) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.BuyUser.deal)
}
 ::std::string* matcheddata_BuyUser::mutable_deal() {
  set_has_deal();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.BuyUser.deal)
  return deal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata_BuyUser::release_deal() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.BuyUser.deal)
  clear_has_deal();
  return deal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_BuyUser::set_allocated_deal(::std::string* deal) {
  if (deal != NULL) {
    set_has_deal();
  } else {
    clear_has_deal();
  }
  deal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deal);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.BuyUser.deal)
}

// required uint64 cny = 4;
bool matcheddata_BuyUser::has_cny() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void matcheddata_BuyUser::set_has_cny() {
  _has_bits_[0] |= 0x00000008u;
}
void matcheddata_BuyUser::clear_has_cny() {
  _has_bits_[0] &= ~0x00000008u;
}
void matcheddata_BuyUser::clear_cny() {
  cny_ = GOOGLE_ULONGLONG(0);
  clear_has_cny();
}
 ::google::protobuf::uint64 matcheddata_BuyUser::cny() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.cny)
  return cny_;
}
 void matcheddata_BuyUser::set_cny(::google::protobuf::uint64 value) {
  set_has_cny();
  cny_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.cny)
}

// required uint64 cnyd = 5;
bool matcheddata_BuyUser::has_cnyd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void matcheddata_BuyUser::set_has_cnyd() {
  _has_bits_[0] |= 0x00000010u;
}
void matcheddata_BuyUser::clear_has_cnyd() {
  _has_bits_[0] &= ~0x00000010u;
}
void matcheddata_BuyUser::clear_cnyd() {
  cnyd_ = GOOGLE_ULONGLONG(0);
  clear_has_cnyd();
}
 ::google::protobuf::uint64 matcheddata_BuyUser::cnyd() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.BuyUser.cnyd)
  return cnyd_;
}
 void matcheddata_BuyUser::set_cnyd(::google::protobuf::uint64 value) {
  set_has_cnyd();
  cnyd_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.BuyUser.cnyd)
}

// -------------------------------------------------------------------

// matcheddata_SellUser

// required string userid = 1;
bool matcheddata_SellUser::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void matcheddata_SellUser::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
void matcheddata_SellUser::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
void matcheddata_SellUser::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_userid();
}
 const ::std::string& matcheddata_SellUser::userid() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.userid)
  return userid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_SellUser::set_userid(const ::std::string& value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.userid)
}
 void matcheddata_SellUser::set_userid(const char* value) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.userid)
}
 void matcheddata_SellUser::set_userid(const char* value, size_t size) {
  set_has_userid();
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.userid)
}
 ::std::string* matcheddata_SellUser::mutable_userid() {
  set_has_userid();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.userid)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata_SellUser::release_userid() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.userid)
  clear_has_userid();
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_SellUser::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    set_has_userid();
  } else {
    clear_has_userid();
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.userid)
}

// required string num = 2;
bool matcheddata_SellUser::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void matcheddata_SellUser::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
void matcheddata_SellUser::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void matcheddata_SellUser::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
 const ::std::string& matcheddata_SellUser::num() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.num)
  return num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_SellUser::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.num)
}
 void matcheddata_SellUser::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.num)
}
 void matcheddata_SellUser::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.num)
}
 ::std::string* matcheddata_SellUser::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata_SellUser::release_num() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_SellUser::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.num)
}

// required string deal = 3;
bool matcheddata_SellUser::has_deal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void matcheddata_SellUser::set_has_deal() {
  _has_bits_[0] |= 0x00000004u;
}
void matcheddata_SellUser::clear_has_deal() {
  _has_bits_[0] &= ~0x00000004u;
}
void matcheddata_SellUser::clear_deal() {
  deal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_deal();
}
 const ::std::string& matcheddata_SellUser::deal() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.deal)
  return deal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_SellUser::set_deal(const ::std::string& value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.deal)
}
 void matcheddata_SellUser::set_deal(const char* value) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.SellUser.deal)
}
 void matcheddata_SellUser::set_deal(const char* value, size_t size) {
  set_has_deal();
  deal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.SellUser.deal)
}
 ::std::string* matcheddata_SellUser::mutable_deal() {
  set_has_deal();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.SellUser.deal)
  return deal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata_SellUser::release_deal() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.SellUser.deal)
  clear_has_deal();
  return deal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata_SellUser::set_allocated_deal(::std::string* deal) {
  if (deal != NULL) {
    set_has_deal();
  } else {
    clear_has_deal();
  }
  deal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deal);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.SellUser.deal)
}

// required uint64 xnb = 4;
bool matcheddata_SellUser::has_xnb() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void matcheddata_SellUser::set_has_xnb() {
  _has_bits_[0] |= 0x00000008u;
}
void matcheddata_SellUser::clear_has_xnb() {
  _has_bits_[0] &= ~0x00000008u;
}
void matcheddata_SellUser::clear_xnb() {
  xnb_ = GOOGLE_ULONGLONG(0);
  clear_has_xnb();
}
 ::google::protobuf::uint64 matcheddata_SellUser::xnb() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.xnb)
  return xnb_;
}
 void matcheddata_SellUser::set_xnb(::google::protobuf::uint64 value) {
  set_has_xnb();
  xnb_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.xnb)
}

// required uint64 xnbd = 5;
bool matcheddata_SellUser::has_xnbd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void matcheddata_SellUser::set_has_xnbd() {
  _has_bits_[0] |= 0x00000010u;
}
void matcheddata_SellUser::clear_has_xnbd() {
  _has_bits_[0] &= ~0x00000010u;
}
void matcheddata_SellUser::clear_xnbd() {
  xnbd_ = GOOGLE_ULONGLONG(0);
  clear_has_xnbd();
}
 ::google::protobuf::uint64 matcheddata_SellUser::xnbd() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.SellUser.xnbd)
  return xnbd_;
}
 void matcheddata_SellUser::set_xnbd(::google::protobuf::uint64 value) {
  set_has_xnbd();
  xnbd_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.SellUser.xnbd)
}

// -------------------------------------------------------------------

// matcheddata

// required string addtime = 1;
bool matcheddata::has_addtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void matcheddata::set_has_addtime() {
  _has_bits_[0] |= 0x00000001u;
}
void matcheddata::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000001u;
}
void matcheddata::clear_addtime() {
  addtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addtime();
}
 const ::std::string& matcheddata::addtime() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.addtime)
  return addtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata::set_addtime(const ::std::string& value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.addtime)
}
 void matcheddata::set_addtime(const char* value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.addtime)
}
 void matcheddata::set_addtime(const char* value, size_t size) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.addtime)
}
 ::std::string* matcheddata::mutable_addtime() {
  set_has_addtime();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.addtime)
  return addtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata::release_addtime() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.addtime)
  clear_has_addtime();
  return addtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata::set_allocated_addtime(::std::string* addtime) {
  if (addtime != NULL) {
    set_has_addtime();
  } else {
    clear_has_addtime();
  }
  addtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtime);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.addtime)
}

// required uint64 id = 2;
bool matcheddata::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void matcheddata::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void matcheddata::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void matcheddata::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 matcheddata::id() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.id)
  return id_;
}
 void matcheddata::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ukex.matcheddata.id)
}

// required string price = 3;
bool matcheddata::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void matcheddata::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
void matcheddata::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
void matcheddata::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
 const ::std::string& matcheddata::price() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.price)
  return price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.price)
}
 void matcheddata::set_price(const char* value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.price)
}
 void matcheddata::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.price)
}
 ::std::string* matcheddata::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata::release_price() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.price)
}

// required .ukex.matcheddata.BuyUser buyuser = 4;
bool matcheddata::has_buyuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void matcheddata::set_has_buyuser() {
  _has_bits_[0] |= 0x00000008u;
}
void matcheddata::clear_has_buyuser() {
  _has_bits_[0] &= ~0x00000008u;
}
void matcheddata::clear_buyuser() {
  if (buyuser_ != NULL) buyuser_->::ukex::matcheddata_BuyUser::Clear();
  clear_has_buyuser();
}
const ::ukex::matcheddata_BuyUser& matcheddata::buyuser() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.buyuser)
  return buyuser_ != NULL ? *buyuser_ : *default_instance_->buyuser_;
}
::ukex::matcheddata_BuyUser* matcheddata::mutable_buyuser() {
  set_has_buyuser();
  if (buyuser_ == NULL) {
    buyuser_ = new ::ukex::matcheddata_BuyUser;
  }
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.buyuser)
  return buyuser_;
}
::ukex::matcheddata_BuyUser* matcheddata::release_buyuser() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.buyuser)
  clear_has_buyuser();
  ::ukex::matcheddata_BuyUser* temp = buyuser_;
  buyuser_ = NULL;
  return temp;
}
void matcheddata::set_allocated_buyuser(::ukex::matcheddata_BuyUser* buyuser) {
  delete buyuser_;
  buyuser_ = buyuser;
  if (buyuser) {
    set_has_buyuser();
  } else {
    clear_has_buyuser();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.buyuser)
}

// required .ukex.matcheddata.SellUser selluser = 5;
bool matcheddata::has_selluser() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void matcheddata::set_has_selluser() {
  _has_bits_[0] |= 0x00000010u;
}
void matcheddata::clear_has_selluser() {
  _has_bits_[0] &= ~0x00000010u;
}
void matcheddata::clear_selluser() {
  if (selluser_ != NULL) selluser_->::ukex::matcheddata_SellUser::Clear();
  clear_has_selluser();
}
const ::ukex::matcheddata_SellUser& matcheddata::selluser() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.selluser)
  return selluser_ != NULL ? *selluser_ : *default_instance_->selluser_;
}
::ukex::matcheddata_SellUser* matcheddata::mutable_selluser() {
  set_has_selluser();
  if (selluser_ == NULL) {
    selluser_ = new ::ukex::matcheddata_SellUser;
  }
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.selluser)
  return selluser_;
}
::ukex::matcheddata_SellUser* matcheddata::release_selluser() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.selluser)
  clear_has_selluser();
  ::ukex::matcheddata_SellUser* temp = selluser_;
  selluser_ = NULL;
  return temp;
}
void matcheddata::set_allocated_selluser(::ukex::matcheddata_SellUser* selluser) {
  delete selluser_;
  selluser_ = selluser;
  if (selluser) {
    set_has_selluser();
  } else {
    clear_has_selluser();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.selluser)
}

// optional string token = 6;
bool matcheddata::has_token() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void matcheddata::set_has_token() {
  _has_bits_[0] |= 0x00000020u;
}
void matcheddata::clear_has_token() {
  _has_bits_[0] &= ~0x00000020u;
}
void matcheddata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& matcheddata::token() const {
  // @@protoc_insertion_point(field_get:ukex.matcheddata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.matcheddata.token)
}
 void matcheddata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.matcheddata.token)
}
 void matcheddata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.matcheddata.token)
}
 ::std::string* matcheddata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.matcheddata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* matcheddata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.matcheddata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void matcheddata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.matcheddata.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
