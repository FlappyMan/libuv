// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.canceltrade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.canceltrade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* canceltrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  canceltrade_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* canceltrade_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2ecanceltrade_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2ecanceltrade_2eproto() {
  protobuf_AddDesc_ukex_2ecanceltrade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.canceltrade.proto");
  GOOGLE_CHECK(file != NULL);
  canceltrade_descriptor_ = file->message_type(0);
  static const int canceltrade_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canceltrade, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canceltrade, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canceltrade, marketid_),
  };
  canceltrade_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      canceltrade_descriptor_,
      canceltrade::default_instance_,
      canceltrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canceltrade, _has_bits_[0]),
      -1,
      -1,
      sizeof(canceltrade),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(canceltrade, _internal_metadata_),
      -1);
  canceltrade_CONST_descriptor_ = canceltrade_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2ecanceltrade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      canceltrade_descriptor_, &canceltrade::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2ecanceltrade_2eproto() {
  delete canceltrade::default_instance_;
  delete canceltrade_reflection_;
}

void protobuf_AddDesc_ukex_2ecanceltrade_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2ecanceltrade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ukex.canceltrade.proto\022\004ukex\"L\n\013cancel"
    "trade\022\r\n\005token\030\001 \001(\t\022\n\n\002id\030\002 \002(\004\022\020\n\010mark"
    "etid\030\003 \001(\004\"\020\n\005CONST\022\007\n\003CMD\020f", 108);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.canceltrade.proto", &protobuf_RegisterTypes);
  canceltrade::default_instance_ = new canceltrade();
  canceltrade::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2ecanceltrade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2ecanceltrade_2eproto {
  StaticDescriptorInitializer_ukex_2ecanceltrade_2eproto() {
    protobuf_AddDesc_ukex_2ecanceltrade_2eproto();
  }
} static_descriptor_initializer_ukex_2ecanceltrade_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* canceltrade_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return canceltrade_CONST_descriptor_;
}
bool canceltrade_CONST_IsValid(int value) {
  switch(value) {
    case 102:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const canceltrade_CONST canceltrade::CMD;
const canceltrade_CONST canceltrade::CONST_MIN;
const canceltrade_CONST canceltrade::CONST_MAX;
const int canceltrade::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int canceltrade::kTokenFieldNumber;
const int canceltrade::kIdFieldNumber;
const int canceltrade::kMarketidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

canceltrade::canceltrade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.canceltrade)
}

void canceltrade::InitAsDefaultInstance() {
}

canceltrade::canceltrade(const canceltrade& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.canceltrade)
}

void canceltrade::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
  marketid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

canceltrade::~canceltrade() {
  // @@protoc_insertion_point(destructor:ukex.canceltrade)
  SharedDtor();
}

void canceltrade::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void canceltrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* canceltrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return canceltrade_descriptor_;
}

const canceltrade& canceltrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ecanceltrade_2eproto();
  return *default_instance_;
}

canceltrade* canceltrade::default_instance_ = NULL;

canceltrade* canceltrade::New(::google::protobuf::Arena* arena) const {
  canceltrade* n = new canceltrade;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void canceltrade::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.canceltrade)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(canceltrade, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<canceltrade*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(id_, marketid_);
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool canceltrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.canceltrade)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.canceltrade.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_marketid;
        break;
      }

      // optional uint64 marketid = 3;
      case 3: {
        if (tag == 24) {
         parse_marketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &marketid_)));
          set_has_marketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.canceltrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.canceltrade)
  return false;
#undef DO_
}

void canceltrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.canceltrade)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.canceltrade.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint64 marketid = 3;
  if (has_marketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->marketid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.canceltrade)
}

::google::protobuf::uint8* canceltrade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.canceltrade)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.canceltrade.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint64 marketid = 3;
  if (has_marketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->marketid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.canceltrade)
  return target;
}

int canceltrade::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.canceltrade)
  int total_size = 0;

  // required uint64 id = 2;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->id());
  }
  if (_has_bits_[0 / 32] & 5u) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 marketid = 3;
    if (has_marketid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->marketid());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void canceltrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.canceltrade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const canceltrade* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const canceltrade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.canceltrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.canceltrade)
    MergeFrom(*source);
  }
}

void canceltrade::MergeFrom(const canceltrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.canceltrade)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_marketid()) {
      set_marketid(from.marketid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void canceltrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.canceltrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void canceltrade::CopyFrom(const canceltrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.canceltrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool canceltrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void canceltrade::Swap(canceltrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void canceltrade::InternalSwap(canceltrade* other) {
  token_.Swap(&other->token_);
  std::swap(id_, other->id_);
  std::swap(marketid_, other->marketid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata canceltrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = canceltrade_descriptor_;
  metadata.reflection = canceltrade_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// canceltrade

// optional string token = 1;
bool canceltrade::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void canceltrade::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void canceltrade::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void canceltrade::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& canceltrade::token() const {
  // @@protoc_insertion_point(field_get:ukex.canceltrade.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void canceltrade::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.canceltrade.token)
}
 void canceltrade::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.canceltrade.token)
}
 void canceltrade::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.canceltrade.token)
}
 ::std::string* canceltrade::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.canceltrade.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* canceltrade::release_token() {
  // @@protoc_insertion_point(field_release:ukex.canceltrade.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void canceltrade::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.canceltrade.token)
}

// required uint64 id = 2;
bool canceltrade::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void canceltrade::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void canceltrade::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void canceltrade::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::uint64 canceltrade::id() const {
  // @@protoc_insertion_point(field_get:ukex.canceltrade.id)
  return id_;
}
 void canceltrade::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:ukex.canceltrade.id)
}

// optional uint64 marketid = 3;
bool canceltrade::has_marketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void canceltrade::set_has_marketid() {
  _has_bits_[0] |= 0x00000004u;
}
void canceltrade::clear_has_marketid() {
  _has_bits_[0] &= ~0x00000004u;
}
void canceltrade::clear_marketid() {
  marketid_ = GOOGLE_ULONGLONG(0);
  clear_has_marketid();
}
 ::google::protobuf::uint64 canceltrade::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.canceltrade.marketid)
  return marketid_;
}
 void canceltrade::set_marketid(::google::protobuf::uint64 value) {
  set_has_marketid();
  marketid_ = value;
  // @@protoc_insertion_point(field_set:ukex.canceltrade.marketid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
