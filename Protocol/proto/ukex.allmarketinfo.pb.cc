// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.allmarketinfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.allmarketinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* allmarketinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  allmarketinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* allmarketinfo_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  allmarketinfo_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* allmarketinfo_Exchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  allmarketinfo_Exchange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* allmarketinfo_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto() {
  protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.allmarketinfo.proto");
  GOOGLE_CHECK(file != NULL);
  allmarketinfo_descriptor_ = file->message_type(0);
  static const int allmarketinfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, marketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, token_),
  };
  allmarketinfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      allmarketinfo_descriptor_,
      allmarketinfo::default_instance_,
      allmarketinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(allmarketinfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo, _internal_metadata_),
      -1);
  allmarketinfo_Data_descriptor_ = allmarketinfo_descriptor_->nested_type(0);
  static const int allmarketinfo_Data_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, m13_),
  };
  allmarketinfo_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      allmarketinfo_Data_descriptor_,
      allmarketinfo_Data::default_instance_,
      allmarketinfo_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, _has_bits_[0]),
      -1,
      -1,
      sizeof(allmarketinfo_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Data, _internal_metadata_),
      -1);
  allmarketinfo_Exchange_descriptor_ = allmarketinfo_descriptor_->nested_type(1);
  static const int allmarketinfo_Exchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Exchange, btc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Exchange, eth_),
  };
  allmarketinfo_Exchange_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      allmarketinfo_Exchange_descriptor_,
      allmarketinfo_Exchange::default_instance_,
      allmarketinfo_Exchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Exchange, _has_bits_[0]),
      -1,
      -1,
      sizeof(allmarketinfo_Exchange),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(allmarketinfo_Exchange, _internal_metadata_),
      -1);
  allmarketinfo_CONST_descriptor_ = allmarketinfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2eallmarketinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      allmarketinfo_descriptor_, &allmarketinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      allmarketinfo_Data_descriptor_, &allmarketinfo_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      allmarketinfo_Exchange_descriptor_, &allmarketinfo_Exchange::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2eallmarketinfo_2eproto() {
  delete allmarketinfo::default_instance_;
  delete allmarketinfo_reflection_;
  delete allmarketinfo_Data::default_instance_;
  delete allmarketinfo_Data_reflection_;
  delete allmarketinfo_Exchange::default_instance_;
  delete allmarketinfo_Exchange_reflection_;
}

void protobuf_AddDesc_ukex_2eallmarketinfo_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2eallmarketinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030ukex.allmarketinfo.proto\022\004ukex\"\203\003\n\rall"
    "marketinfo\022\014\n\004type\030\001 \002(\t\022&\n\004data\030\002 \003(\0132\030"
    ".ukex.allmarketinfo.Data\022\020\n\010marketid\030\003 \002"
    "(\004\022.\n\010exchange\030\004 \002(\0132\034.ukex.allmarketinf"
    "o.Exchange\022\r\n\005token\030\005 \001(\t\032\262\001\n\004Data\022\n\n\002m0"
    "\030\001 \002(\t\022\n\n\002m1\030\002 \002(\t\022\n\n\002m2\030\003 \002(\t\022\n\n\002m3\030\004 \002"
    "(\t\022\n\n\002m4\030\005 \002(\t\022\n\n\002m5\030\006 \002(\t\022\n\n\002m6\030\007 \002(\t\022\n"
    "\n\002m7\030\010 \002(\t\022\n\n\002m8\030\t \002(\t\022\n\n\002m9\030\n \002(\t\022\013\n\003m1"
    "0\030\013 \002(\t\022\013\n\003m11\030\014 \002(\t\022\013\n\003m12\030\r \002(\t\022\013\n\003m13"
    "\030\016 \002(\t\032$\n\010Exchange\022\013\n\003btc\030\001 \002(\t\022\013\n\003eth\030\002"
    " \002(\t\"\020\n\005CONST\022\007\n\003CMD\020h", 422);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.allmarketinfo.proto", &protobuf_RegisterTypes);
  allmarketinfo::default_instance_ = new allmarketinfo();
  allmarketinfo_Data::default_instance_ = new allmarketinfo_Data();
  allmarketinfo_Exchange::default_instance_ = new allmarketinfo_Exchange();
  allmarketinfo::default_instance_->InitAsDefaultInstance();
  allmarketinfo_Data::default_instance_->InitAsDefaultInstance();
  allmarketinfo_Exchange::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2eallmarketinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2eallmarketinfo_2eproto {
  StaticDescriptorInitializer_ukex_2eallmarketinfo_2eproto() {
    protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  }
} static_descriptor_initializer_ukex_2eallmarketinfo_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* allmarketinfo_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return allmarketinfo_CONST_descriptor_;
}
bool allmarketinfo_CONST_IsValid(int value) {
  switch(value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const allmarketinfo_CONST allmarketinfo::CMD;
const allmarketinfo_CONST allmarketinfo::CONST_MIN;
const allmarketinfo_CONST allmarketinfo::CONST_MAX;
const int allmarketinfo::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allmarketinfo_Data::kM0FieldNumber;
const int allmarketinfo_Data::kM1FieldNumber;
const int allmarketinfo_Data::kM2FieldNumber;
const int allmarketinfo_Data::kM3FieldNumber;
const int allmarketinfo_Data::kM4FieldNumber;
const int allmarketinfo_Data::kM5FieldNumber;
const int allmarketinfo_Data::kM6FieldNumber;
const int allmarketinfo_Data::kM7FieldNumber;
const int allmarketinfo_Data::kM8FieldNumber;
const int allmarketinfo_Data::kM9FieldNumber;
const int allmarketinfo_Data::kM10FieldNumber;
const int allmarketinfo_Data::kM11FieldNumber;
const int allmarketinfo_Data::kM12FieldNumber;
const int allmarketinfo_Data::kM13FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allmarketinfo_Data::allmarketinfo_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.allmarketinfo.Data)
}

void allmarketinfo_Data::InitAsDefaultInstance() {
}

allmarketinfo_Data::allmarketinfo_Data(const allmarketinfo_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.allmarketinfo.Data)
}

void allmarketinfo_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  m0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m6_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m7_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m9_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m10_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m11_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m12_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m13_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

allmarketinfo_Data::~allmarketinfo_Data() {
  // @@protoc_insertion_point(destructor:ukex.allmarketinfo.Data)
  SharedDtor();
}

void allmarketinfo_Data::SharedDtor() {
  m0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m6_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m7_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m9_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m10_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m11_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m12_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  m13_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void allmarketinfo_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allmarketinfo_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return allmarketinfo_Data_descriptor_;
}

const allmarketinfo_Data& allmarketinfo_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  return *default_instance_;
}

allmarketinfo_Data* allmarketinfo_Data::default_instance_ = NULL;

allmarketinfo_Data* allmarketinfo_Data::New(::google::protobuf::Arena* arena) const {
  allmarketinfo_Data* n = new allmarketinfo_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void allmarketinfo_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.allmarketinfo.Data)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_m0()) {
      m0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m1()) {
      m1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m2()) {
      m2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m3()) {
      m3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m4()) {
      m4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m5()) {
      m5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m6()) {
      m6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m7()) {
      m7_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_m8()) {
      m8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m9()) {
      m9_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m10()) {
      m10_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m11()) {
      m11_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m12()) {
      m12_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_m13()) {
      m13_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool allmarketinfo_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.allmarketinfo.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string m0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m0().data(), this->m0().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m0");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_m1;
        break;
      }

      // required string m1 = 2;
      case 2: {
        if (tag == 18) {
         parse_m1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m1().data(), this->m1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_m2;
        break;
      }

      // required string m2 = 3;
      case 3: {
        if (tag == 26) {
         parse_m2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m2().data(), this->m2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_m3;
        break;
      }

      // required string m3 = 4;
      case 4: {
        if (tag == 34) {
         parse_m3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m3().data(), this->m3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_m4;
        break;
      }

      // required string m4 = 5;
      case 5: {
        if (tag == 42) {
         parse_m4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m4().data(), this->m4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_m5;
        break;
      }

      // required string m5 = 6;
      case 6: {
        if (tag == 50) {
         parse_m5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m5().data(), this->m5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_m6;
        break;
      }

      // required string m6 = 7;
      case 7: {
        if (tag == 58) {
         parse_m6:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m6()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m6().data(), this->m6().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m6");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_m7;
        break;
      }

      // required string m7 = 8;
      case 8: {
        if (tag == 66) {
         parse_m7:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m7()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m7().data(), this->m7().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m7");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_m8;
        break;
      }

      // required string m8 = 9;
      case 9: {
        if (tag == 74) {
         parse_m8:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m8()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m8().data(), this->m8().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m8");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_m9;
        break;
      }

      // required string m9 = 10;
      case 10: {
        if (tag == 82) {
         parse_m9:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m9()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m9().data(), this->m9().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m9");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_m10;
        break;
      }

      // required string m10 = 11;
      case 11: {
        if (tag == 90) {
         parse_m10:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m10()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m10().data(), this->m10().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m10");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_m11;
        break;
      }

      // required string m11 = 12;
      case 12: {
        if (tag == 98) {
         parse_m11:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m11()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m11().data(), this->m11().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m11");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_m12;
        break;
      }

      // required string m12 = 13;
      case 13: {
        if (tag == 106) {
         parse_m12:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m12()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m12().data(), this->m12().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m12");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_m13;
        break;
      }

      // required string m13 = 14;
      case 14: {
        if (tag == 114) {
         parse_m13:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m13()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->m13().data(), this->m13().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Data.m13");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.allmarketinfo.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.allmarketinfo.Data)
  return false;
#undef DO_
}

void allmarketinfo_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.allmarketinfo.Data)
  // required string m0 = 1;
  if (has_m0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m0().data(), this->m0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->m0(), output);
  }

  // required string m1 = 2;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m1().data(), this->m1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->m1(), output);
  }

  // required string m2 = 3;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m2().data(), this->m2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->m2(), output);
  }

  // required string m3 = 4;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m3().data(), this->m3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->m3(), output);
  }

  // required string m4 = 5;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m4().data(), this->m4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->m4(), output);
  }

  // required string m5 = 6;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m5().data(), this->m5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->m5(), output);
  }

  // required string m6 = 7;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m6().data(), this->m6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m6");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->m6(), output);
  }

  // required string m7 = 8;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m7().data(), this->m7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m7");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->m7(), output);
  }

  // required string m8 = 9;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m8().data(), this->m8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m8");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->m8(), output);
  }

  // required string m9 = 10;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m9().data(), this->m9().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m9");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->m9(), output);
  }

  // required string m10 = 11;
  if (has_m10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m10().data(), this->m10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m10");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->m10(), output);
  }

  // required string m11 = 12;
  if (has_m11()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m11().data(), this->m11().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m11");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->m11(), output);
  }

  // required string m12 = 13;
  if (has_m12()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m12().data(), this->m12().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m12");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->m12(), output);
  }

  // required string m13 = 14;
  if (has_m13()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m13().data(), this->m13().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m13");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->m13(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.allmarketinfo.Data)
}

::google::protobuf::uint8* allmarketinfo_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.allmarketinfo.Data)
  // required string m0 = 1;
  if (has_m0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m0().data(), this->m0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m0(), target);
  }

  // required string m1 = 2;
  if (has_m1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m1().data(), this->m1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m1(), target);
  }

  // required string m2 = 3;
  if (has_m2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m2().data(), this->m2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m2(), target);
  }

  // required string m3 = 4;
  if (has_m3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m3().data(), this->m3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m3(), target);
  }

  // required string m4 = 5;
  if (has_m4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m4().data(), this->m4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m4(), target);
  }

  // required string m5 = 6;
  if (has_m5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m5().data(), this->m5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m5(), target);
  }

  // required string m6 = 7;
  if (has_m6()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m6().data(), this->m6().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m6");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m6(), target);
  }

  // required string m7 = 8;
  if (has_m7()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m7().data(), this->m7().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m7");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->m7(), target);
  }

  // required string m8 = 9;
  if (has_m8()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m8().data(), this->m8().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m8");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->m8(), target);
  }

  // required string m9 = 10;
  if (has_m9()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m9().data(), this->m9().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m9");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->m9(), target);
  }

  // required string m10 = 11;
  if (has_m10()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m10().data(), this->m10().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m10");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->m10(), target);
  }

  // required string m11 = 12;
  if (has_m11()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m11().data(), this->m11().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m11");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->m11(), target);
  }

  // required string m12 = 13;
  if (has_m12()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m12().data(), this->m12().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m12");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->m12(), target);
  }

  // required string m13 = 14;
  if (has_m13()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->m13().data(), this->m13().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Data.m13");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->m13(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.allmarketinfo.Data)
  return target;
}

int allmarketinfo_Data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.allmarketinfo.Data)
  int total_size = 0;

  if (has_m0()) {
    // required string m0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m0());
  }

  if (has_m1()) {
    // required string m1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m1());
  }

  if (has_m2()) {
    // required string m2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m2());
  }

  if (has_m3()) {
    // required string m3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m3());
  }

  if (has_m4()) {
    // required string m4 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m4());
  }

  if (has_m5()) {
    // required string m5 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m5());
  }

  if (has_m6()) {
    // required string m6 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m6());
  }

  if (has_m7()) {
    // required string m7 = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m7());
  }

  if (has_m8()) {
    // required string m8 = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m8());
  }

  if (has_m9()) {
    // required string m9 = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m9());
  }

  if (has_m10()) {
    // required string m10 = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m10());
  }

  if (has_m11()) {
    // required string m11 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m11());
  }

  if (has_m12()) {
    // required string m12 = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m12());
  }

  if (has_m13()) {
    // required string m13 = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m13());
  }

  return total_size;
}
int allmarketinfo_Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.allmarketinfo.Data)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string m0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m0());

    // required string m1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m1());

    // required string m2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m2());

    // required string m3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m3());

    // required string m4 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m4());

    // required string m5 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m5());

    // required string m6 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m6());

    // required string m7 = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m7());

    // required string m8 = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m8());

    // required string m9 = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m9());

    // required string m10 = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m10());

    // required string m11 = 12;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m11());

    // required string m12 = 13;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m12());

    // required string m13 = 14;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->m13());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allmarketinfo_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.allmarketinfo.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const allmarketinfo_Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const allmarketinfo_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.allmarketinfo.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.allmarketinfo.Data)
    MergeFrom(*source);
  }
}

void allmarketinfo_Data::MergeFrom(const allmarketinfo_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.allmarketinfo.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m0()) {
      set_has_m0();
      m0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m0_);
    }
    if (from.has_m1()) {
      set_has_m1();
      m1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m1_);
    }
    if (from.has_m2()) {
      set_has_m2();
      m2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m2_);
    }
    if (from.has_m3()) {
      set_has_m3();
      m3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m3_);
    }
    if (from.has_m4()) {
      set_has_m4();
      m4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m4_);
    }
    if (from.has_m5()) {
      set_has_m5();
      m5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m5_);
    }
    if (from.has_m6()) {
      set_has_m6();
      m6_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m6_);
    }
    if (from.has_m7()) {
      set_has_m7();
      m7_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m7_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m8()) {
      set_has_m8();
      m8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m8_);
    }
    if (from.has_m9()) {
      set_has_m9();
      m9_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m9_);
    }
    if (from.has_m10()) {
      set_has_m10();
      m10_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m10_);
    }
    if (from.has_m11()) {
      set_has_m11();
      m11_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m11_);
    }
    if (from.has_m12()) {
      set_has_m12();
      m12_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m12_);
    }
    if (from.has_m13()) {
      set_has_m13();
      m13_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.m13_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void allmarketinfo_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.allmarketinfo.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allmarketinfo_Data::CopyFrom(const allmarketinfo_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.allmarketinfo.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allmarketinfo_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void allmarketinfo_Data::Swap(allmarketinfo_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allmarketinfo_Data::InternalSwap(allmarketinfo_Data* other) {
  m0_.Swap(&other->m0_);
  m1_.Swap(&other->m1_);
  m2_.Swap(&other->m2_);
  m3_.Swap(&other->m3_);
  m4_.Swap(&other->m4_);
  m5_.Swap(&other->m5_);
  m6_.Swap(&other->m6_);
  m7_.Swap(&other->m7_);
  m8_.Swap(&other->m8_);
  m9_.Swap(&other->m9_);
  m10_.Swap(&other->m10_);
  m11_.Swap(&other->m11_);
  m12_.Swap(&other->m12_);
  m13_.Swap(&other->m13_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata allmarketinfo_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = allmarketinfo_Data_descriptor_;
  metadata.reflection = allmarketinfo_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allmarketinfo_Exchange::kBtcFieldNumber;
const int allmarketinfo_Exchange::kEthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allmarketinfo_Exchange::allmarketinfo_Exchange()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.allmarketinfo.Exchange)
}

void allmarketinfo_Exchange::InitAsDefaultInstance() {
}

allmarketinfo_Exchange::allmarketinfo_Exchange(const allmarketinfo_Exchange& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.allmarketinfo.Exchange)
}

void allmarketinfo_Exchange::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  btc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eth_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

allmarketinfo_Exchange::~allmarketinfo_Exchange() {
  // @@protoc_insertion_point(destructor:ukex.allmarketinfo.Exchange)
  SharedDtor();
}

void allmarketinfo_Exchange::SharedDtor() {
  btc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eth_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void allmarketinfo_Exchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allmarketinfo_Exchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return allmarketinfo_Exchange_descriptor_;
}

const allmarketinfo_Exchange& allmarketinfo_Exchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  return *default_instance_;
}

allmarketinfo_Exchange* allmarketinfo_Exchange::default_instance_ = NULL;

allmarketinfo_Exchange* allmarketinfo_Exchange::New(::google::protobuf::Arena* arena) const {
  allmarketinfo_Exchange* n = new allmarketinfo_Exchange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void allmarketinfo_Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.allmarketinfo.Exchange)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_btc()) {
      btc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_eth()) {
      eth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool allmarketinfo_Exchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.allmarketinfo.Exchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string btc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_btc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->btc().data(), this->btc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Exchange.btc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_eth;
        break;
      }

      // required string eth = 2;
      case 2: {
        if (tag == 18) {
         parse_eth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eth().data(), this->eth().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.Exchange.eth");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.allmarketinfo.Exchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.allmarketinfo.Exchange)
  return false;
#undef DO_
}

void allmarketinfo_Exchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.allmarketinfo.Exchange)
  // required string btc = 1;
  if (has_btc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btc().data(), this->btc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Exchange.btc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->btc(), output);
  }

  // required string eth = 2;
  if (has_eth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eth().data(), this->eth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Exchange.eth");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->eth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.allmarketinfo.Exchange)
}

::google::protobuf::uint8* allmarketinfo_Exchange::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.allmarketinfo.Exchange)
  // required string btc = 1;
  if (has_btc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->btc().data(), this->btc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Exchange.btc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->btc(), target);
  }

  // required string eth = 2;
  if (has_eth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eth().data(), this->eth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.Exchange.eth");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->eth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.allmarketinfo.Exchange)
  return target;
}

int allmarketinfo_Exchange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.allmarketinfo.Exchange)
  int total_size = 0;

  if (has_btc()) {
    // required string btc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->btc());
  }

  if (has_eth()) {
    // required string eth = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->eth());
  }

  return total_size;
}
int allmarketinfo_Exchange::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.allmarketinfo.Exchange)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string btc = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->btc());

    // required string eth = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->eth());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allmarketinfo_Exchange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.allmarketinfo.Exchange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const allmarketinfo_Exchange* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const allmarketinfo_Exchange>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.allmarketinfo.Exchange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.allmarketinfo.Exchange)
    MergeFrom(*source);
  }
}

void allmarketinfo_Exchange::MergeFrom(const allmarketinfo_Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.allmarketinfo.Exchange)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_btc()) {
      set_has_btc();
      btc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.btc_);
    }
    if (from.has_eth()) {
      set_has_eth();
      eth_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.eth_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void allmarketinfo_Exchange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.allmarketinfo.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allmarketinfo_Exchange::CopyFrom(const allmarketinfo_Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.allmarketinfo.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allmarketinfo_Exchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void allmarketinfo_Exchange::Swap(allmarketinfo_Exchange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allmarketinfo_Exchange::InternalSwap(allmarketinfo_Exchange* other) {
  btc_.Swap(&other->btc_);
  eth_.Swap(&other->eth_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata allmarketinfo_Exchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = allmarketinfo_Exchange_descriptor_;
  metadata.reflection = allmarketinfo_Exchange_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int allmarketinfo::kTypeFieldNumber;
const int allmarketinfo::kDataFieldNumber;
const int allmarketinfo::kMarketidFieldNumber;
const int allmarketinfo::kExchangeFieldNumber;
const int allmarketinfo::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

allmarketinfo::allmarketinfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.allmarketinfo)
}

void allmarketinfo::InitAsDefaultInstance() {
  exchange_ = const_cast< ::ukex::allmarketinfo_Exchange*>(&::ukex::allmarketinfo_Exchange::default_instance());
}

allmarketinfo::allmarketinfo(const allmarketinfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.allmarketinfo)
}

void allmarketinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  marketid_ = GOOGLE_ULONGLONG(0);
  exchange_ = NULL;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

allmarketinfo::~allmarketinfo() {
  // @@protoc_insertion_point(destructor:ukex.allmarketinfo)
  SharedDtor();
}

void allmarketinfo::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete exchange_;
  }
}

void allmarketinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* allmarketinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return allmarketinfo_descriptor_;
}

const allmarketinfo& allmarketinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2eallmarketinfo_2eproto();
  return *default_instance_;
}

allmarketinfo* allmarketinfo::default_instance_ = NULL;

allmarketinfo* allmarketinfo::New(::google::protobuf::Arena* arena) const {
  allmarketinfo* n = new allmarketinfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void allmarketinfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.allmarketinfo)
  if (_has_bits_[0 / 32] & 29u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    marketid_ = GOOGLE_ULONGLONG(0);
    if (has_exchange()) {
      if (exchange_ != NULL) exchange_->::ukex::allmarketinfo_Exchange::Clear();
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool allmarketinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.allmarketinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .ukex.allmarketinfo.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_marketid;
        break;
      }

      // required uint64 marketid = 3;
      case 3: {
        if (tag == 24) {
         parse_marketid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &marketid_)));
          set_has_marketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_exchange;
        break;
      }

      // required .ukex.allmarketinfo.Exchange exchange = 4;
      case 4: {
        if (tag == 34) {
         parse_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchange()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (tag == 42) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.allmarketinfo.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.allmarketinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.allmarketinfo)
  return false;
#undef DO_
}

void allmarketinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.allmarketinfo)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // repeated .ukex.allmarketinfo.Data data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // required uint64 marketid = 3;
  if (has_marketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->marketid(), output);
  }

  // required .ukex.allmarketinfo.Exchange exchange = 4;
  if (has_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->exchange_, output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.allmarketinfo)
}

::google::protobuf::uint8* allmarketinfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.allmarketinfo)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated .ukex.allmarketinfo.Data data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data(i), false, target);
  }

  // required uint64 marketid = 3;
  if (has_marketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->marketid(), target);
  }

  // required .ukex.allmarketinfo.Exchange exchange = 4;
  if (has_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->exchange_, false, target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.allmarketinfo.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.allmarketinfo)
  return target;
}

int allmarketinfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.allmarketinfo)
  int total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_marketid()) {
    // required uint64 marketid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->marketid());
  }

  if (has_exchange()) {
    // required .ukex.allmarketinfo.Exchange exchange = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exchange_);
  }

  return total_size;
}
int allmarketinfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.allmarketinfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required uint64 marketid = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->marketid());

    // required .ukex.allmarketinfo.Exchange exchange = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->exchange_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string token = 5;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // repeated .ukex.allmarketinfo.Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void allmarketinfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.allmarketinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const allmarketinfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const allmarketinfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.allmarketinfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.allmarketinfo)
    MergeFrom(*source);
  }
}

void allmarketinfo::MergeFrom(const allmarketinfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.allmarketinfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_marketid()) {
      set_marketid(from.marketid());
    }
    if (from.has_exchange()) {
      mutable_exchange()->::ukex::allmarketinfo_Exchange::MergeFrom(from.exchange());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void allmarketinfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.allmarketinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void allmarketinfo::CopyFrom(const allmarketinfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.allmarketinfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool allmarketinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000d) != 0x0000000d) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  if (has_exchange()) {
    if (!this->exchange_->IsInitialized()) return false;
  }
  return true;
}

void allmarketinfo::Swap(allmarketinfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void allmarketinfo::InternalSwap(allmarketinfo* other) {
  type_.Swap(&other->type_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(marketid_, other->marketid_);
  std::swap(exchange_, other->exchange_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata allmarketinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = allmarketinfo_descriptor_;
  metadata.reflection = allmarketinfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// allmarketinfo_Data

// required string m0 = 1;
bool allmarketinfo_Data::has_m0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void allmarketinfo_Data::set_has_m0() {
  _has_bits_[0] |= 0x00000001u;
}
void allmarketinfo_Data::clear_has_m0() {
  _has_bits_[0] &= ~0x00000001u;
}
void allmarketinfo_Data::clear_m0() {
  m0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m0();
}
 const ::std::string& allmarketinfo_Data::m0() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m0)
  return m0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m0(const ::std::string& value) {
  set_has_m0();
  m0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m0)
}
 void allmarketinfo_Data::set_m0(const char* value) {
  set_has_m0();
  m0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m0)
}
 void allmarketinfo_Data::set_m0(const char* value, size_t size) {
  set_has_m0();
  m0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m0)
}
 ::std::string* allmarketinfo_Data::mutable_m0() {
  set_has_m0();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m0)
  return m0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m0() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m0)
  clear_has_m0();
  return m0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m0(::std::string* m0) {
  if (m0 != NULL) {
    set_has_m0();
  } else {
    clear_has_m0();
  }
  m0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m0);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m0)
}

// required string m1 = 2;
bool allmarketinfo_Data::has_m1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void allmarketinfo_Data::set_has_m1() {
  _has_bits_[0] |= 0x00000002u;
}
void allmarketinfo_Data::clear_has_m1() {
  _has_bits_[0] &= ~0x00000002u;
}
void allmarketinfo_Data::clear_m1() {
  m1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m1();
}
 const ::std::string& allmarketinfo_Data::m1() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m1)
  return m1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m1(const ::std::string& value) {
  set_has_m1();
  m1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m1)
}
 void allmarketinfo_Data::set_m1(const char* value) {
  set_has_m1();
  m1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m1)
}
 void allmarketinfo_Data::set_m1(const char* value, size_t size) {
  set_has_m1();
  m1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m1)
}
 ::std::string* allmarketinfo_Data::mutable_m1() {
  set_has_m1();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m1)
  return m1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m1() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m1)
  clear_has_m1();
  return m1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m1(::std::string* m1) {
  if (m1 != NULL) {
    set_has_m1();
  } else {
    clear_has_m1();
  }
  m1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m1);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m1)
}

// required string m2 = 3;
bool allmarketinfo_Data::has_m2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void allmarketinfo_Data::set_has_m2() {
  _has_bits_[0] |= 0x00000004u;
}
void allmarketinfo_Data::clear_has_m2() {
  _has_bits_[0] &= ~0x00000004u;
}
void allmarketinfo_Data::clear_m2() {
  m2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m2();
}
 const ::std::string& allmarketinfo_Data::m2() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m2)
  return m2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m2(const ::std::string& value) {
  set_has_m2();
  m2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m2)
}
 void allmarketinfo_Data::set_m2(const char* value) {
  set_has_m2();
  m2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m2)
}
 void allmarketinfo_Data::set_m2(const char* value, size_t size) {
  set_has_m2();
  m2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m2)
}
 ::std::string* allmarketinfo_Data::mutable_m2() {
  set_has_m2();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m2)
  return m2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m2() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m2)
  clear_has_m2();
  return m2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m2(::std::string* m2) {
  if (m2 != NULL) {
    set_has_m2();
  } else {
    clear_has_m2();
  }
  m2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m2);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m2)
}

// required string m3 = 4;
bool allmarketinfo_Data::has_m3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void allmarketinfo_Data::set_has_m3() {
  _has_bits_[0] |= 0x00000008u;
}
void allmarketinfo_Data::clear_has_m3() {
  _has_bits_[0] &= ~0x00000008u;
}
void allmarketinfo_Data::clear_m3() {
  m3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m3();
}
 const ::std::string& allmarketinfo_Data::m3() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m3)
  return m3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m3(const ::std::string& value) {
  set_has_m3();
  m3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m3)
}
 void allmarketinfo_Data::set_m3(const char* value) {
  set_has_m3();
  m3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m3)
}
 void allmarketinfo_Data::set_m3(const char* value, size_t size) {
  set_has_m3();
  m3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m3)
}
 ::std::string* allmarketinfo_Data::mutable_m3() {
  set_has_m3();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m3)
  return m3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m3() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m3)
  clear_has_m3();
  return m3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m3(::std::string* m3) {
  if (m3 != NULL) {
    set_has_m3();
  } else {
    clear_has_m3();
  }
  m3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m3);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m3)
}

// required string m4 = 5;
bool allmarketinfo_Data::has_m4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void allmarketinfo_Data::set_has_m4() {
  _has_bits_[0] |= 0x00000010u;
}
void allmarketinfo_Data::clear_has_m4() {
  _has_bits_[0] &= ~0x00000010u;
}
void allmarketinfo_Data::clear_m4() {
  m4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m4();
}
 const ::std::string& allmarketinfo_Data::m4() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m4)
  return m4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m4(const ::std::string& value) {
  set_has_m4();
  m4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m4)
}
 void allmarketinfo_Data::set_m4(const char* value) {
  set_has_m4();
  m4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m4)
}
 void allmarketinfo_Data::set_m4(const char* value, size_t size) {
  set_has_m4();
  m4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m4)
}
 ::std::string* allmarketinfo_Data::mutable_m4() {
  set_has_m4();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m4)
  return m4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m4() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m4)
  clear_has_m4();
  return m4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m4(::std::string* m4) {
  if (m4 != NULL) {
    set_has_m4();
  } else {
    clear_has_m4();
  }
  m4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m4);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m4)
}

// required string m5 = 6;
bool allmarketinfo_Data::has_m5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void allmarketinfo_Data::set_has_m5() {
  _has_bits_[0] |= 0x00000020u;
}
void allmarketinfo_Data::clear_has_m5() {
  _has_bits_[0] &= ~0x00000020u;
}
void allmarketinfo_Data::clear_m5() {
  m5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m5();
}
 const ::std::string& allmarketinfo_Data::m5() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m5)
  return m5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m5(const ::std::string& value) {
  set_has_m5();
  m5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m5)
}
 void allmarketinfo_Data::set_m5(const char* value) {
  set_has_m5();
  m5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m5)
}
 void allmarketinfo_Data::set_m5(const char* value, size_t size) {
  set_has_m5();
  m5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m5)
}
 ::std::string* allmarketinfo_Data::mutable_m5() {
  set_has_m5();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m5)
  return m5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m5() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m5)
  clear_has_m5();
  return m5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m5(::std::string* m5) {
  if (m5 != NULL) {
    set_has_m5();
  } else {
    clear_has_m5();
  }
  m5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m5);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m5)
}

// required string m6 = 7;
bool allmarketinfo_Data::has_m6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void allmarketinfo_Data::set_has_m6() {
  _has_bits_[0] |= 0x00000040u;
}
void allmarketinfo_Data::clear_has_m6() {
  _has_bits_[0] &= ~0x00000040u;
}
void allmarketinfo_Data::clear_m6() {
  m6_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m6();
}
 const ::std::string& allmarketinfo_Data::m6() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m6)
  return m6_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m6(const ::std::string& value) {
  set_has_m6();
  m6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m6)
}
 void allmarketinfo_Data::set_m6(const char* value) {
  set_has_m6();
  m6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m6)
}
 void allmarketinfo_Data::set_m6(const char* value, size_t size) {
  set_has_m6();
  m6_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m6)
}
 ::std::string* allmarketinfo_Data::mutable_m6() {
  set_has_m6();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m6)
  return m6_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m6() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m6)
  clear_has_m6();
  return m6_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m6(::std::string* m6) {
  if (m6 != NULL) {
    set_has_m6();
  } else {
    clear_has_m6();
  }
  m6_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m6);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m6)
}

// required string m7 = 8;
bool allmarketinfo_Data::has_m7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void allmarketinfo_Data::set_has_m7() {
  _has_bits_[0] |= 0x00000080u;
}
void allmarketinfo_Data::clear_has_m7() {
  _has_bits_[0] &= ~0x00000080u;
}
void allmarketinfo_Data::clear_m7() {
  m7_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m7();
}
 const ::std::string& allmarketinfo_Data::m7() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m7)
  return m7_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m7(const ::std::string& value) {
  set_has_m7();
  m7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m7)
}
 void allmarketinfo_Data::set_m7(const char* value) {
  set_has_m7();
  m7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m7)
}
 void allmarketinfo_Data::set_m7(const char* value, size_t size) {
  set_has_m7();
  m7_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m7)
}
 ::std::string* allmarketinfo_Data::mutable_m7() {
  set_has_m7();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m7)
  return m7_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m7() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m7)
  clear_has_m7();
  return m7_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m7(::std::string* m7) {
  if (m7 != NULL) {
    set_has_m7();
  } else {
    clear_has_m7();
  }
  m7_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m7);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m7)
}

// required string m8 = 9;
bool allmarketinfo_Data::has_m8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void allmarketinfo_Data::set_has_m8() {
  _has_bits_[0] |= 0x00000100u;
}
void allmarketinfo_Data::clear_has_m8() {
  _has_bits_[0] &= ~0x00000100u;
}
void allmarketinfo_Data::clear_m8() {
  m8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m8();
}
 const ::std::string& allmarketinfo_Data::m8() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m8)
  return m8_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m8(const ::std::string& value) {
  set_has_m8();
  m8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m8)
}
 void allmarketinfo_Data::set_m8(const char* value) {
  set_has_m8();
  m8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m8)
}
 void allmarketinfo_Data::set_m8(const char* value, size_t size) {
  set_has_m8();
  m8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m8)
}
 ::std::string* allmarketinfo_Data::mutable_m8() {
  set_has_m8();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m8)
  return m8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m8() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m8)
  clear_has_m8();
  return m8_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m8(::std::string* m8) {
  if (m8 != NULL) {
    set_has_m8();
  } else {
    clear_has_m8();
  }
  m8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m8);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m8)
}

// required string m9 = 10;
bool allmarketinfo_Data::has_m9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void allmarketinfo_Data::set_has_m9() {
  _has_bits_[0] |= 0x00000200u;
}
void allmarketinfo_Data::clear_has_m9() {
  _has_bits_[0] &= ~0x00000200u;
}
void allmarketinfo_Data::clear_m9() {
  m9_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m9();
}
 const ::std::string& allmarketinfo_Data::m9() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m9)
  return m9_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m9(const ::std::string& value) {
  set_has_m9();
  m9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m9)
}
 void allmarketinfo_Data::set_m9(const char* value) {
  set_has_m9();
  m9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m9)
}
 void allmarketinfo_Data::set_m9(const char* value, size_t size) {
  set_has_m9();
  m9_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m9)
}
 ::std::string* allmarketinfo_Data::mutable_m9() {
  set_has_m9();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m9)
  return m9_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m9() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m9)
  clear_has_m9();
  return m9_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m9(::std::string* m9) {
  if (m9 != NULL) {
    set_has_m9();
  } else {
    clear_has_m9();
  }
  m9_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m9);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m9)
}

// required string m10 = 11;
bool allmarketinfo_Data::has_m10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void allmarketinfo_Data::set_has_m10() {
  _has_bits_[0] |= 0x00000400u;
}
void allmarketinfo_Data::clear_has_m10() {
  _has_bits_[0] &= ~0x00000400u;
}
void allmarketinfo_Data::clear_m10() {
  m10_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m10();
}
 const ::std::string& allmarketinfo_Data::m10() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m10)
  return m10_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m10(const ::std::string& value) {
  set_has_m10();
  m10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m10)
}
 void allmarketinfo_Data::set_m10(const char* value) {
  set_has_m10();
  m10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m10)
}
 void allmarketinfo_Data::set_m10(const char* value, size_t size) {
  set_has_m10();
  m10_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m10)
}
 ::std::string* allmarketinfo_Data::mutable_m10() {
  set_has_m10();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m10)
  return m10_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m10() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m10)
  clear_has_m10();
  return m10_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m10(::std::string* m10) {
  if (m10 != NULL) {
    set_has_m10();
  } else {
    clear_has_m10();
  }
  m10_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m10);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m10)
}

// required string m11 = 12;
bool allmarketinfo_Data::has_m11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void allmarketinfo_Data::set_has_m11() {
  _has_bits_[0] |= 0x00000800u;
}
void allmarketinfo_Data::clear_has_m11() {
  _has_bits_[0] &= ~0x00000800u;
}
void allmarketinfo_Data::clear_m11() {
  m11_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m11();
}
 const ::std::string& allmarketinfo_Data::m11() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m11)
  return m11_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m11(const ::std::string& value) {
  set_has_m11();
  m11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m11)
}
 void allmarketinfo_Data::set_m11(const char* value) {
  set_has_m11();
  m11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m11)
}
 void allmarketinfo_Data::set_m11(const char* value, size_t size) {
  set_has_m11();
  m11_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m11)
}
 ::std::string* allmarketinfo_Data::mutable_m11() {
  set_has_m11();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m11)
  return m11_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m11() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m11)
  clear_has_m11();
  return m11_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m11(::std::string* m11) {
  if (m11 != NULL) {
    set_has_m11();
  } else {
    clear_has_m11();
  }
  m11_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m11);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m11)
}

// required string m12 = 13;
bool allmarketinfo_Data::has_m12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void allmarketinfo_Data::set_has_m12() {
  _has_bits_[0] |= 0x00001000u;
}
void allmarketinfo_Data::clear_has_m12() {
  _has_bits_[0] &= ~0x00001000u;
}
void allmarketinfo_Data::clear_m12() {
  m12_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m12();
}
 const ::std::string& allmarketinfo_Data::m12() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m12)
  return m12_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m12(const ::std::string& value) {
  set_has_m12();
  m12_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m12)
}
 void allmarketinfo_Data::set_m12(const char* value) {
  set_has_m12();
  m12_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m12)
}
 void allmarketinfo_Data::set_m12(const char* value, size_t size) {
  set_has_m12();
  m12_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m12)
}
 ::std::string* allmarketinfo_Data::mutable_m12() {
  set_has_m12();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m12)
  return m12_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m12() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m12)
  clear_has_m12();
  return m12_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m12(::std::string* m12) {
  if (m12 != NULL) {
    set_has_m12();
  } else {
    clear_has_m12();
  }
  m12_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m12);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m12)
}

// required string m13 = 14;
bool allmarketinfo_Data::has_m13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void allmarketinfo_Data::set_has_m13() {
  _has_bits_[0] |= 0x00002000u;
}
void allmarketinfo_Data::clear_has_m13() {
  _has_bits_[0] &= ~0x00002000u;
}
void allmarketinfo_Data::clear_m13() {
  m13_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_m13();
}
 const ::std::string& allmarketinfo_Data::m13() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Data.m13)
  return m13_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_m13(const ::std::string& value) {
  set_has_m13();
  m13_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Data.m13)
}
 void allmarketinfo_Data::set_m13(const char* value) {
  set_has_m13();
  m13_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Data.m13)
}
 void allmarketinfo_Data::set_m13(const char* value, size_t size) {
  set_has_m13();
  m13_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Data.m13)
}
 ::std::string* allmarketinfo_Data::mutable_m13() {
  set_has_m13();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Data.m13)
  return m13_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Data::release_m13() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Data.m13)
  clear_has_m13();
  return m13_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Data::set_allocated_m13(::std::string* m13) {
  if (m13 != NULL) {
    set_has_m13();
  } else {
    clear_has_m13();
  }
  m13_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), m13);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Data.m13)
}

// -------------------------------------------------------------------

// allmarketinfo_Exchange

// required string btc = 1;
bool allmarketinfo_Exchange::has_btc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void allmarketinfo_Exchange::set_has_btc() {
  _has_bits_[0] |= 0x00000001u;
}
void allmarketinfo_Exchange::clear_has_btc() {
  _has_bits_[0] &= ~0x00000001u;
}
void allmarketinfo_Exchange::clear_btc() {
  btc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_btc();
}
 const ::std::string& allmarketinfo_Exchange::btc() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Exchange.btc)
  return btc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Exchange::set_btc(const ::std::string& value) {
  set_has_btc();
  btc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Exchange.btc)
}
 void allmarketinfo_Exchange::set_btc(const char* value) {
  set_has_btc();
  btc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Exchange.btc)
}
 void allmarketinfo_Exchange::set_btc(const char* value, size_t size) {
  set_has_btc();
  btc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Exchange.btc)
}
 ::std::string* allmarketinfo_Exchange::mutable_btc() {
  set_has_btc();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Exchange.btc)
  return btc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Exchange::release_btc() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Exchange.btc)
  clear_has_btc();
  return btc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Exchange::set_allocated_btc(::std::string* btc) {
  if (btc != NULL) {
    set_has_btc();
  } else {
    clear_has_btc();
  }
  btc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), btc);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Exchange.btc)
}

// required string eth = 2;
bool allmarketinfo_Exchange::has_eth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void allmarketinfo_Exchange::set_has_eth() {
  _has_bits_[0] |= 0x00000002u;
}
void allmarketinfo_Exchange::clear_has_eth() {
  _has_bits_[0] &= ~0x00000002u;
}
void allmarketinfo_Exchange::clear_eth() {
  eth_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_eth();
}
 const ::std::string& allmarketinfo_Exchange::eth() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.Exchange.eth)
  return eth_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Exchange::set_eth(const ::std::string& value) {
  set_has_eth();
  eth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.Exchange.eth)
}
 void allmarketinfo_Exchange::set_eth(const char* value) {
  set_has_eth();
  eth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.Exchange.eth)
}
 void allmarketinfo_Exchange::set_eth(const char* value, size_t size) {
  set_has_eth();
  eth_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.Exchange.eth)
}
 ::std::string* allmarketinfo_Exchange::mutable_eth() {
  set_has_eth();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.Exchange.eth)
  return eth_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo_Exchange::release_eth() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.Exchange.eth)
  clear_has_eth();
  return eth_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo_Exchange::set_allocated_eth(::std::string* eth) {
  if (eth != NULL) {
    set_has_eth();
  } else {
    clear_has_eth();
  }
  eth_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), eth);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.Exchange.eth)
}

// -------------------------------------------------------------------

// allmarketinfo

// required string type = 1;
bool allmarketinfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void allmarketinfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void allmarketinfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void allmarketinfo::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& allmarketinfo::type() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.type)
}
 void allmarketinfo::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.type)
}
 void allmarketinfo::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.type)
}
 ::std::string* allmarketinfo::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo::release_type() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.type)
}

// repeated .ukex.allmarketinfo.Data data = 2;
int allmarketinfo::data_size() const {
  return data_.size();
}
void allmarketinfo::clear_data() {
  data_.Clear();
}
const ::ukex::allmarketinfo_Data& allmarketinfo::data(int index) const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.data)
  return data_.Get(index);
}
::ukex::allmarketinfo_Data* allmarketinfo::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.data)
  return data_.Mutable(index);
}
::ukex::allmarketinfo_Data* allmarketinfo::add_data() {
  // @@protoc_insertion_point(field_add:ukex.allmarketinfo.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data >*
allmarketinfo::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ukex.allmarketinfo.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::ukex::allmarketinfo_Data >&
allmarketinfo::data() const {
  // @@protoc_insertion_point(field_list:ukex.allmarketinfo.data)
  return data_;
}

// required uint64 marketid = 3;
bool allmarketinfo::has_marketid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void allmarketinfo::set_has_marketid() {
  _has_bits_[0] |= 0x00000004u;
}
void allmarketinfo::clear_has_marketid() {
  _has_bits_[0] &= ~0x00000004u;
}
void allmarketinfo::clear_marketid() {
  marketid_ = GOOGLE_ULONGLONG(0);
  clear_has_marketid();
}
 ::google::protobuf::uint64 allmarketinfo::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.marketid)
  return marketid_;
}
 void allmarketinfo::set_marketid(::google::protobuf::uint64 value) {
  set_has_marketid();
  marketid_ = value;
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.marketid)
}

// required .ukex.allmarketinfo.Exchange exchange = 4;
bool allmarketinfo::has_exchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void allmarketinfo::set_has_exchange() {
  _has_bits_[0] |= 0x00000008u;
}
void allmarketinfo::clear_has_exchange() {
  _has_bits_[0] &= ~0x00000008u;
}
void allmarketinfo::clear_exchange() {
  if (exchange_ != NULL) exchange_->::ukex::allmarketinfo_Exchange::Clear();
  clear_has_exchange();
}
const ::ukex::allmarketinfo_Exchange& allmarketinfo::exchange() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.exchange)
  return exchange_ != NULL ? *exchange_ : *default_instance_->exchange_;
}
::ukex::allmarketinfo_Exchange* allmarketinfo::mutable_exchange() {
  set_has_exchange();
  if (exchange_ == NULL) {
    exchange_ = new ::ukex::allmarketinfo_Exchange;
  }
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.exchange)
  return exchange_;
}
::ukex::allmarketinfo_Exchange* allmarketinfo::release_exchange() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.exchange)
  clear_has_exchange();
  ::ukex::allmarketinfo_Exchange* temp = exchange_;
  exchange_ = NULL;
  return temp;
}
void allmarketinfo::set_allocated_exchange(::ukex::allmarketinfo_Exchange* exchange) {
  delete exchange_;
  exchange_ = exchange;
  if (exchange) {
    set_has_exchange();
  } else {
    clear_has_exchange();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.exchange)
}

// optional string token = 5;
bool allmarketinfo::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void allmarketinfo::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
void allmarketinfo::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
void allmarketinfo::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& allmarketinfo::token() const {
  // @@protoc_insertion_point(field_get:ukex.allmarketinfo.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.allmarketinfo.token)
}
 void allmarketinfo::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.allmarketinfo.token)
}
 void allmarketinfo::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.allmarketinfo.token)
}
 ::std::string* allmarketinfo::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.allmarketinfo.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* allmarketinfo::release_token() {
  // @@protoc_insertion_point(field_release:ukex.allmarketinfo.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void allmarketinfo::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.allmarketinfo.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
