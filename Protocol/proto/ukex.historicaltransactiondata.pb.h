// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.historicaltransactiondata.proto

#ifndef PROTOBUF_ukex_2ehistoricaltransactiondata_2eproto__INCLUDED
#define PROTOBUF_ukex_2ehistoricaltransactiondata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ukex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
void protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto();
void protobuf_ShutdownFile_ukex_2ehistoricaltransactiondata_2eproto();

class historicaltransactiondata;
class historicaltransactiondata_Data;
class historicaltransactiondata_Data_TradeLog;

enum historicaltransactiondata_CONST {
  historicaltransactiondata_CONST_CMD = 107
};
bool historicaltransactiondata_CONST_IsValid(int value);
const historicaltransactiondata_CONST historicaltransactiondata_CONST_CONST_MIN = historicaltransactiondata_CONST_CMD;
const historicaltransactiondata_CONST historicaltransactiondata_CONST_CONST_MAX = historicaltransactiondata_CONST_CMD;
const int historicaltransactiondata_CONST_CONST_ARRAYSIZE = historicaltransactiondata_CONST_CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* historicaltransactiondata_CONST_descriptor();
inline const ::std::string& historicaltransactiondata_CONST_Name(historicaltransactiondata_CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    historicaltransactiondata_CONST_descriptor(), value);
}
inline bool historicaltransactiondata_CONST_Parse(
    const ::std::string& name, historicaltransactiondata_CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<historicaltransactiondata_CONST>(
    historicaltransactiondata_CONST_descriptor(), name, value);
}
// ===================================================================

class historicaltransactiondata_Data_TradeLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.historicaltransactiondata.Data.TradeLog) */ {
 public:
  historicaltransactiondata_Data_TradeLog();
  virtual ~historicaltransactiondata_Data_TradeLog();

  historicaltransactiondata_Data_TradeLog(const historicaltransactiondata_Data_TradeLog& from);

  inline historicaltransactiondata_Data_TradeLog& operator=(const historicaltransactiondata_Data_TradeLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const historicaltransactiondata_Data_TradeLog& default_instance();

  void Swap(historicaltransactiondata_Data_TradeLog* other);

  // implements Message ----------------------------------------------

  inline historicaltransactiondata_Data_TradeLog* New() const { return New(NULL); }

  historicaltransactiondata_Data_TradeLog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const historicaltransactiondata_Data_TradeLog& from);
  void MergeFrom(const historicaltransactiondata_Data_TradeLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(historicaltransactiondata_Data_TradeLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 tradeid = 1;
  bool has_tradeid() const;
  void clear_tradeid();
  static const int kTradeidFieldNumber = 1;
  ::google::protobuf::uint64 tradeid() const;
  void set_tradeid(::google::protobuf::uint64 value);

  // required string addtime = 2;
  bool has_addtime() const;
  void clear_addtime();
  static const int kAddtimeFieldNumber = 2;
  const ::std::string& addtime() const;
  void set_addtime(const ::std::string& value);
  void set_addtime(const char* value);
  void set_addtime(const char* value, size_t size);
  ::std::string* mutable_addtime();
  ::std::string* release_addtime();
  void set_allocated_addtime(::std::string* addtime);

  // required string timestamp = 3;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // required uint64 type = 4;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  ::google::protobuf::uint64 type() const;
  void set_type(::google::protobuf::uint64 value);

  // required string price = 5;
  bool has_price() const;
  void clear_price();
  static const int kPriceFieldNumber = 5;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // required string mum = 6;
  bool has_mum() const;
  void clear_mum();
  static const int kMumFieldNumber = 6;
  const ::std::string& mum() const;
  void set_mum(const ::std::string& value);
  void set_mum(const char* value);
  void set_mum(const char* value, size_t size);
  ::std::string* mutable_mum();
  ::std::string* release_mum();
  void set_allocated_mum(::std::string* mum);

  // required string num = 7;
  bool has_num() const;
  void clear_num();
  static const int kNumFieldNumber = 7;
  const ::std::string& num() const;
  void set_num(const ::std::string& value);
  void set_num(const char* value);
  void set_num(const char* value, size_t size);
  ::std::string* mutable_num();
  ::std::string* release_num();
  void set_allocated_num(::std::string* num);

  // @@protoc_insertion_point(class_scope:ukex.historicaltransactiondata.Data.TradeLog)
 private:
  inline void set_has_tradeid();
  inline void clear_has_tradeid();
  inline void set_has_addtime();
  inline void clear_has_addtime();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_mum();
  inline void clear_has_mum();
  inline void set_has_num();
  inline void clear_has_num();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 tradeid_;
  ::google::protobuf::internal::ArenaStringPtr addtime_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::uint64 type_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::internal::ArenaStringPtr mum_;
  ::google::protobuf::internal::ArenaStringPtr num_;
  friend void  protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  friend void protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2ehistoricaltransactiondata_2eproto();

  void InitAsDefaultInstance();
  static historicaltransactiondata_Data_TradeLog* default_instance_;
};
// -------------------------------------------------------------------

class historicaltransactiondata_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.historicaltransactiondata.Data) */ {
 public:
  historicaltransactiondata_Data();
  virtual ~historicaltransactiondata_Data();

  historicaltransactiondata_Data(const historicaltransactiondata_Data& from);

  inline historicaltransactiondata_Data& operator=(const historicaltransactiondata_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const historicaltransactiondata_Data& default_instance();

  void Swap(historicaltransactiondata_Data* other);

  // implements Message ----------------------------------------------

  inline historicaltransactiondata_Data* New() const { return New(NULL); }

  historicaltransactiondata_Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const historicaltransactiondata_Data& from);
  void MergeFrom(const historicaltransactiondata_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(historicaltransactiondata_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef historicaltransactiondata_Data_TradeLog TradeLog;

  // accessors -------------------------------------------------------

  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  int tradelog_size() const;
  void clear_tradelog();
  static const int kTradelogFieldNumber = 1;
  const ::ukex::historicaltransactiondata_Data_TradeLog& tradelog(int index) const;
  ::ukex::historicaltransactiondata_Data_TradeLog* mutable_tradelog(int index);
  ::ukex::historicaltransactiondata_Data_TradeLog* add_tradelog();
  ::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >*
      mutable_tradelog();
  const ::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >&
      tradelog() const;

  // @@protoc_insertion_point(class_scope:ukex.historicaltransactiondata.Data)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog > tradelog_;
  friend void  protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  friend void protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2ehistoricaltransactiondata_2eproto();

  void InitAsDefaultInstance();
  static historicaltransactiondata_Data* default_instance_;
};
// -------------------------------------------------------------------

class historicaltransactiondata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.historicaltransactiondata) */ {
 public:
  historicaltransactiondata();
  virtual ~historicaltransactiondata();

  historicaltransactiondata(const historicaltransactiondata& from);

  inline historicaltransactiondata& operator=(const historicaltransactiondata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const historicaltransactiondata& default_instance();

  void Swap(historicaltransactiondata* other);

  // implements Message ----------------------------------------------

  inline historicaltransactiondata* New() const { return New(NULL); }

  historicaltransactiondata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const historicaltransactiondata& from);
  void MergeFrom(const historicaltransactiondata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(historicaltransactiondata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef historicaltransactiondata_Data Data;

  typedef historicaltransactiondata_CONST CONST;
  static const CONST CMD =
    historicaltransactiondata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return historicaltransactiondata_CONST_IsValid(value);
  }
  static const CONST CONST_MIN =
    historicaltransactiondata_CONST_CONST_MIN;
  static const CONST CONST_MAX =
    historicaltransactiondata_CONST_CONST_MAX;
  static const int CONST_ARRAYSIZE =
    historicaltransactiondata_CONST_CONST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CONST_descriptor() {
    return historicaltransactiondata_CONST_descriptor();
  }
  static inline const ::std::string& CONST_Name(CONST value) {
    return historicaltransactiondata_CONST_Name(value);
  }
  static inline bool CONST_Parse(const ::std::string& name,
      CONST* value) {
    return historicaltransactiondata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // required .ukex.historicaltransactiondata.Data data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::ukex::historicaltransactiondata_Data& data() const;
  ::ukex::historicaltransactiondata_Data* mutable_data();
  ::ukex::historicaltransactiondata_Data* release_data();
  void set_allocated_data(::ukex::historicaltransactiondata_Data* data);

  // optional string token = 3;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 3;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ukex.historicaltransactiondata)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_token();
  inline void clear_has_token();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::ukex::historicaltransactiondata_Data* data_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  friend void protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2ehistoricaltransactiondata_2eproto();

  void InitAsDefaultInstance();
  static historicaltransactiondata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// historicaltransactiondata_Data_TradeLog

// required uint64 tradeid = 1;
inline bool historicaltransactiondata_Data_TradeLog::has_tradeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_tradeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_tradeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_tradeid() {
  tradeid_ = GOOGLE_ULONGLONG(0);
  clear_has_tradeid();
}
inline ::google::protobuf::uint64 historicaltransactiondata_Data_TradeLog::tradeid() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.tradeid)
  return tradeid_;
}
inline void historicaltransactiondata_Data_TradeLog::set_tradeid(::google::protobuf::uint64 value) {
  set_has_tradeid();
  tradeid_ = value;
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.tradeid)
}

// required string addtime = 2;
inline bool historicaltransactiondata_Data_TradeLog::has_addtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_addtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_addtime() {
  addtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addtime();
}
inline const ::std::string& historicaltransactiondata_Data_TradeLog::addtime() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  return addtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(const ::std::string& value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(const char* value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline void historicaltransactiondata_Data_TradeLog::set_addtime(const char* value, size_t size) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::mutable_addtime() {
  set_has_addtime();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  return addtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::release_addtime() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  clear_has_addtime();
  return addtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_addtime(::std::string* addtime) {
  if (addtime != NULL) {
    set_has_addtime();
  } else {
    clear_has_addtime();
  }
  addtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtime);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}

// required string timestamp = 3;
inline bool historicaltransactiondata_Data_TradeLog::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
inline const ::std::string& historicaltransactiondata_Data_TradeLog::timestamp() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline void historicaltransactiondata_Data_TradeLog::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::release_timestamp() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}

// required uint64 type = 4;
inline bool historicaltransactiondata_Data_TradeLog::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
  clear_has_type();
}
inline ::google::protobuf::uint64 historicaltransactiondata_Data_TradeLog::type() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.type)
  return type_;
}
inline void historicaltransactiondata_Data_TradeLog::set_type(::google::protobuf::uint64 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.type)
}

// required string price = 5;
inline bool historicaltransactiondata_Data_TradeLog::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
inline const ::std::string& historicaltransactiondata_Data_TradeLog::price() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.price)
  return price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline void historicaltransactiondata_Data_TradeLog::set_price(const char* value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline void historicaltransactiondata_Data_TradeLog::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.price)
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::release_price() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.price)
}

// required string mum = 6;
inline bool historicaltransactiondata_Data_TradeLog::has_mum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_mum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_mum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_mum() {
  mum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mum();
}
inline const ::std::string& historicaltransactiondata_Data_TradeLog::mum() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.mum)
  return mum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(const ::std::string& value) {
  set_has_mum();
  mum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(const char* value) {
  set_has_mum();
  mum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline void historicaltransactiondata_Data_TradeLog::set_mum(const char* value, size_t size) {
  set_has_mum();
  mum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::mutable_mum() {
  set_has_mum();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.mum)
  return mum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::release_mum() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.mum)
  clear_has_mum();
  return mum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_mum(::std::string* mum) {
  if (mum != NULL) {
    set_has_mum();
  } else {
    clear_has_mum();
  }
  mum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mum);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.mum)
}

// required string num = 7;
inline bool historicaltransactiondata_Data_TradeLog::has_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void historicaltransactiondata_Data_TradeLog::set_has_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_has_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void historicaltransactiondata_Data_TradeLog::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
inline const ::std::string& historicaltransactiondata_Data_TradeLog::num() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.num)
  return num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline void historicaltransactiondata_Data_TradeLog::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline void historicaltransactiondata_Data_TradeLog::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.num)
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata_Data_TradeLog::release_num() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata_Data_TradeLog::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.num)
}

// -------------------------------------------------------------------

// historicaltransactiondata_Data

// repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
inline int historicaltransactiondata_Data::tradelog_size() const {
  return tradelog_.size();
}
inline void historicaltransactiondata_Data::clear_tradelog() {
  tradelog_.Clear();
}
inline const ::ukex::historicaltransactiondata_Data_TradeLog& historicaltransactiondata_Data::tradelog(int index) const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Get(index);
}
inline ::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::mutable_tradelog(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Mutable(index);
}
inline ::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::add_tradelog() {
  // @@protoc_insertion_point(field_add:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >*
historicaltransactiondata_Data::mutable_tradelog() {
  // @@protoc_insertion_point(field_mutable_list:ukex.historicaltransactiondata.Data.tradelog)
  return &tradelog_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >&
historicaltransactiondata_Data::tradelog() const {
  // @@protoc_insertion_point(field_list:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_;
}

// -------------------------------------------------------------------

// historicaltransactiondata

// required string type = 1;
inline bool historicaltransactiondata::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void historicaltransactiondata::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void historicaltransactiondata::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void historicaltransactiondata::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& historicaltransactiondata::type() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.type)
}
inline void historicaltransactiondata::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.type)
}
inline void historicaltransactiondata::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.type)
}
inline ::std::string* historicaltransactiondata::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.type)
}

// required .ukex.historicaltransactiondata.Data data = 2;
inline bool historicaltransactiondata::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void historicaltransactiondata::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void historicaltransactiondata::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void historicaltransactiondata::clear_data() {
  if (data_ != NULL) data_->::ukex::historicaltransactiondata_Data::Clear();
  clear_has_data();
}
inline const ::ukex::historicaltransactiondata_Data& historicaltransactiondata::data() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::ukex::historicaltransactiondata_Data* historicaltransactiondata::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::ukex::historicaltransactiondata_Data;
  }
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.data)
  return data_;
}
inline ::ukex::historicaltransactiondata_Data* historicaltransactiondata::release_data() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.data)
  clear_has_data();
  ::ukex::historicaltransactiondata_Data* temp = data_;
  data_ = NULL;
  return temp;
}
inline void historicaltransactiondata::set_allocated_data(::ukex::historicaltransactiondata_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.data)
}

// optional string token = 3;
inline bool historicaltransactiondata::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void historicaltransactiondata::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
inline void historicaltransactiondata::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void historicaltransactiondata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& historicaltransactiondata::token() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.token)
}
inline void historicaltransactiondata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.token)
}
inline void historicaltransactiondata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.token)
}
inline ::std::string* historicaltransactiondata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* historicaltransactiondata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void historicaltransactiondata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukex::historicaltransactiondata_CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::historicaltransactiondata_CONST>() {
  return ::ukex::historicaltransactiondata_CONST_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ukex_2ehistoricaltransactiondata_2eproto__INCLUDED
