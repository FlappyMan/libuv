// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.historicaltransactiondata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.historicaltransactiondata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* historicaltransactiondata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  historicaltransactiondata_reflection_ = NULL;
const ::google::protobuf::Descriptor* historicaltransactiondata_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  historicaltransactiondata_Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* historicaltransactiondata_Data_TradeLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  historicaltransactiondata_Data_TradeLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* historicaltransactiondata_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto() {
  protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.historicaltransactiondata.proto");
  GOOGLE_CHECK(file != NULL);
  historicaltransactiondata_descriptor_ = file->message_type(0);
  static const int historicaltransactiondata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata, token_),
  };
  historicaltransactiondata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      historicaltransactiondata_descriptor_,
      historicaltransactiondata::default_instance_,
      historicaltransactiondata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata, _has_bits_[0]),
      -1,
      -1,
      sizeof(historicaltransactiondata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata, _internal_metadata_),
      -1);
  historicaltransactiondata_Data_descriptor_ = historicaltransactiondata_descriptor_->nested_type(0);
  static const int historicaltransactiondata_Data_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data, tradelog_),
  };
  historicaltransactiondata_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      historicaltransactiondata_Data_descriptor_,
      historicaltransactiondata_Data::default_instance_,
      historicaltransactiondata_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data, _has_bits_[0]),
      -1,
      -1,
      sizeof(historicaltransactiondata_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data, _internal_metadata_),
      -1);
  historicaltransactiondata_Data_TradeLog_descriptor_ = historicaltransactiondata_Data_descriptor_->nested_type(0);
  static const int historicaltransactiondata_Data_TradeLog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, tradeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, addtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, mum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, num_),
  };
  historicaltransactiondata_Data_TradeLog_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      historicaltransactiondata_Data_TradeLog_descriptor_,
      historicaltransactiondata_Data_TradeLog::default_instance_,
      historicaltransactiondata_Data_TradeLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, _has_bits_[0]),
      -1,
      -1,
      sizeof(historicaltransactiondata_Data_TradeLog),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(historicaltransactiondata_Data_TradeLog, _internal_metadata_),
      -1);
  historicaltransactiondata_CONST_descriptor_ = historicaltransactiondata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2ehistoricaltransactiondata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      historicaltransactiondata_descriptor_, &historicaltransactiondata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      historicaltransactiondata_Data_descriptor_, &historicaltransactiondata_Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      historicaltransactiondata_Data_TradeLog_descriptor_, &historicaltransactiondata_Data_TradeLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2ehistoricaltransactiondata_2eproto() {
  delete historicaltransactiondata::default_instance_;
  delete historicaltransactiondata_reflection_;
  delete historicaltransactiondata_Data::default_instance_;
  delete historicaltransactiondata_Data_reflection_;
  delete historicaltransactiondata_Data_TradeLog::default_instance_;
  delete historicaltransactiondata_Data_TradeLog_reflection_;
}

void protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$ukex.historicaltransactiondata.proto\022\004"
    "ukex\"\300\002\n\031historicaltransactiondata\022\014\n\004ty"
    "pe\030\001 \002(\t\0222\n\004data\030\002 \002(\0132$.ukex.historical"
    "transactiondata.Data\022\r\n\005token\030\003 \001(\t\032\277\001\n\004"
    "Data\022\?\n\010tradelog\030\001 \003(\0132-.ukex.historical"
    "transactiondata.Data.TradeLog\032v\n\010TradeLo"
    "g\022\017\n\007tradeid\030\001 \002(\004\022\017\n\007addtime\030\002 \002(\t\022\021\n\tt"
    "imestamp\030\003 \002(\t\022\014\n\004type\030\004 \002(\004\022\r\n\005price\030\005 "
    "\002(\t\022\013\n\003mum\030\006 \002(\t\022\013\n\003num\030\007 \002(\t\"\020\n\005CONST\022\007"
    "\n\003CMD\020k", 367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.historicaltransactiondata.proto", &protobuf_RegisterTypes);
  historicaltransactiondata::default_instance_ = new historicaltransactiondata();
  historicaltransactiondata_Data::default_instance_ = new historicaltransactiondata_Data();
  historicaltransactiondata_Data_TradeLog::default_instance_ = new historicaltransactiondata_Data_TradeLog();
  historicaltransactiondata::default_instance_->InitAsDefaultInstance();
  historicaltransactiondata_Data::default_instance_->InitAsDefaultInstance();
  historicaltransactiondata_Data_TradeLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2ehistoricaltransactiondata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2ehistoricaltransactiondata_2eproto {
  StaticDescriptorInitializer_ukex_2ehistoricaltransactiondata_2eproto() {
    protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  }
} static_descriptor_initializer_ukex_2ehistoricaltransactiondata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* historicaltransactiondata_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return historicaltransactiondata_CONST_descriptor_;
}
bool historicaltransactiondata_CONST_IsValid(int value) {
  switch(value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const historicaltransactiondata_CONST historicaltransactiondata::CMD;
const historicaltransactiondata_CONST historicaltransactiondata::CONST_MIN;
const historicaltransactiondata_CONST historicaltransactiondata::CONST_MAX;
const int historicaltransactiondata::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int historicaltransactiondata_Data_TradeLog::kTradeidFieldNumber;
const int historicaltransactiondata_Data_TradeLog::kAddtimeFieldNumber;
const int historicaltransactiondata_Data_TradeLog::kTimestampFieldNumber;
const int historicaltransactiondata_Data_TradeLog::kTypeFieldNumber;
const int historicaltransactiondata_Data_TradeLog::kPriceFieldNumber;
const int historicaltransactiondata_Data_TradeLog::kMumFieldNumber;
const int historicaltransactiondata_Data_TradeLog::kNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

historicaltransactiondata_Data_TradeLog::historicaltransactiondata_Data_TradeLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.historicaltransactiondata.Data.TradeLog)
}

void historicaltransactiondata_Data_TradeLog::InitAsDefaultInstance() {
}

historicaltransactiondata_Data_TradeLog::historicaltransactiondata_Data_TradeLog(const historicaltransactiondata_Data_TradeLog& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.historicaltransactiondata.Data.TradeLog)
}

void historicaltransactiondata_Data_TradeLog::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tradeid_ = GOOGLE_ULONGLONG(0);
  addtime_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = GOOGLE_ULONGLONG(0);
  price_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mum_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

historicaltransactiondata_Data_TradeLog::~historicaltransactiondata_Data_TradeLog() {
  // @@protoc_insertion_point(destructor:ukex.historicaltransactiondata.Data.TradeLog)
  SharedDtor();
}

void historicaltransactiondata_Data_TradeLog::SharedDtor() {
  addtime_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mum_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  num_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void historicaltransactiondata_Data_TradeLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* historicaltransactiondata_Data_TradeLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return historicaltransactiondata_Data_TradeLog_descriptor_;
}

const historicaltransactiondata_Data_TradeLog& historicaltransactiondata_Data_TradeLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  return *default_instance_;
}

historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data_TradeLog::default_instance_ = NULL;

historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data_TradeLog::New(::google::protobuf::Arena* arena) const {
  historicaltransactiondata_Data_TradeLog* n = new historicaltransactiondata_Data_TradeLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void historicaltransactiondata_Data_TradeLog::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (_has_bits_[0 / 32] & 127u) {
    tradeid_ = GOOGLE_ULONGLONG(0);
    if (has_addtime()) {
      addtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_timestamp()) {
      timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = GOOGLE_ULONGLONG(0);
    if (has_price()) {
      price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_mum()) {
      mum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_num()) {
      num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool historicaltransactiondata_Data_TradeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.historicaltransactiondata.Data.TradeLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 tradeid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tradeid_)));
          set_has_tradeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_addtime;
        break;
      }

      // required string addtime = 2;
      case 2: {
        if (tag == 18) {
         parse_addtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addtime().data(), this->addtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.Data.TradeLog.addtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // required string timestamp = 3;
      case 3: {
        if (tag == 26) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.Data.TradeLog.timestamp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint64 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_price;
        break;
      }

      // required string price = 5;
      case 5: {
        if (tag == 42) {
         parse_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price().data(), this->price().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.Data.TradeLog.price");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mum;
        break;
      }

      // required string mum = 6;
      case 6: {
        if (tag == 50) {
         parse_mum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mum().data(), this->mum().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.Data.TradeLog.mum");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_num;
        break;
      }

      // required string num = 7;
      case 7: {
        if (tag == 58) {
         parse_num:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_num()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->num().data(), this->num().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.Data.TradeLog.num");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.historicaltransactiondata.Data.TradeLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.historicaltransactiondata.Data.TradeLog)
  return false;
#undef DO_
}

void historicaltransactiondata_Data_TradeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.historicaltransactiondata.Data.TradeLog)
  // required uint64 tradeid = 1;
  if (has_tradeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tradeid(), output);
  }

  // required string addtime = 2;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.addtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->addtime(), output);
  }

  // required string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestamp(), output);
  }

  // required uint64 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->type(), output);
  }

  // required string price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.price");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->price(), output);
  }

  // required string mum = 6;
  if (has_mum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mum().data(), this->mum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.mum");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mum(), output);
  }

  // required string num = 7;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.num");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.historicaltransactiondata.Data.TradeLog)
}

::google::protobuf::uint8* historicaltransactiondata_Data_TradeLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.historicaltransactiondata.Data.TradeLog)
  // required uint64 tradeid = 1;
  if (has_tradeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tradeid(), target);
  }

  // required string addtime = 2;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addtime().data(), this->addtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.addtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addtime(), target);
  }

  // required string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.timestamp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  // required uint64 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->type(), target);
  }

  // required string price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price().data(), this->price().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.price");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->price(), target);
  }

  // required string mum = 6;
  if (has_mum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mum().data(), this->mum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.mum");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mum(), target);
  }

  // required string num = 7;
  if (has_num()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->num().data(), this->num().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.Data.TradeLog.num");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.historicaltransactiondata.Data.TradeLog)
  return target;
}

int historicaltransactiondata_Data_TradeLog::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.historicaltransactiondata.Data.TradeLog)
  int total_size = 0;

  if (has_tradeid()) {
    // required uint64 tradeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tradeid());
  }

  if (has_addtime()) {
    // required string addtime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addtime());
  }

  if (has_timestamp()) {
    // required string timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  if (has_type()) {
    // required uint64 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());
  }

  if (has_price()) {
    // required string price = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price());
  }

  if (has_mum()) {
    // required string mum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mum());
  }

  if (has_num()) {
    // required string num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->num());
  }

  return total_size;
}
int historicaltransactiondata_Data_TradeLog::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.historicaltransactiondata.Data.TradeLog)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint64 tradeid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tradeid());

    // required string addtime = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->addtime());

    // required string timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());

    // required uint64 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->type());

    // required string price = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->price());

    // required string mum = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mum());

    // required string num = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->num());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void historicaltransactiondata_Data_TradeLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const historicaltransactiondata_Data_TradeLog* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const historicaltransactiondata_Data_TradeLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.historicaltransactiondata.Data.TradeLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.historicaltransactiondata.Data.TradeLog)
    MergeFrom(*source);
  }
}

void historicaltransactiondata_Data_TradeLog::MergeFrom(const historicaltransactiondata_Data_TradeLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradeid()) {
      set_tradeid(from.tradeid());
    }
    if (from.has_addtime()) {
      set_has_addtime();
      addtime_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.addtime_);
    }
    if (from.has_timestamp()) {
      set_has_timestamp();
      timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_price()) {
      set_has_price();
      price_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_);
    }
    if (from.has_mum()) {
      set_has_mum();
      mum_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mum_);
    }
    if (from.has_num()) {
      set_has_num();
      num_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.num_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void historicaltransactiondata_Data_TradeLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void historicaltransactiondata_Data_TradeLog::CopyFrom(const historicaltransactiondata_Data_TradeLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.historicaltransactiondata.Data.TradeLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool historicaltransactiondata_Data_TradeLog::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void historicaltransactiondata_Data_TradeLog::Swap(historicaltransactiondata_Data_TradeLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void historicaltransactiondata_Data_TradeLog::InternalSwap(historicaltransactiondata_Data_TradeLog* other) {
  std::swap(tradeid_, other->tradeid_);
  addtime_.Swap(&other->addtime_);
  timestamp_.Swap(&other->timestamp_);
  std::swap(type_, other->type_);
  price_.Swap(&other->price_);
  mum_.Swap(&other->mum_);
  num_.Swap(&other->num_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata historicaltransactiondata_Data_TradeLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = historicaltransactiondata_Data_TradeLog_descriptor_;
  metadata.reflection = historicaltransactiondata_Data_TradeLog_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int historicaltransactiondata_Data::kTradelogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

historicaltransactiondata_Data::historicaltransactiondata_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.historicaltransactiondata.Data)
}

void historicaltransactiondata_Data::InitAsDefaultInstance() {
}

historicaltransactiondata_Data::historicaltransactiondata_Data(const historicaltransactiondata_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.historicaltransactiondata.Data)
}

void historicaltransactiondata_Data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

historicaltransactiondata_Data::~historicaltransactiondata_Data() {
  // @@protoc_insertion_point(destructor:ukex.historicaltransactiondata.Data)
  SharedDtor();
}

void historicaltransactiondata_Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void historicaltransactiondata_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* historicaltransactiondata_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return historicaltransactiondata_Data_descriptor_;
}

const historicaltransactiondata_Data& historicaltransactiondata_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  return *default_instance_;
}

historicaltransactiondata_Data* historicaltransactiondata_Data::default_instance_ = NULL;

historicaltransactiondata_Data* historicaltransactiondata_Data::New(::google::protobuf::Arena* arena) const {
  historicaltransactiondata_Data* n = new historicaltransactiondata_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void historicaltransactiondata_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.historicaltransactiondata.Data)
  tradelog_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool historicaltransactiondata_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.historicaltransactiondata.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tradelog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tradelog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tradelog;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.historicaltransactiondata.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.historicaltransactiondata.Data)
  return false;
#undef DO_
}

void historicaltransactiondata_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.historicaltransactiondata.Data)
  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  for (unsigned int i = 0, n = this->tradelog_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tradelog(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.historicaltransactiondata.Data)
}

::google::protobuf::uint8* historicaltransactiondata_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.historicaltransactiondata.Data)
  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  for (unsigned int i = 0, n = this->tradelog_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tradelog(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.historicaltransactiondata.Data)
  return target;
}

int historicaltransactiondata_Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.historicaltransactiondata.Data)
  int total_size = 0;

  // repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
  total_size += 1 * this->tradelog_size();
  for (int i = 0; i < this->tradelog_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tradelog(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void historicaltransactiondata_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.historicaltransactiondata.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const historicaltransactiondata_Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const historicaltransactiondata_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.historicaltransactiondata.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.historicaltransactiondata.Data)
    MergeFrom(*source);
  }
}

void historicaltransactiondata_Data::MergeFrom(const historicaltransactiondata_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.historicaltransactiondata.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tradelog_.MergeFrom(from.tradelog_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void historicaltransactiondata_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.historicaltransactiondata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void historicaltransactiondata_Data::CopyFrom(const historicaltransactiondata_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.historicaltransactiondata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool historicaltransactiondata_Data::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->tradelog())) return false;
  return true;
}

void historicaltransactiondata_Data::Swap(historicaltransactiondata_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void historicaltransactiondata_Data::InternalSwap(historicaltransactiondata_Data* other) {
  tradelog_.UnsafeArenaSwap(&other->tradelog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata historicaltransactiondata_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = historicaltransactiondata_Data_descriptor_;
  metadata.reflection = historicaltransactiondata_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int historicaltransactiondata::kTypeFieldNumber;
const int historicaltransactiondata::kDataFieldNumber;
const int historicaltransactiondata::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

historicaltransactiondata::historicaltransactiondata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.historicaltransactiondata)
}

void historicaltransactiondata::InitAsDefaultInstance() {
  data_ = const_cast< ::ukex::historicaltransactiondata_Data*>(&::ukex::historicaltransactiondata_Data::default_instance());
}

historicaltransactiondata::historicaltransactiondata(const historicaltransactiondata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.historicaltransactiondata)
}

void historicaltransactiondata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = NULL;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

historicaltransactiondata::~historicaltransactiondata() {
  // @@protoc_insertion_point(destructor:ukex.historicaltransactiondata)
  SharedDtor();
}

void historicaltransactiondata::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete data_;
  }
}

void historicaltransactiondata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* historicaltransactiondata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return historicaltransactiondata_descriptor_;
}

const historicaltransactiondata& historicaltransactiondata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2ehistoricaltransactiondata_2eproto();
  return *default_instance_;
}

historicaltransactiondata* historicaltransactiondata::default_instance_ = NULL;

historicaltransactiondata* historicaltransactiondata::New(::google::protobuf::Arena* arena) const {
  historicaltransactiondata* n = new historicaltransactiondata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void historicaltransactiondata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.historicaltransactiondata)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      if (data_ != NULL) data_->::ukex::historicaltransactiondata_Data::Clear();
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool historicaltransactiondata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.historicaltransactiondata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required .ukex.historicaltransactiondata.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.historicaltransactiondata.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.historicaltransactiondata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.historicaltransactiondata)
  return false;
#undef DO_
}

void historicaltransactiondata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.historicaltransactiondata)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // required .ukex.historicaltransactiondata.Data data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.historicaltransactiondata)
}

::google::protobuf::uint8* historicaltransactiondata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.historicaltransactiondata)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // required .ukex.historicaltransactiondata.Data data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, false, target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.historicaltransactiondata.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.historicaltransactiondata)
  return target;
}

int historicaltransactiondata::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.historicaltransactiondata)
  int total_size = 0;

  if (has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  if (has_data()) {
    // required .ukex.historicaltransactiondata.Data data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  return total_size;
}
int historicaltransactiondata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.historicaltransactiondata)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());

    // required .ukex.historicaltransactiondata.Data data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string token = 3;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void historicaltransactiondata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.historicaltransactiondata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const historicaltransactiondata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const historicaltransactiondata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.historicaltransactiondata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.historicaltransactiondata)
    MergeFrom(*source);
  }
}

void historicaltransactiondata::MergeFrom(const historicaltransactiondata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.historicaltransactiondata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_data()) {
      mutable_data()->::ukex::historicaltransactiondata_Data::MergeFrom(from.data());
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void historicaltransactiondata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.historicaltransactiondata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void historicaltransactiondata::CopyFrom(const historicaltransactiondata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.historicaltransactiondata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool historicaltransactiondata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void historicaltransactiondata::Swap(historicaltransactiondata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void historicaltransactiondata::InternalSwap(historicaltransactiondata* other) {
  type_.Swap(&other->type_);
  std::swap(data_, other->data_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata historicaltransactiondata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = historicaltransactiondata_descriptor_;
  metadata.reflection = historicaltransactiondata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// historicaltransactiondata_Data_TradeLog

// required uint64 tradeid = 1;
bool historicaltransactiondata_Data_TradeLog::has_tradeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_tradeid() {
  _has_bits_[0] |= 0x00000001u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_tradeid() {
  _has_bits_[0] &= ~0x00000001u;
}
void historicaltransactiondata_Data_TradeLog::clear_tradeid() {
  tradeid_ = GOOGLE_ULONGLONG(0);
  clear_has_tradeid();
}
 ::google::protobuf::uint64 historicaltransactiondata_Data_TradeLog::tradeid() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.tradeid)
  return tradeid_;
}
 void historicaltransactiondata_Data_TradeLog::set_tradeid(::google::protobuf::uint64 value) {
  set_has_tradeid();
  tradeid_ = value;
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.tradeid)
}

// required string addtime = 2;
bool historicaltransactiondata_Data_TradeLog::has_addtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_addtime() {
  _has_bits_[0] |= 0x00000002u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_addtime() {
  _has_bits_[0] &= ~0x00000002u;
}
void historicaltransactiondata_Data_TradeLog::clear_addtime() {
  addtime_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_addtime();
}
 const ::std::string& historicaltransactiondata_Data_TradeLog::addtime() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  return addtime_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_addtime(const ::std::string& value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
 void historicaltransactiondata_Data_TradeLog::set_addtime(const char* value) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
 void historicaltransactiondata_Data_TradeLog::set_addtime(const char* value, size_t size) {
  set_has_addtime();
  addtime_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}
 ::std::string* historicaltransactiondata_Data_TradeLog::mutable_addtime() {
  set_has_addtime();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  return addtime_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata_Data_TradeLog::release_addtime() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.addtime)
  clear_has_addtime();
  return addtime_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_allocated_addtime(::std::string* addtime) {
  if (addtime != NULL) {
    set_has_addtime();
  } else {
    clear_has_addtime();
  }
  addtime_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addtime);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.addtime)
}

// required string timestamp = 3;
bool historicaltransactiondata_Data_TradeLog::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void historicaltransactiondata_Data_TradeLog::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_timestamp();
}
 const ::std::string& historicaltransactiondata_Data_TradeLog::timestamp() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  return timestamp_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
 void historicaltransactiondata_Data_TradeLog::set_timestamp(const char* value) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
 void historicaltransactiondata_Data_TradeLog::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}
 ::std::string* historicaltransactiondata_Data_TradeLog::mutable_timestamp() {
  set_has_timestamp();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata_Data_TradeLog::release_timestamp() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
  clear_has_timestamp();
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.timestamp)
}

// required uint64 type = 4;
bool historicaltransactiondata_Data_TradeLog::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void historicaltransactiondata_Data_TradeLog::clear_type() {
  type_ = GOOGLE_ULONGLONG(0);
  clear_has_type();
}
 ::google::protobuf::uint64 historicaltransactiondata_Data_TradeLog::type() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.type)
  return type_;
}
 void historicaltransactiondata_Data_TradeLog::set_type(::google::protobuf::uint64 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.type)
}

// required string price = 5;
bool historicaltransactiondata_Data_TradeLog::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
void historicaltransactiondata_Data_TradeLog::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price();
}
 const ::std::string& historicaltransactiondata_Data_TradeLog::price() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.price)
  return price_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_price(const ::std::string& value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.price)
}
 void historicaltransactiondata_Data_TradeLog::set_price(const char* value) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.price)
}
 void historicaltransactiondata_Data_TradeLog::set_price(const char* value, size_t size) {
  set_has_price();
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.price)
}
 ::std::string* historicaltransactiondata_Data_TradeLog::mutable_price() {
  set_has_price();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata_Data_TradeLog::release_price() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.price)
  clear_has_price();
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    set_has_price();
  } else {
    clear_has_price();
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.price)
}

// required string mum = 6;
bool historicaltransactiondata_Data_TradeLog::has_mum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_mum() {
  _has_bits_[0] |= 0x00000020u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_mum() {
  _has_bits_[0] &= ~0x00000020u;
}
void historicaltransactiondata_Data_TradeLog::clear_mum() {
  mum_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mum();
}
 const ::std::string& historicaltransactiondata_Data_TradeLog::mum() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.mum)
  return mum_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_mum(const ::std::string& value) {
  set_has_mum();
  mum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
 void historicaltransactiondata_Data_TradeLog::set_mum(const char* value) {
  set_has_mum();
  mum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
 void historicaltransactiondata_Data_TradeLog::set_mum(const char* value, size_t size) {
  set_has_mum();
  mum_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.mum)
}
 ::std::string* historicaltransactiondata_Data_TradeLog::mutable_mum() {
  set_has_mum();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.mum)
  return mum_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata_Data_TradeLog::release_mum() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.mum)
  clear_has_mum();
  return mum_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_allocated_mum(::std::string* mum) {
  if (mum != NULL) {
    set_has_mum();
  } else {
    clear_has_mum();
  }
  mum_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mum);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.mum)
}

// required string num = 7;
bool historicaltransactiondata_Data_TradeLog::has_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void historicaltransactiondata_Data_TradeLog::set_has_num() {
  _has_bits_[0] |= 0x00000040u;
}
void historicaltransactiondata_Data_TradeLog::clear_has_num() {
  _has_bits_[0] &= ~0x00000040u;
}
void historicaltransactiondata_Data_TradeLog::clear_num() {
  num_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_num();
}
 const ::std::string& historicaltransactiondata_Data_TradeLog::num() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.TradeLog.num)
  return num_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_num(const ::std::string& value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.Data.TradeLog.num)
}
 void historicaltransactiondata_Data_TradeLog::set_num(const char* value) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.Data.TradeLog.num)
}
 void historicaltransactiondata_Data_TradeLog::set_num(const char* value, size_t size) {
  set_has_num();
  num_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.Data.TradeLog.num)
}
 ::std::string* historicaltransactiondata_Data_TradeLog::mutable_num() {
  set_has_num();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.TradeLog.num)
  return num_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata_Data_TradeLog::release_num() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.Data.TradeLog.num)
  clear_has_num();
  return num_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata_Data_TradeLog::set_allocated_num(::std::string* num) {
  if (num != NULL) {
    set_has_num();
  } else {
    clear_has_num();
  }
  num_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), num);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.Data.TradeLog.num)
}

// -------------------------------------------------------------------

// historicaltransactiondata_Data

// repeated .ukex.historicaltransactiondata.Data.TradeLog tradelog = 1;
int historicaltransactiondata_Data::tradelog_size() const {
  return tradelog_.size();
}
void historicaltransactiondata_Data::clear_tradelog() {
  tradelog_.Clear();
}
const ::ukex::historicaltransactiondata_Data_TradeLog& historicaltransactiondata_Data::tradelog(int index) const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Get(index);
}
::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::mutable_tradelog(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Mutable(index);
}
::ukex::historicaltransactiondata_Data_TradeLog* historicaltransactiondata_Data::add_tradelog() {
  // @@protoc_insertion_point(field_add:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >*
historicaltransactiondata_Data::mutable_tradelog() {
  // @@protoc_insertion_point(field_mutable_list:ukex.historicaltransactiondata.Data.tradelog)
  return &tradelog_;
}
const ::google::protobuf::RepeatedPtrField< ::ukex::historicaltransactiondata_Data_TradeLog >&
historicaltransactiondata_Data::tradelog() const {
  // @@protoc_insertion_point(field_list:ukex.historicaltransactiondata.Data.tradelog)
  return tradelog_;
}

// -------------------------------------------------------------------

// historicaltransactiondata

// required string type = 1;
bool historicaltransactiondata::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void historicaltransactiondata::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void historicaltransactiondata::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void historicaltransactiondata::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& historicaltransactiondata::type() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.type)
}
 void historicaltransactiondata::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.type)
}
 void historicaltransactiondata::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.type)
}
 ::std::string* historicaltransactiondata::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.type)
}

// required .ukex.historicaltransactiondata.Data data = 2;
bool historicaltransactiondata::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void historicaltransactiondata::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void historicaltransactiondata::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void historicaltransactiondata::clear_data() {
  if (data_ != NULL) data_->::ukex::historicaltransactiondata_Data::Clear();
  clear_has_data();
}
const ::ukex::historicaltransactiondata_Data& historicaltransactiondata::data() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
::ukex::historicaltransactiondata_Data* historicaltransactiondata::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::ukex::historicaltransactiondata_Data;
  }
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.data)
  return data_;
}
::ukex::historicaltransactiondata_Data* historicaltransactiondata::release_data() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.data)
  clear_has_data();
  ::ukex::historicaltransactiondata_Data* temp = data_;
  data_ = NULL;
  return temp;
}
void historicaltransactiondata::set_allocated_data(::ukex::historicaltransactiondata_Data* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.data)
}

// optional string token = 3;
bool historicaltransactiondata::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void historicaltransactiondata::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
void historicaltransactiondata::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void historicaltransactiondata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& historicaltransactiondata::token() const {
  // @@protoc_insertion_point(field_get:ukex.historicaltransactiondata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.historicaltransactiondata.token)
}
 void historicaltransactiondata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.historicaltransactiondata.token)
}
 void historicaltransactiondata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.historicaltransactiondata.token)
}
 ::std::string* historicaltransactiondata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.historicaltransactiondata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* historicaltransactiondata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.historicaltransactiondata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void historicaltransactiondata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.historicaltransactiondata.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
