// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.uptradebatch.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.uptradebatch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* uptradebatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  uptradebatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* uptradebatch_Trades_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  uptradebatch_Trades_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* uptradebatch_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2euptradebatch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2euptradebatch_2eproto() {
  protobuf_AddDesc_ukex_2euptradebatch_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.uptradebatch.proto");
  GOOGLE_CHECK(file != NULL);
  uptradebatch_descriptor_ = file->message_type(0);
  static const int uptradebatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch, paypassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch, trades_),
  };
  uptradebatch_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      uptradebatch_descriptor_,
      uptradebatch::default_instance_,
      uptradebatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch, _has_bits_[0]),
      -1,
      -1,
      sizeof(uptradebatch),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch, _internal_metadata_),
      -1);
  uptradebatch_Trades_descriptor_ = uptradebatch_descriptor_->nested_type(0);
  static const int uptradebatch_Trades_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch_Trades, marketid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch_Trades, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch_Trades, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch_Trades, type_),
  };
  uptradebatch_Trades_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      uptradebatch_Trades_descriptor_,
      uptradebatch_Trades::default_instance_,
      uptradebatch_Trades_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch_Trades, _has_bits_[0]),
      -1,
      -1,
      sizeof(uptradebatch_Trades),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(uptradebatch_Trades, _internal_metadata_),
      -1);
  uptradebatch_CONST_descriptor_ = uptradebatch_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2euptradebatch_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      uptradebatch_descriptor_, &uptradebatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      uptradebatch_Trades_descriptor_, &uptradebatch_Trades::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2euptradebatch_2eproto() {
  delete uptradebatch::default_instance_;
  delete uptradebatch_reflection_;
  delete uptradebatch_Trades::default_instance_;
  delete uptradebatch_Trades_reflection_;
}

void protobuf_AddDesc_ukex_2euptradebatch_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2euptradebatch_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027ukex.uptradebatch.proto\022\004ukex\"\265\001\n\014uptr"
    "adebatch\022\r\n\005token\030\001 \001(\t\022\023\n\013paypassword\030\002"
    " \002(\t\022)\n\006trades\030\003 \003(\0132\031.ukex.uptradebatch"
    ".Trades\032D\n\006Trades\022\020\n\010marketid\030\001 \002(\004\022\r\n\005p"
    "rice\030\002 \002(\004\022\013\n\003num\030\003 \002(\004\022\014\n\004type\030\004 \002(\r\"\020\n"
    "\005CONST\022\007\n\003CMD\020e", 215);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.uptradebatch.proto", &protobuf_RegisterTypes);
  uptradebatch::default_instance_ = new uptradebatch();
  uptradebatch_Trades::default_instance_ = new uptradebatch_Trades();
  uptradebatch::default_instance_->InitAsDefaultInstance();
  uptradebatch_Trades::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2euptradebatch_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2euptradebatch_2eproto {
  StaticDescriptorInitializer_ukex_2euptradebatch_2eproto() {
    protobuf_AddDesc_ukex_2euptradebatch_2eproto();
  }
} static_descriptor_initializer_ukex_2euptradebatch_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* uptradebatch_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uptradebatch_CONST_descriptor_;
}
bool uptradebatch_CONST_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const uptradebatch_CONST uptradebatch::CMD;
const uptradebatch_CONST uptradebatch::CONST_MIN;
const uptradebatch_CONST uptradebatch::CONST_MAX;
const int uptradebatch::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int uptradebatch_Trades::kMarketidFieldNumber;
const int uptradebatch_Trades::kPriceFieldNumber;
const int uptradebatch_Trades::kNumFieldNumber;
const int uptradebatch_Trades::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

uptradebatch_Trades::uptradebatch_Trades()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.uptradebatch.Trades)
}

void uptradebatch_Trades::InitAsDefaultInstance() {
}

uptradebatch_Trades::uptradebatch_Trades(const uptradebatch_Trades& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.uptradebatch.Trades)
}

void uptradebatch_Trades::SharedCtor() {
  _cached_size_ = 0;
  marketid_ = GOOGLE_ULONGLONG(0);
  price_ = GOOGLE_ULONGLONG(0);
  num_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uptradebatch_Trades::~uptradebatch_Trades() {
  // @@protoc_insertion_point(destructor:ukex.uptradebatch.Trades)
  SharedDtor();
}

void uptradebatch_Trades::SharedDtor() {
  if (this != default_instance_) {
  }
}

void uptradebatch_Trades::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* uptradebatch_Trades::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uptradebatch_Trades_descriptor_;
}

const uptradebatch_Trades& uptradebatch_Trades::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2euptradebatch_2eproto();
  return *default_instance_;
}

uptradebatch_Trades* uptradebatch_Trades::default_instance_ = NULL;

uptradebatch_Trades* uptradebatch_Trades::New(::google::protobuf::Arena* arena) const {
  uptradebatch_Trades* n = new uptradebatch_Trades;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void uptradebatch_Trades::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.uptradebatch.Trades)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(uptradebatch_Trades, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<uptradebatch_Trades*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(marketid_, type_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool uptradebatch_Trades::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.uptradebatch.Trades)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 marketid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &marketid_)));
          set_has_marketid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_price;
        break;
      }

      // required uint64 price = 2;
      case 2: {
        if (tag == 16) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required uint64 num = 3;
      case 3: {
        if (tag == 24) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required uint32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.uptradebatch.Trades)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.uptradebatch.Trades)
  return false;
#undef DO_
}

void uptradebatch_Trades::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.uptradebatch.Trades)
  // required uint64 marketid = 1;
  if (has_marketid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->marketid(), output);
  }

  // required uint64 price = 2;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->price(), output);
  }

  // required uint64 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->num(), output);
  }

  // required uint32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.uptradebatch.Trades)
}

::google::protobuf::uint8* uptradebatch_Trades::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.uptradebatch.Trades)
  // required uint64 marketid = 1;
  if (has_marketid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->marketid(), target);
  }

  // required uint64 price = 2;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->price(), target);
  }

  // required uint64 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->num(), target);
  }

  // required uint32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.uptradebatch.Trades)
  return target;
}

int uptradebatch_Trades::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.uptradebatch.Trades)
  int total_size = 0;

  if (has_marketid()) {
    // required uint64 marketid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->marketid());
  }

  if (has_price()) {
    // required uint64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());
  }

  if (has_num()) {
    // required uint64 num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num());
  }

  if (has_type()) {
    // required uint32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
int uptradebatch_Trades::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.uptradebatch.Trades)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 marketid = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->marketid());

    // required uint64 price = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->price());

    // required uint64 num = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->num());

    // required uint32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void uptradebatch_Trades::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.uptradebatch.Trades)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const uptradebatch_Trades* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const uptradebatch_Trades>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.uptradebatch.Trades)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.uptradebatch.Trades)
    MergeFrom(*source);
  }
}

void uptradebatch_Trades::MergeFrom(const uptradebatch_Trades& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.uptradebatch.Trades)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marketid()) {
      set_marketid(from.marketid());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void uptradebatch_Trades::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.uptradebatch.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uptradebatch_Trades::CopyFrom(const uptradebatch_Trades& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.uptradebatch.Trades)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uptradebatch_Trades::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void uptradebatch_Trades::Swap(uptradebatch_Trades* other) {
  if (other == this) return;
  InternalSwap(other);
}
void uptradebatch_Trades::InternalSwap(uptradebatch_Trades* other) {
  std::swap(marketid_, other->marketid_);
  std::swap(price_, other->price_);
  std::swap(num_, other->num_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata uptradebatch_Trades::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = uptradebatch_Trades_descriptor_;
  metadata.reflection = uptradebatch_Trades_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int uptradebatch::kTokenFieldNumber;
const int uptradebatch::kPaypasswordFieldNumber;
const int uptradebatch::kTradesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

uptradebatch::uptradebatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.uptradebatch)
}

void uptradebatch::InitAsDefaultInstance() {
}

uptradebatch::uptradebatch(const uptradebatch& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.uptradebatch)
}

void uptradebatch::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paypassword_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

uptradebatch::~uptradebatch() {
  // @@protoc_insertion_point(destructor:ukex.uptradebatch)
  SharedDtor();
}

void uptradebatch::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paypassword_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void uptradebatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* uptradebatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return uptradebatch_descriptor_;
}

const uptradebatch& uptradebatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2euptradebatch_2eproto();
  return *default_instance_;
}

uptradebatch* uptradebatch::default_instance_ = NULL;

uptradebatch* uptradebatch::New(::google::protobuf::Arena* arena) const {
  uptradebatch* n = new uptradebatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void uptradebatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.uptradebatch)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_paypassword()) {
      paypassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  trades_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool uptradebatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.uptradebatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.uptradebatch.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_paypassword;
        break;
      }

      // required string paypassword = 2;
      case 2: {
        if (tag == 18) {
         parse_paypassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paypassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paypassword().data(), this->paypassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.uptradebatch.paypassword");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_trades;
        break;
      }

      // repeated .ukex.uptradebatch.Trades trades = 3;
      case 3: {
        if (tag == 26) {
         parse_trades:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trades()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_trades;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.uptradebatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.uptradebatch)
  return false;
#undef DO_
}

void uptradebatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.uptradebatch)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.uptradebatch.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->token(), output);
  }

  // required string paypassword = 2;
  if (has_paypassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paypassword().data(), this->paypassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.uptradebatch.paypassword");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->paypassword(), output);
  }

  // repeated .ukex.uptradebatch.Trades trades = 3;
  for (unsigned int i = 0, n = this->trades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->trades(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.uptradebatch)
}

::google::protobuf::uint8* uptradebatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.uptradebatch)
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.uptradebatch.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required string paypassword = 2;
  if (has_paypassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paypassword().data(), this->paypassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.uptradebatch.paypassword");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->paypassword(), target);
  }

  // repeated .ukex.uptradebatch.Trades trades = 3;
  for (unsigned int i = 0, n = this->trades_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->trades(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.uptradebatch)
  return target;
}

int uptradebatch::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.uptradebatch)
  int total_size = 0;

  // required string paypassword = 2;
  if (has_paypassword()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->paypassword());
  }
  // optional string token = 1;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // repeated .ukex.uptradebatch.Trades trades = 3;
  total_size += 1 * this->trades_size();
  for (int i = 0; i < this->trades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trades(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void uptradebatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.uptradebatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const uptradebatch* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const uptradebatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.uptradebatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.uptradebatch)
    MergeFrom(*source);
  }
}

void uptradebatch::MergeFrom(const uptradebatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.uptradebatch)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  trades_.MergeFrom(from.trades_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (from.has_paypassword()) {
      set_has_paypassword();
      paypassword_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paypassword_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void uptradebatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.uptradebatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void uptradebatch::CopyFrom(const uptradebatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.uptradebatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool uptradebatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->trades())) return false;
  return true;
}

void uptradebatch::Swap(uptradebatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void uptradebatch::InternalSwap(uptradebatch* other) {
  token_.Swap(&other->token_);
  paypassword_.Swap(&other->paypassword_);
  trades_.UnsafeArenaSwap(&other->trades_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata uptradebatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = uptradebatch_descriptor_;
  metadata.reflection = uptradebatch_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// uptradebatch_Trades

// required uint64 marketid = 1;
bool uptradebatch_Trades::has_marketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void uptradebatch_Trades::set_has_marketid() {
  _has_bits_[0] |= 0x00000001u;
}
void uptradebatch_Trades::clear_has_marketid() {
  _has_bits_[0] &= ~0x00000001u;
}
void uptradebatch_Trades::clear_marketid() {
  marketid_ = GOOGLE_ULONGLONG(0);
  clear_has_marketid();
}
 ::google::protobuf::uint64 uptradebatch_Trades::marketid() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.marketid)
  return marketid_;
}
 void uptradebatch_Trades::set_marketid(::google::protobuf::uint64 value) {
  set_has_marketid();
  marketid_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.marketid)
}

// required uint64 price = 2;
bool uptradebatch_Trades::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void uptradebatch_Trades::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
void uptradebatch_Trades::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void uptradebatch_Trades::clear_price() {
  price_ = GOOGLE_ULONGLONG(0);
  clear_has_price();
}
 ::google::protobuf::uint64 uptradebatch_Trades::price() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.price)
  return price_;
}
 void uptradebatch_Trades::set_price(::google::protobuf::uint64 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.price)
}

// required uint64 num = 3;
bool uptradebatch_Trades::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void uptradebatch_Trades::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
void uptradebatch_Trades::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void uptradebatch_Trades::clear_num() {
  num_ = GOOGLE_ULONGLONG(0);
  clear_has_num();
}
 ::google::protobuf::uint64 uptradebatch_Trades::num() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.num)
  return num_;
}
 void uptradebatch_Trades::set_num(::google::protobuf::uint64 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.num)
}

// required uint32 type = 4;
bool uptradebatch_Trades::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void uptradebatch_Trades::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void uptradebatch_Trades::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void uptradebatch_Trades::clear_type() {
  type_ = 0u;
  clear_has_type();
}
 ::google::protobuf::uint32 uptradebatch_Trades::type() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.Trades.type)
  return type_;
}
 void uptradebatch_Trades::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.Trades.type)
}

// -------------------------------------------------------------------

// uptradebatch

// optional string token = 1;
bool uptradebatch::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void uptradebatch::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
void uptradebatch::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
void uptradebatch::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& uptradebatch::token() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void uptradebatch::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.token)
}
 void uptradebatch::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.token)
}
 void uptradebatch::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.token)
}
 ::std::string* uptradebatch::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* uptradebatch::release_token() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void uptradebatch::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.token)
}

// required string paypassword = 2;
bool uptradebatch::has_paypassword() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void uptradebatch::set_has_paypassword() {
  _has_bits_[0] |= 0x00000002u;
}
void uptradebatch::clear_has_paypassword() {
  _has_bits_[0] &= ~0x00000002u;
}
void uptradebatch::clear_paypassword() {
  paypassword_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paypassword();
}
 const ::std::string& uptradebatch::paypassword() const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.paypassword)
  return paypassword_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void uptradebatch::set_paypassword(const ::std::string& value) {
  set_has_paypassword();
  paypassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.uptradebatch.paypassword)
}
 void uptradebatch::set_paypassword(const char* value) {
  set_has_paypassword();
  paypassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.uptradebatch.paypassword)
}
 void uptradebatch::set_paypassword(const char* value, size_t size) {
  set_has_paypassword();
  paypassword_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.uptradebatch.paypassword)
}
 ::std::string* uptradebatch::mutable_paypassword() {
  set_has_paypassword();
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.paypassword)
  return paypassword_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* uptradebatch::release_paypassword() {
  // @@protoc_insertion_point(field_release:ukex.uptradebatch.paypassword)
  clear_has_paypassword();
  return paypassword_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void uptradebatch::set_allocated_paypassword(::std::string* paypassword) {
  if (paypassword != NULL) {
    set_has_paypassword();
  } else {
    clear_has_paypassword();
  }
  paypassword_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paypassword);
  // @@protoc_insertion_point(field_set_allocated:ukex.uptradebatch.paypassword)
}

// repeated .ukex.uptradebatch.Trades trades = 3;
int uptradebatch::trades_size() const {
  return trades_.size();
}
void uptradebatch::clear_trades() {
  trades_.Clear();
}
const ::ukex::uptradebatch_Trades& uptradebatch::trades(int index) const {
  // @@protoc_insertion_point(field_get:ukex.uptradebatch.trades)
  return trades_.Get(index);
}
::ukex::uptradebatch_Trades* uptradebatch::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.uptradebatch.trades)
  return trades_.Mutable(index);
}
::ukex::uptradebatch_Trades* uptradebatch::add_trades() {
  // @@protoc_insertion_point(field_add:ukex.uptradebatch.trades)
  return trades_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades >*
uptradebatch::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:ukex.uptradebatch.trades)
  return &trades_;
}
const ::google::protobuf::RepeatedPtrField< ::ukex::uptradebatch_Trades >&
uptradebatch::trades() const {
  // @@protoc_insertion_point(field_list:ukex.uptradebatch.trades)
  return trades_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
