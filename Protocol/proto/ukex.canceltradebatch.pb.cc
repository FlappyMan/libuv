// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.canceltradebatch.proto

#include "ukex.canceltradebatch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace ukex {
class canceltradebatchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<canceltradebatch> _instance;
} _canceltradebatch_default_instance_;
}  // namespace ukex
static void InitDefaultsscc_info_canceltradebatch_ukex_2ecanceltradebatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ukex::_canceltradebatch_default_instance_;
    new (ptr) ::ukex::canceltradebatch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ukex::canceltradebatch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_canceltradebatch_ukex_2ecanceltradebatch_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_canceltradebatch_ukex_2ecanceltradebatch_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ukex_2ecanceltradebatch_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ukex_2ecanceltradebatch_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ukex_2ecanceltradebatch_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ukex_2ecanceltradebatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ukex::canceltradebatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ukex::canceltradebatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ukex::canceltradebatch, ids_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::ukex::canceltradebatch)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ukex::_canceltradebatch_default_instance_),
};

const char descriptor_table_protodef_ukex_2ecanceltradebatch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033ukex.canceltradebatch.proto\022\004ukex\"1\n\020c"
  "anceltradebatch\022\013\n\003ids\030\001 \003(\004\"\020\n\005CONST\022\007\n"
  "\003CMD\020g"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ukex_2ecanceltradebatch_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ukex_2ecanceltradebatch_2eproto_sccs[1] = {
  &scc_info_canceltradebatch_ukex_2ecanceltradebatch_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ukex_2ecanceltradebatch_2eproto_once;
static bool descriptor_table_ukex_2ecanceltradebatch_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ukex_2ecanceltradebatch_2eproto = {
  &descriptor_table_ukex_2ecanceltradebatch_2eproto_initialized, descriptor_table_protodef_ukex_2ecanceltradebatch_2eproto, "ukex.canceltradebatch.proto", 86,
  &descriptor_table_ukex_2ecanceltradebatch_2eproto_once, descriptor_table_ukex_2ecanceltradebatch_2eproto_sccs, descriptor_table_ukex_2ecanceltradebatch_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_ukex_2ecanceltradebatch_2eproto::offsets,
  file_level_metadata_ukex_2ecanceltradebatch_2eproto, 1, file_level_enum_descriptors_ukex_2ecanceltradebatch_2eproto, file_level_service_descriptors_ukex_2ecanceltradebatch_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ukex_2ecanceltradebatch_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ukex_2ecanceltradebatch_2eproto), true);
namespace ukex {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* canceltradebatch_CONST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ukex_2ecanceltradebatch_2eproto);
  return file_level_enum_descriptors_ukex_2ecanceltradebatch_2eproto[0];
}
bool canceltradebatch_CONST_IsValid(int value) {
  switch (value) {
    case 103:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr canceltradebatch_CONST canceltradebatch::CMD;
constexpr canceltradebatch_CONST canceltradebatch::CONST_MIN;
constexpr canceltradebatch_CONST canceltradebatch::CONST_MAX;
constexpr int canceltradebatch::CONST_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void canceltradebatch::InitAsDefaultInstance() {
}
class canceltradebatch::_Internal {
 public:
  using HasBits = decltype(std::declval<canceltradebatch>()._has_bits_);
};

canceltradebatch::canceltradebatch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.canceltradebatch)
}
canceltradebatch::canceltradebatch(const canceltradebatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ukex.canceltradebatch)
}

void canceltradebatch::SharedCtor() {
}

canceltradebatch::~canceltradebatch() {
  // @@protoc_insertion_point(destructor:ukex.canceltradebatch)
  SharedDtor();
}

void canceltradebatch::SharedDtor() {
}

void canceltradebatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const canceltradebatch& canceltradebatch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_canceltradebatch_ukex_2ecanceltradebatch_2eproto.base);
  return *internal_default_instance();
}


void canceltradebatch::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.canceltradebatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* canceltradebatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* canceltradebatch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.canceltradebatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.canceltradebatch)
  return target;
}

size_t canceltradebatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.canceltradebatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void canceltradebatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.canceltradebatch)
  GOOGLE_DCHECK_NE(&from, this);
  const canceltradebatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<canceltradebatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.canceltradebatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.canceltradebatch)
    MergeFrom(*source);
  }
}

void canceltradebatch::MergeFrom(const canceltradebatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.canceltradebatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
}

void canceltradebatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.canceltradebatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void canceltradebatch::CopyFrom(const canceltradebatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.canceltradebatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool canceltradebatch::IsInitialized() const {
  return true;
}

void canceltradebatch::InternalSwap(canceltradebatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ids_.InternalSwap(&other->ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata canceltradebatch::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ukex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ukex::canceltradebatch* Arena::CreateMaybeMessage< ::ukex::canceltradebatch >(Arena* arena) {
  return Arena::CreateInternal< ::ukex::canceltradebatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
