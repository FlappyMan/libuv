// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.klinehistoricaldata.proto

#ifndef PROTOBUF_ukex_2eklinehistoricaldata_2eproto__INCLUDED
#define PROTOBUF_ukex_2eklinehistoricaldata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ukex {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ukex_2eklinehistoricaldata_2eproto();
void protobuf_AssignDesc_ukex_2eklinehistoricaldata_2eproto();
void protobuf_ShutdownFile_ukex_2eklinehistoricaldata_2eproto();

class klinehistoricaldata;
class klinehistoricaldata_Data;

enum klinehistoricaldata_CONST {
  klinehistoricaldata_CONST_CMD = 110
};
bool klinehistoricaldata_CONST_IsValid(int value);
const klinehistoricaldata_CONST klinehistoricaldata_CONST_CONST_MIN = klinehistoricaldata_CONST_CMD;
const klinehistoricaldata_CONST klinehistoricaldata_CONST_CONST_MAX = klinehistoricaldata_CONST_CMD;
const int klinehistoricaldata_CONST_CONST_ARRAYSIZE = klinehistoricaldata_CONST_CONST_MAX + 1;

const ::google::protobuf::EnumDescriptor* klinehistoricaldata_CONST_descriptor();
inline const ::std::string& klinehistoricaldata_CONST_Name(klinehistoricaldata_CONST value) {
  return ::google::protobuf::internal::NameOfEnum(
    klinehistoricaldata_CONST_descriptor(), value);
}
inline bool klinehistoricaldata_CONST_Parse(
    const ::std::string& name, klinehistoricaldata_CONST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<klinehistoricaldata_CONST>(
    klinehistoricaldata_CONST_descriptor(), name, value);
}
// ===================================================================

class klinehistoricaldata_Data : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.klinehistoricaldata.Data) */ {
 public:
  klinehistoricaldata_Data();
  virtual ~klinehistoricaldata_Data();

  klinehistoricaldata_Data(const klinehistoricaldata_Data& from);

  inline klinehistoricaldata_Data& operator=(const klinehistoricaldata_Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const klinehistoricaldata_Data& default_instance();

  void Swap(klinehistoricaldata_Data* other);

  // implements Message ----------------------------------------------

  inline klinehistoricaldata_Data* New() const { return New(NULL); }

  klinehistoricaldata_Data* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const klinehistoricaldata_Data& from);
  void MergeFrom(const klinehistoricaldata_Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(klinehistoricaldata_Data* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string k0 = 1;
  bool has_k0() const;
  void clear_k0();
  static const int kK0FieldNumber = 1;
  const ::std::string& k0() const;
  void set_k0(const ::std::string& value);
  void set_k0(const char* value);
  void set_k0(const char* value, size_t size);
  ::std::string* mutable_k0();
  ::std::string* release_k0();
  void set_allocated_k0(::std::string* k0);

  // required string k1 = 2;
  bool has_k1() const;
  void clear_k1();
  static const int kK1FieldNumber = 2;
  const ::std::string& k1() const;
  void set_k1(const ::std::string& value);
  void set_k1(const char* value);
  void set_k1(const char* value, size_t size);
  ::std::string* mutable_k1();
  ::std::string* release_k1();
  void set_allocated_k1(::std::string* k1);

  // required string k2 = 3;
  bool has_k2() const;
  void clear_k2();
  static const int kK2FieldNumber = 3;
  const ::std::string& k2() const;
  void set_k2(const ::std::string& value);
  void set_k2(const char* value);
  void set_k2(const char* value, size_t size);
  ::std::string* mutable_k2();
  ::std::string* release_k2();
  void set_allocated_k2(::std::string* k2);

  // required string k3 = 4;
  bool has_k3() const;
  void clear_k3();
  static const int kK3FieldNumber = 4;
  const ::std::string& k3() const;
  void set_k3(const ::std::string& value);
  void set_k3(const char* value);
  void set_k3(const char* value, size_t size);
  ::std::string* mutable_k3();
  ::std::string* release_k3();
  void set_allocated_k3(::std::string* k3);

  // required string k4 = 5;
  bool has_k4() const;
  void clear_k4();
  static const int kK4FieldNumber = 5;
  const ::std::string& k4() const;
  void set_k4(const ::std::string& value);
  void set_k4(const char* value);
  void set_k4(const char* value, size_t size);
  ::std::string* mutable_k4();
  ::std::string* release_k4();
  void set_allocated_k4(::std::string* k4);

  // required string k5 = 6;
  bool has_k5() const;
  void clear_k5();
  static const int kK5FieldNumber = 6;
  const ::std::string& k5() const;
  void set_k5(const ::std::string& value);
  void set_k5(const char* value);
  void set_k5(const char* value, size_t size);
  ::std::string* mutable_k5();
  ::std::string* release_k5();
  void set_allocated_k5(::std::string* k5);

  // @@protoc_insertion_point(class_scope:ukex.klinehistoricaldata.Data)
 private:
  inline void set_has_k0();
  inline void clear_has_k0();
  inline void set_has_k1();
  inline void clear_has_k1();
  inline void set_has_k2();
  inline void clear_has_k2();
  inline void set_has_k3();
  inline void clear_has_k3();
  inline void set_has_k4();
  inline void clear_has_k4();
  inline void set_has_k5();
  inline void clear_has_k5();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr k0_;
  ::google::protobuf::internal::ArenaStringPtr k1_;
  ::google::protobuf::internal::ArenaStringPtr k2_;
  ::google::protobuf::internal::ArenaStringPtr k3_;
  ::google::protobuf::internal::ArenaStringPtr k4_;
  ::google::protobuf::internal::ArenaStringPtr k5_;
  friend void  protobuf_AddDesc_ukex_2eklinehistoricaldata_2eproto();
  friend void protobuf_AssignDesc_ukex_2eklinehistoricaldata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2eklinehistoricaldata_2eproto();

  void InitAsDefaultInstance();
  static klinehistoricaldata_Data* default_instance_;
};
// -------------------------------------------------------------------

class klinehistoricaldata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ukex.klinehistoricaldata) */ {
 public:
  klinehistoricaldata();
  virtual ~klinehistoricaldata();

  klinehistoricaldata(const klinehistoricaldata& from);

  inline klinehistoricaldata& operator=(const klinehistoricaldata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const klinehistoricaldata& default_instance();

  void Swap(klinehistoricaldata* other);

  // implements Message ----------------------------------------------

  inline klinehistoricaldata* New() const { return New(NULL); }

  klinehistoricaldata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const klinehistoricaldata& from);
  void MergeFrom(const klinehistoricaldata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(klinehistoricaldata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef klinehistoricaldata_Data Data;

  typedef klinehistoricaldata_CONST CONST;
  static const CONST CMD =
    klinehistoricaldata_CONST_CMD;
  static inline bool CONST_IsValid(int value) {
    return klinehistoricaldata_CONST_IsValid(value);
  }
  static const CONST CONST_MIN =
    klinehistoricaldata_CONST_CONST_MIN;
  static const CONST CONST_MAX =
    klinehistoricaldata_CONST_CONST_MAX;
  static const int CONST_ARRAYSIZE =
    klinehistoricaldata_CONST_CONST_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CONST_descriptor() {
    return klinehistoricaldata_CONST_descriptor();
  }
  static inline const ::std::string& CONST_Name(CONST value) {
    return klinehistoricaldata_CONST_Name(value);
  }
  static inline bool CONST_Parse(const ::std::string& name,
      CONST* value) {
    return klinehistoricaldata_CONST_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .ukex.klinehistoricaldata.Data data = 1;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::ukex::klinehistoricaldata_Data& data(int index) const;
  ::ukex::klinehistoricaldata_Data* mutable_data(int index);
  ::ukex::klinehistoricaldata_Data* add_data();
  ::google::protobuf::RepeatedPtrField< ::ukex::klinehistoricaldata_Data >*
      mutable_data();
  const ::google::protobuf::RepeatedPtrField< ::ukex::klinehistoricaldata_Data >&
      data() const;

  // optional string token = 2;
  bool has_token() const;
  void clear_token();
  static const int kTokenFieldNumber = 2;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:ukex.klinehistoricaldata)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ukex::klinehistoricaldata_Data > data_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  friend void  protobuf_AddDesc_ukex_2eklinehistoricaldata_2eproto();
  friend void protobuf_AssignDesc_ukex_2eklinehistoricaldata_2eproto();
  friend void protobuf_ShutdownFile_ukex_2eklinehistoricaldata_2eproto();

  void InitAsDefaultInstance();
  static klinehistoricaldata* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// klinehistoricaldata_Data

// required string k0 = 1;
inline bool klinehistoricaldata_Data::has_k0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void klinehistoricaldata_Data::set_has_k0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void klinehistoricaldata_Data::clear_has_k0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void klinehistoricaldata_Data::clear_k0() {
  k0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k0();
}
inline const ::std::string& klinehistoricaldata_Data::k0() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.Data.k0)
  return k0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_k0(const ::std::string& value) {
  set_has_k0();
  k0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.Data.k0)
}
inline void klinehistoricaldata_Data::set_k0(const char* value) {
  set_has_k0();
  k0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.Data.k0)
}
inline void klinehistoricaldata_Data::set_k0(const char* value, size_t size) {
  set_has_k0();
  k0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.Data.k0)
}
inline ::std::string* klinehistoricaldata_Data::mutable_k0() {
  set_has_k0();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.Data.k0)
  return k0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata_Data::release_k0() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.Data.k0)
  clear_has_k0();
  return k0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_allocated_k0(::std::string* k0) {
  if (k0 != NULL) {
    set_has_k0();
  } else {
    clear_has_k0();
  }
  k0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k0);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.Data.k0)
}

// required string k1 = 2;
inline bool klinehistoricaldata_Data::has_k1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void klinehistoricaldata_Data::set_has_k1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void klinehistoricaldata_Data::clear_has_k1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void klinehistoricaldata_Data::clear_k1() {
  k1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k1();
}
inline const ::std::string& klinehistoricaldata_Data::k1() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.Data.k1)
  return k1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_k1(const ::std::string& value) {
  set_has_k1();
  k1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.Data.k1)
}
inline void klinehistoricaldata_Data::set_k1(const char* value) {
  set_has_k1();
  k1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.Data.k1)
}
inline void klinehistoricaldata_Data::set_k1(const char* value, size_t size) {
  set_has_k1();
  k1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.Data.k1)
}
inline ::std::string* klinehistoricaldata_Data::mutable_k1() {
  set_has_k1();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.Data.k1)
  return k1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata_Data::release_k1() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.Data.k1)
  clear_has_k1();
  return k1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_allocated_k1(::std::string* k1) {
  if (k1 != NULL) {
    set_has_k1();
  } else {
    clear_has_k1();
  }
  k1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k1);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.Data.k1)
}

// required string k2 = 3;
inline bool klinehistoricaldata_Data::has_k2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void klinehistoricaldata_Data::set_has_k2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void klinehistoricaldata_Data::clear_has_k2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void klinehistoricaldata_Data::clear_k2() {
  k2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k2();
}
inline const ::std::string& klinehistoricaldata_Data::k2() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.Data.k2)
  return k2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_k2(const ::std::string& value) {
  set_has_k2();
  k2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.Data.k2)
}
inline void klinehistoricaldata_Data::set_k2(const char* value) {
  set_has_k2();
  k2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.Data.k2)
}
inline void klinehistoricaldata_Data::set_k2(const char* value, size_t size) {
  set_has_k2();
  k2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.Data.k2)
}
inline ::std::string* klinehistoricaldata_Data::mutable_k2() {
  set_has_k2();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.Data.k2)
  return k2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata_Data::release_k2() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.Data.k2)
  clear_has_k2();
  return k2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_allocated_k2(::std::string* k2) {
  if (k2 != NULL) {
    set_has_k2();
  } else {
    clear_has_k2();
  }
  k2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k2);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.Data.k2)
}

// required string k3 = 4;
inline bool klinehistoricaldata_Data::has_k3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void klinehistoricaldata_Data::set_has_k3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void klinehistoricaldata_Data::clear_has_k3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void klinehistoricaldata_Data::clear_k3() {
  k3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k3();
}
inline const ::std::string& klinehistoricaldata_Data::k3() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.Data.k3)
  return k3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_k3(const ::std::string& value) {
  set_has_k3();
  k3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.Data.k3)
}
inline void klinehistoricaldata_Data::set_k3(const char* value) {
  set_has_k3();
  k3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.Data.k3)
}
inline void klinehistoricaldata_Data::set_k3(const char* value, size_t size) {
  set_has_k3();
  k3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.Data.k3)
}
inline ::std::string* klinehistoricaldata_Data::mutable_k3() {
  set_has_k3();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.Data.k3)
  return k3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata_Data::release_k3() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.Data.k3)
  clear_has_k3();
  return k3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_allocated_k3(::std::string* k3) {
  if (k3 != NULL) {
    set_has_k3();
  } else {
    clear_has_k3();
  }
  k3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k3);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.Data.k3)
}

// required string k4 = 5;
inline bool klinehistoricaldata_Data::has_k4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void klinehistoricaldata_Data::set_has_k4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void klinehistoricaldata_Data::clear_has_k4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void klinehistoricaldata_Data::clear_k4() {
  k4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k4();
}
inline const ::std::string& klinehistoricaldata_Data::k4() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.Data.k4)
  return k4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_k4(const ::std::string& value) {
  set_has_k4();
  k4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.Data.k4)
}
inline void klinehistoricaldata_Data::set_k4(const char* value) {
  set_has_k4();
  k4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.Data.k4)
}
inline void klinehistoricaldata_Data::set_k4(const char* value, size_t size) {
  set_has_k4();
  k4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.Data.k4)
}
inline ::std::string* klinehistoricaldata_Data::mutable_k4() {
  set_has_k4();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.Data.k4)
  return k4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata_Data::release_k4() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.Data.k4)
  clear_has_k4();
  return k4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_allocated_k4(::std::string* k4) {
  if (k4 != NULL) {
    set_has_k4();
  } else {
    clear_has_k4();
  }
  k4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k4);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.Data.k4)
}

// required string k5 = 6;
inline bool klinehistoricaldata_Data::has_k5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void klinehistoricaldata_Data::set_has_k5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void klinehistoricaldata_Data::clear_has_k5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void klinehistoricaldata_Data::clear_k5() {
  k5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k5();
}
inline const ::std::string& klinehistoricaldata_Data::k5() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.Data.k5)
  return k5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_k5(const ::std::string& value) {
  set_has_k5();
  k5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.Data.k5)
}
inline void klinehistoricaldata_Data::set_k5(const char* value) {
  set_has_k5();
  k5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.Data.k5)
}
inline void klinehistoricaldata_Data::set_k5(const char* value, size_t size) {
  set_has_k5();
  k5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.Data.k5)
}
inline ::std::string* klinehistoricaldata_Data::mutable_k5() {
  set_has_k5();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.Data.k5)
  return k5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata_Data::release_k5() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.Data.k5)
  clear_has_k5();
  return k5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata_Data::set_allocated_k5(::std::string* k5) {
  if (k5 != NULL) {
    set_has_k5();
  } else {
    clear_has_k5();
  }
  k5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k5);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.Data.k5)
}

// -------------------------------------------------------------------

// klinehistoricaldata

// repeated .ukex.klinehistoricaldata.Data data = 1;
inline int klinehistoricaldata::data_size() const {
  return data_.size();
}
inline void klinehistoricaldata::clear_data() {
  data_.Clear();
}
inline const ::ukex::klinehistoricaldata_Data& klinehistoricaldata::data(int index) const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.data)
  return data_.Get(index);
}
inline ::ukex::klinehistoricaldata_Data* klinehistoricaldata::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.data)
  return data_.Mutable(index);
}
inline ::ukex::klinehistoricaldata_Data* klinehistoricaldata::add_data() {
  // @@protoc_insertion_point(field_add:ukex.klinehistoricaldata.data)
  return data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ukex::klinehistoricaldata_Data >*
klinehistoricaldata::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ukex.klinehistoricaldata.data)
  return &data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ukex::klinehistoricaldata_Data >&
klinehistoricaldata::data() const {
  // @@protoc_insertion_point(field_list:ukex.klinehistoricaldata.data)
  return data_;
}

// optional string token = 2;
inline bool klinehistoricaldata::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void klinehistoricaldata::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void klinehistoricaldata::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void klinehistoricaldata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
inline const ::std::string& klinehistoricaldata::token() const {
  // @@protoc_insertion_point(field_get:ukex.klinehistoricaldata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinehistoricaldata.token)
}
inline void klinehistoricaldata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinehistoricaldata.token)
}
inline void klinehistoricaldata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinehistoricaldata.token)
}
inline ::std::string* klinehistoricaldata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.klinehistoricaldata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* klinehistoricaldata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.klinehistoricaldata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void klinehistoricaldata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinehistoricaldata.token)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ukex::klinehistoricaldata_CONST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ukex::klinehistoricaldata_CONST>() {
  return ::ukex::klinehistoricaldata_CONST_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ukex_2eklinehistoricaldata_2eproto__INCLUDED
