// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukex.klinedata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ukex.klinedata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ukex {

namespace {

const ::google::protobuf::Descriptor* klinedata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  klinedata_reflection_ = NULL;
const ::google::protobuf::Descriptor* klinedata_Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  klinedata_Data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* klinedata_CONST_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ukex_2eklinedata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ukex_2eklinedata_2eproto() {
  protobuf_AddDesc_ukex_2eklinedata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ukex.klinedata.proto");
  GOOGLE_CHECK(file != NULL);
  klinedata_descriptor_ = file->message_type(0);
  static const int klinedata_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata, token_),
  };
  klinedata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      klinedata_descriptor_,
      klinedata::default_instance_,
      klinedata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata, _has_bits_[0]),
      -1,
      -1,
      sizeof(klinedata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata, _internal_metadata_),
      -1);
  klinedata_Data_descriptor_ = klinedata_descriptor_->nested_type(0);
  static const int klinedata_Data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, k0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, k1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, k2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, k3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, k4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, k5_),
  };
  klinedata_Data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      klinedata_Data_descriptor_,
      klinedata_Data::default_instance_,
      klinedata_Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, _has_bits_[0]),
      -1,
      -1,
      sizeof(klinedata_Data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(klinedata_Data, _internal_metadata_),
      -1);
  klinedata_CONST_descriptor_ = klinedata_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ukex_2eklinedata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      klinedata_descriptor_, &klinedata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      klinedata_Data_descriptor_, &klinedata_Data::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ukex_2eklinedata_2eproto() {
  delete klinedata::default_instance_;
  delete klinedata_reflection_;
  delete klinedata_Data::default_instance_;
  delete klinedata_Data_reflection_;
}

void protobuf_AddDesc_ukex_2eklinedata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ukex_2eklinedata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ukex.klinedata.proto\022\004ukex\"\256\001\n\tklineda"
    "ta\022\014\n\004type\030\001 \002(\t\022\"\n\004data\030\002 \003(\0132\024.ukex.kl"
    "inedata.Data\022\r\n\005token\030\003 \001(\t\032N\n\004Data\022\n\n\002k"
    "0\030\001 \002(\t\022\n\n\002k1\030\002 \002(\t\022\n\n\002k2\030\003 \002(\t\022\n\n\002k3\030\004 "
    "\002(\t\022\n\n\002k4\030\005 \002(\t\022\n\n\002k5\030\006 \002(\t\"\020\n\005CONST\022\007\n\003"
    "CMD\020i", 205);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ukex.klinedata.proto", &protobuf_RegisterTypes);
  klinedata::default_instance_ = new klinedata();
  klinedata_Data::default_instance_ = new klinedata_Data();
  klinedata::default_instance_->InitAsDefaultInstance();
  klinedata_Data::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ukex_2eklinedata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ukex_2eklinedata_2eproto {
  StaticDescriptorInitializer_ukex_2eklinedata_2eproto() {
    protobuf_AddDesc_ukex_2eklinedata_2eproto();
  }
} static_descriptor_initializer_ukex_2eklinedata_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* klinedata_CONST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return klinedata_CONST_descriptor_;
}
bool klinedata_CONST_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const klinedata_CONST klinedata::CMD;
const klinedata_CONST klinedata::CONST_MIN;
const klinedata_CONST klinedata::CONST_MAX;
const int klinedata::CONST_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int klinedata_Data::kK0FieldNumber;
const int klinedata_Data::kK1FieldNumber;
const int klinedata_Data::kK2FieldNumber;
const int klinedata_Data::kK3FieldNumber;
const int klinedata_Data::kK4FieldNumber;
const int klinedata_Data::kK5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

klinedata_Data::klinedata_Data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.klinedata.Data)
}

void klinedata_Data::InitAsDefaultInstance() {
}

klinedata_Data::klinedata_Data(const klinedata_Data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.klinedata.Data)
}

void klinedata_Data::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  k0_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k5_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

klinedata_Data::~klinedata_Data() {
  // @@protoc_insertion_point(destructor:ukex.klinedata.Data)
  SharedDtor();
}

void klinedata_Data::SharedDtor() {
  k0_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  k5_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void klinedata_Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* klinedata_Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return klinedata_Data_descriptor_;
}

const klinedata_Data& klinedata_Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2eklinedata_2eproto();
  return *default_instance_;
}

klinedata_Data* klinedata_Data::default_instance_ = NULL;

klinedata_Data* klinedata_Data::New(::google::protobuf::Arena* arena) const {
  klinedata_Data* n = new klinedata_Data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void klinedata_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.klinedata.Data)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_k0()) {
      k0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_k1()) {
      k1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_k2()) {
      k2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_k3()) {
      k3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_k4()) {
      k4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_k5()) {
      k5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool klinedata_Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.klinedata.Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string k0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k0().data(), this->k0().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.Data.k0");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_k1;
        break;
      }

      // required string k1 = 2;
      case 2: {
        if (tag == 18) {
         parse_k1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k1().data(), this->k1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.Data.k1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_k2;
        break;
      }

      // required string k2 = 3;
      case 3: {
        if (tag == 26) {
         parse_k2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k2().data(), this->k2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.Data.k2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_k3;
        break;
      }

      // required string k3 = 4;
      case 4: {
        if (tag == 34) {
         parse_k3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k3().data(), this->k3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.Data.k3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_k4;
        break;
      }

      // required string k4 = 5;
      case 5: {
        if (tag == 42) {
         parse_k4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k4().data(), this->k4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.Data.k4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_k5;
        break;
      }

      // required string k5 = 6;
      case 6: {
        if (tag == 50) {
         parse_k5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_k5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->k5().data(), this->k5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.Data.k5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.klinedata.Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.klinedata.Data)
  return false;
#undef DO_
}

void klinedata_Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.klinedata.Data)
  // required string k0 = 1;
  if (has_k0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k0().data(), this->k0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k0");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->k0(), output);
  }

  // required string k1 = 2;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k1().data(), this->k1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->k1(), output);
  }

  // required string k2 = 3;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k2().data(), this->k2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->k2(), output);
  }

  // required string k3 = 4;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k3().data(), this->k3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->k3(), output);
  }

  // required string k4 = 5;
  if (has_k4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k4().data(), this->k4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->k4(), output);
  }

  // required string k5 = 6;
  if (has_k5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k5().data(), this->k5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->k5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.klinedata.Data)
}

::google::protobuf::uint8* klinedata_Data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.klinedata.Data)
  // required string k0 = 1;
  if (has_k0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k0().data(), this->k0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k0");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->k0(), target);
  }

  // required string k1 = 2;
  if (has_k1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k1().data(), this->k1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->k1(), target);
  }

  // required string k2 = 3;
  if (has_k2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k2().data(), this->k2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->k2(), target);
  }

  // required string k3 = 4;
  if (has_k3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k3().data(), this->k3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->k3(), target);
  }

  // required string k4 = 5;
  if (has_k4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k4().data(), this->k4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->k4(), target);
  }

  // required string k5 = 6;
  if (has_k5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->k5().data(), this->k5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.Data.k5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->k5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.klinedata.Data)
  return target;
}

int klinedata_Data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ukex.klinedata.Data)
  int total_size = 0;

  if (has_k0()) {
    // required string k0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k0());
  }

  if (has_k1()) {
    // required string k1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k1());
  }

  if (has_k2()) {
    // required string k2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k2());
  }

  if (has_k3()) {
    // required string k3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k3());
  }

  if (has_k4()) {
    // required string k4 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k4());
  }

  if (has_k5()) {
    // required string k5 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k5());
  }

  return total_size;
}
int klinedata_Data::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.klinedata.Data)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required string k0 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k0());

    // required string k1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k1());

    // required string k2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k2());

    // required string k3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k3());

    // required string k4 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k4());

    // required string k5 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->k5());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void klinedata_Data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.klinedata.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const klinedata_Data* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const klinedata_Data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.klinedata.Data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.klinedata.Data)
    MergeFrom(*source);
  }
}

void klinedata_Data::MergeFrom(const klinedata_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.klinedata.Data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_k0()) {
      set_has_k0();
      k0_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k0_);
    }
    if (from.has_k1()) {
      set_has_k1();
      k1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k1_);
    }
    if (from.has_k2()) {
      set_has_k2();
      k2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k2_);
    }
    if (from.has_k3()) {
      set_has_k3();
      k3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k3_);
    }
    if (from.has_k4()) {
      set_has_k4();
      k4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k4_);
    }
    if (from.has_k5()) {
      set_has_k5();
      k5_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.k5_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void klinedata_Data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.klinedata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void klinedata_Data::CopyFrom(const klinedata_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.klinedata.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool klinedata_Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void klinedata_Data::Swap(klinedata_Data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void klinedata_Data::InternalSwap(klinedata_Data* other) {
  k0_.Swap(&other->k0_);
  k1_.Swap(&other->k1_);
  k2_.Swap(&other->k2_);
  k3_.Swap(&other->k3_);
  k4_.Swap(&other->k4_);
  k5_.Swap(&other->k5_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata klinedata_Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = klinedata_Data_descriptor_;
  metadata.reflection = klinedata_Data_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int klinedata::kTypeFieldNumber;
const int klinedata::kDataFieldNumber;
const int klinedata::kTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

klinedata::klinedata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ukex.klinedata)
}

void klinedata::InitAsDefaultInstance() {
}

klinedata::klinedata(const klinedata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ukex.klinedata)
}

void klinedata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

klinedata::~klinedata() {
  // @@protoc_insertion_point(destructor:ukex.klinedata)
  SharedDtor();
}

void klinedata::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void klinedata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* klinedata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return klinedata_descriptor_;
}

const klinedata& klinedata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ukex_2eklinedata_2eproto();
  return *default_instance_;
}

klinedata* klinedata::default_instance_ = NULL;

klinedata* klinedata::New(::google::protobuf::Arena* arena) const {
  klinedata* n = new klinedata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void klinedata::Clear() {
// @@protoc_insertion_point(message_clear_start:ukex.klinedata)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_token()) {
      token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool klinedata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ukex.klinedata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .ukex.klinedata.Data data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ukex.klinedata.token");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ukex.klinedata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ukex.klinedata)
  return false;
#undef DO_
}

void klinedata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ukex.klinedata)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // repeated .ukex.klinedata.Data data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ukex.klinedata)
}

::google::protobuf::uint8* klinedata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ukex.klinedata)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // repeated .ukex.klinedata.Data data = 2;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->data(i), false, target);
  }

  // optional string token = 3;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ukex.klinedata.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ukex.klinedata)
  return target;
}

int klinedata::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ukex.klinedata)
  int total_size = 0;

  // required string type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }
  // optional string token = 3;
  if (has_token()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // repeated .ukex.klinedata.Data data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void klinedata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ukex.klinedata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const klinedata* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const klinedata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ukex.klinedata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ukex.klinedata)
    MergeFrom(*source);
  }
}

void klinedata::MergeFrom(const klinedata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ukex.klinedata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_token()) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void klinedata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ukex.klinedata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void klinedata::CopyFrom(const klinedata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ukex.klinedata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool klinedata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void klinedata::Swap(klinedata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void klinedata::InternalSwap(klinedata* other) {
  type_.Swap(&other->type_);
  data_.UnsafeArenaSwap(&other->data_);
  token_.Swap(&other->token_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata klinedata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = klinedata_descriptor_;
  metadata.reflection = klinedata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// klinedata_Data

// required string k0 = 1;
bool klinedata_Data::has_k0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void klinedata_Data::set_has_k0() {
  _has_bits_[0] |= 0x00000001u;
}
void klinedata_Data::clear_has_k0() {
  _has_bits_[0] &= ~0x00000001u;
}
void klinedata_Data::clear_k0() {
  k0_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k0();
}
 const ::std::string& klinedata_Data::k0() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k0)
  return k0_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_k0(const ::std::string& value) {
  set_has_k0();
  k0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k0)
}
 void klinedata_Data::set_k0(const char* value) {
  set_has_k0();
  k0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k0)
}
 void klinedata_Data::set_k0(const char* value, size_t size) {
  set_has_k0();
  k0_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k0)
}
 ::std::string* klinedata_Data::mutable_k0() {
  set_has_k0();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k0)
  return k0_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata_Data::release_k0() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k0)
  clear_has_k0();
  return k0_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_allocated_k0(::std::string* k0) {
  if (k0 != NULL) {
    set_has_k0();
  } else {
    clear_has_k0();
  }
  k0_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k0);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k0)
}

// required string k1 = 2;
bool klinedata_Data::has_k1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void klinedata_Data::set_has_k1() {
  _has_bits_[0] |= 0x00000002u;
}
void klinedata_Data::clear_has_k1() {
  _has_bits_[0] &= ~0x00000002u;
}
void klinedata_Data::clear_k1() {
  k1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k1();
}
 const ::std::string& klinedata_Data::k1() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k1)
  return k1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_k1(const ::std::string& value) {
  set_has_k1();
  k1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k1)
}
 void klinedata_Data::set_k1(const char* value) {
  set_has_k1();
  k1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k1)
}
 void klinedata_Data::set_k1(const char* value, size_t size) {
  set_has_k1();
  k1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k1)
}
 ::std::string* klinedata_Data::mutable_k1() {
  set_has_k1();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k1)
  return k1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata_Data::release_k1() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k1)
  clear_has_k1();
  return k1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_allocated_k1(::std::string* k1) {
  if (k1 != NULL) {
    set_has_k1();
  } else {
    clear_has_k1();
  }
  k1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k1);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k1)
}

// required string k2 = 3;
bool klinedata_Data::has_k2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void klinedata_Data::set_has_k2() {
  _has_bits_[0] |= 0x00000004u;
}
void klinedata_Data::clear_has_k2() {
  _has_bits_[0] &= ~0x00000004u;
}
void klinedata_Data::clear_k2() {
  k2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k2();
}
 const ::std::string& klinedata_Data::k2() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k2)
  return k2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_k2(const ::std::string& value) {
  set_has_k2();
  k2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k2)
}
 void klinedata_Data::set_k2(const char* value) {
  set_has_k2();
  k2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k2)
}
 void klinedata_Data::set_k2(const char* value, size_t size) {
  set_has_k2();
  k2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k2)
}
 ::std::string* klinedata_Data::mutable_k2() {
  set_has_k2();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k2)
  return k2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata_Data::release_k2() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k2)
  clear_has_k2();
  return k2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_allocated_k2(::std::string* k2) {
  if (k2 != NULL) {
    set_has_k2();
  } else {
    clear_has_k2();
  }
  k2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k2);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k2)
}

// required string k3 = 4;
bool klinedata_Data::has_k3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void klinedata_Data::set_has_k3() {
  _has_bits_[0] |= 0x00000008u;
}
void klinedata_Data::clear_has_k3() {
  _has_bits_[0] &= ~0x00000008u;
}
void klinedata_Data::clear_k3() {
  k3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k3();
}
 const ::std::string& klinedata_Data::k3() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k3)
  return k3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_k3(const ::std::string& value) {
  set_has_k3();
  k3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k3)
}
 void klinedata_Data::set_k3(const char* value) {
  set_has_k3();
  k3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k3)
}
 void klinedata_Data::set_k3(const char* value, size_t size) {
  set_has_k3();
  k3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k3)
}
 ::std::string* klinedata_Data::mutable_k3() {
  set_has_k3();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k3)
  return k3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata_Data::release_k3() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k3)
  clear_has_k3();
  return k3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_allocated_k3(::std::string* k3) {
  if (k3 != NULL) {
    set_has_k3();
  } else {
    clear_has_k3();
  }
  k3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k3);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k3)
}

// required string k4 = 5;
bool klinedata_Data::has_k4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void klinedata_Data::set_has_k4() {
  _has_bits_[0] |= 0x00000010u;
}
void klinedata_Data::clear_has_k4() {
  _has_bits_[0] &= ~0x00000010u;
}
void klinedata_Data::clear_k4() {
  k4_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k4();
}
 const ::std::string& klinedata_Data::k4() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k4)
  return k4_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_k4(const ::std::string& value) {
  set_has_k4();
  k4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k4)
}
 void klinedata_Data::set_k4(const char* value) {
  set_has_k4();
  k4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k4)
}
 void klinedata_Data::set_k4(const char* value, size_t size) {
  set_has_k4();
  k4_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k4)
}
 ::std::string* klinedata_Data::mutable_k4() {
  set_has_k4();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k4)
  return k4_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata_Data::release_k4() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k4)
  clear_has_k4();
  return k4_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_allocated_k4(::std::string* k4) {
  if (k4 != NULL) {
    set_has_k4();
  } else {
    clear_has_k4();
  }
  k4_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k4);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k4)
}

// required string k5 = 6;
bool klinedata_Data::has_k5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void klinedata_Data::set_has_k5() {
  _has_bits_[0] |= 0x00000020u;
}
void klinedata_Data::clear_has_k5() {
  _has_bits_[0] &= ~0x00000020u;
}
void klinedata_Data::clear_k5() {
  k5_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_k5();
}
 const ::std::string& klinedata_Data::k5() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.Data.k5)
  return k5_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_k5(const ::std::string& value) {
  set_has_k5();
  k5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.Data.k5)
}
 void klinedata_Data::set_k5(const char* value) {
  set_has_k5();
  k5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.Data.k5)
}
 void klinedata_Data::set_k5(const char* value, size_t size) {
  set_has_k5();
  k5_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.Data.k5)
}
 ::std::string* klinedata_Data::mutable_k5() {
  set_has_k5();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.Data.k5)
  return k5_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata_Data::release_k5() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.Data.k5)
  clear_has_k5();
  return k5_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata_Data::set_allocated_k5(::std::string* k5) {
  if (k5 != NULL) {
    set_has_k5();
  } else {
    clear_has_k5();
  }
  k5_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), k5);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.Data.k5)
}

// -------------------------------------------------------------------

// klinedata

// required string type = 1;
bool klinedata::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void klinedata::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void klinedata::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void klinedata::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& klinedata::type() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.type)
}
 void klinedata::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.type)
}
 void klinedata::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.type)
}
 ::std::string* klinedata::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata::release_type() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.type)
}

// repeated .ukex.klinedata.Data data = 2;
int klinedata::data_size() const {
  return data_.size();
}
void klinedata::clear_data() {
  data_.Clear();
}
const ::ukex::klinedata_Data& klinedata::data(int index) const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.data)
  return data_.Get(index);
}
::ukex::klinedata_Data* klinedata::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.data)
  return data_.Mutable(index);
}
::ukex::klinedata_Data* klinedata::add_data() {
  // @@protoc_insertion_point(field_add:ukex.klinedata.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::ukex::klinedata_Data >*
klinedata::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ukex.klinedata.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::ukex::klinedata_Data >&
klinedata::data() const {
  // @@protoc_insertion_point(field_list:ukex.klinedata.data)
  return data_;
}

// optional string token = 3;
bool klinedata::has_token() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void klinedata::set_has_token() {
  _has_bits_[0] |= 0x00000004u;
}
void klinedata::clear_has_token() {
  _has_bits_[0] &= ~0x00000004u;
}
void klinedata::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_token();
}
 const ::std::string& klinedata::token() const {
  // @@protoc_insertion_point(field_get:ukex.klinedata.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata::set_token(const ::std::string& value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ukex.klinedata.token)
}
 void klinedata::set_token(const char* value) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ukex.klinedata.token)
}
 void klinedata::set_token(const char* value, size_t size) {
  set_has_token();
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ukex.klinedata.token)
}
 ::std::string* klinedata::mutable_token() {
  set_has_token();
  // @@protoc_insertion_point(field_mutable:ukex.klinedata.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* klinedata::release_token() {
  // @@protoc_insertion_point(field_release:ukex.klinedata.token)
  clear_has_token();
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void klinedata::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    set_has_token();
  } else {
    clear_has_token();
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:ukex.klinedata.token)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ukex

// @@protoc_insertion_point(global_scope)
